<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Empty the inbox of your email</title>
      <link href="/2021/10/03/Empty-the-inbox-of-your-email/"/>
      <url>/2021/10/03/Empty-the-inbox-of-your-email/</url>
      
        <content type="html"><![CDATA[<p>To briefly explain why we want to empty the inbox and methods to quickly archive<br>hundreds or thousands emails if your already accumulated.</p><h1 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h1><p>Just google <code>Empty email inbox</code>, you will find lots of articles talk about why<br>you want to do it. In short, you needs empty inbox by archiving emails for </p><ul><li>Organization<ul><li>get rid of junk </li><li>unsubscribe from emails you do not want</li></ul></li><li>Feeling in control</li><li>Not missing important email </li><li>Efficiency<ul><li>Force to make decision when receiving new email</li></ul></li></ul><p>To those who are new to <code>Archive</code>, you will not lose any email by archiving it.<br>Archived emails can always be found in <code>All mails</code>.</p><h1 id="HOW-for-gmail-users"><a href="#HOW-for-gmail-users" class="headerlink" title="HOW - for gmail users."></a>HOW - for gmail users.</h1><h2 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h2><p>In gmail, setup following configs</p><ul><li><code>[All settings]</code> -&gt; <code>[General]</code>: <code>Maximum page size: 100</code></li><li><code>[All settings]</code> -&gt; <code>[General]</code>: <code>Keyboard shortcuts: ON</code></li></ul><p>Now, you can archive emails from your inbox with shortcut.</p><ul><li><code>* + a</code> to select all emails.</li><li><code>e</code> to archive selected emails.</li></ul><p>Repeated above steps until your inbox is empty.</p><h2 id="Automation-with-Apple-Script"><a href="#Automation-with-Apple-Script" class="headerlink" title="Automation with Apple Script"></a>Automation with Apple Script</h2><p>If you have couple thousands of email, the manual procedures will be quite annoying.<br>We can automate that with <code>Apple Script</code> if you are using MacOS.</p><ul><li>Open MacOS embedded application <code>Automator</code></li><li>Click <code>New Document</code></li><li>Select <code>Quick Action</code> as type of new document</li><li>Click <code>Choose</code></li><li>Change <code>Workflow receives current</code> to <code>no input</code></li><li>Click <code>Record</code></li><li>Open <code>gmail</code> in your browser and repeat steps in above section to archive 100 emails</li><li>Click <code>STOP</code> button in <code>Automator</code>‘s popup</li><li>Modify script to repeat the recorded operations</li></ul><p>Please check this <a href="https://youtu.be/J4nj13T7Iqk" target="_blank" rel="noopener">video</a>, for details.</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AppleScript </tag>
            
            <tag> Automation </tag>
            
            <tag> Productivity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fundamental Algorithm Knowledge</title>
      <link href="/2020/10/10/Fundamental-Algorithm-Knowledge/"/>
      <url>/2020/10/10/Fundamental-Algorithm-Knowledge/</url>
      
        <content type="html"><![CDATA[<blockquote><p>If all you have is a hammer, everything looks like a nail </p><pre><code>- Abraham Maslow, 1962</code></pre></blockquote><h1 id="List-Stack-LinkedList"><a href="#List-Stack-LinkedList" class="headerlink" title="List, Stack, LinkedList"></a>List, Stack, LinkedList</h1><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><h2 id="Heap-Priority-Queue"><a href="#Heap-Priority-Queue" class="headerlink" title="Heap, Priority Queue"></a>Heap, Priority Queue</h2><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><h3 id="Monotonic-Stack"><a href="#Monotonic-Stack" class="headerlink" title="Monotonic Stack"></a>Monotonic Stack</h3><h3 id="Monotonic-Queue"><a href="#Monotonic-Queue" class="headerlink" title="Monotonic Queue"></a>Monotonic Queue</h3><h2 id="Rare-technique"><a href="#Rare-technique" class="headerlink" title="Rare technique"></a>Rare technique</h2><ol><li>KMP</li><li>Manacher’s algorithm</li></ol><h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><h2 id="Advanced-Tree"><a href="#Advanced-Tree" class="headerlink" title="Advanced Tree"></a>Advanced Tree</h2><h3 id="Binary-Index-Tree-Fenwick-Tree"><a href="#Binary-Index-Tree-Fenwick-Tree" class="headerlink" title="Binary Index Tree (Fenwick Tree)"></a>Binary Index Tree (Fenwick Tree)</h3><h3 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h3><h3 id="Self-Balanced-Tree-RB-Tree"><a href="#Self-Balanced-Tree-RB-Tree" class="headerlink" title="Self-Balanced Tree, RB Tree"></a>Self-Balanced Tree, RB Tree</h3><h1 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union-Find"></a>Union-Find</h1><h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><h2 id="DFS-BFS"><a href="#DFS-BFS" class="headerlink" title="DFS/BFS"></a>DFS/BFS</h2><h2 id="Cycle-Detection"><a href="#Cycle-Detection" class="headerlink" title="Cycle Detection"></a>Cycle Detection</h2><h2 id="Topologic-Sort"><a href="#Topologic-Sort" class="headerlink" title="Topologic Sort"></a>Topologic Sort</h2><h2 id="Euler-Path"><a href="#Euler-Path" class="headerlink" title="Euler Path"></a>Euler Path</h2><h2 id="Shortest-Path"><a href="#Shortest-Path" class="headerlink" title="Shortest Path"></a>Shortest Path</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><h3 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h3><h3 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h3><h2 id="Minimal-Spanning-Tree"><a href="#Minimal-Spanning-Tree" class="headerlink" title="Minimal Spanning Tree"></a>Minimal Spanning Tree</h2><h3 id="Kruskal’s-Algorithm"><a href="#Kruskal’s-Algorithm" class="headerlink" title="Kruskal’s Algorithm"></a>Kruskal’s Algorithm</h3><h3 id="Prim’s-Algorithm"><a href="#Prim’s-Algorithm" class="headerlink" title="Prim’s Algorithm"></a>Prim’s Algorithm</h3><h2 id="Tarjan’s-Algorithm"><a href="#Tarjan’s-Algorithm" class="headerlink" title="Tarjan’s Algorithm"></a>Tarjan’s Algorithm</h2><h3 id="Strong-Connected-Component"><a href="#Strong-Connected-Component" class="headerlink" title="Strong Connected Component"></a>Strong Connected Component</h3><h3 id="Cutting-Edge"><a href="#Cutting-Edge" class="headerlink" title="Cutting Edge"></a>Cutting Edge</h3><h3 id="Cutting-Point"><a href="#Cutting-Point" class="headerlink" title="Cutting Point"></a>Cutting Point</h3><h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h1><h2 id="Bit-Mask"><a href="#Bit-Mask" class="headerlink" title="Bit Mask"></a>Bit Mask</h2><p>## </p><h1 id="uncategorized"><a href="#uncategorized" class="headerlink" title="uncategorized"></a>uncategorized</h1><ol><li>Binary Lifting</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Essential Graph Algorithms</title>
      <link href="/2020/09/27/Essential-Graph-Algorithms/"/>
      <url>/2020/09/27/Essential-Graph-Algorithms/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="What-is-a-Graph"><a href="#What-is-a-Graph" class="headerlink" title="What is a Graph"></a>What is a Graph</h1><h2 id="Non-directed"><a href="#Non-directed" class="headerlink" title="Non-directed"></a>Non-directed</h2><h2 id="Directed"><a href="#Directed" class="headerlink" title="Directed"></a>Directed</h2><h1 id="Cycle-Detection"><a href="#Cycle-Detection" class="headerlink" title="Cycle Detection"></a>Cycle Detection</h1><h2 id="Non-directed-Graph"><a href="#Non-directed-Graph" class="headerlink" title="Non-directed Graph"></a>Non-directed Graph</h2><h3 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union-Find"></a>Union-Find</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.uf = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        uf = self.uf</span><br><span class="line">        uf.setdefault(x, x)</span><br><span class="line">        <span class="keyword">if</span> uf[x] != x:</span><br><span class="line">            uf[x] = self.find(uf[x])</span><br><span class="line">        <span class="keyword">return</span> uf[x]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x: int, y: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># x -&gt; y</span></span><br><span class="line">        uf = self.uf</span><br><span class="line">        uf[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_cycle</span><span class="params">(n: int, edges: List[Tuple[int, int]])</span> -&gt; bool:</span></span><br><span class="line">    uf = UF()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> uf.find(u) == uf.find(v):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        uf.union(u, v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="literal">True</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="keyword">assert</span> <span class="literal">False</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_cycle</span><span class="params">(n: int, edges: List[Tuple[int, int]])</span> -&gt; bool:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u: int, p: int)</span> -&gt; bool:</span></span><br><span class="line">        visited.add(u)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            <span class="keyword">if</span> v == p: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> visited <span class="keyword">or</span> dfs(v, u):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    graph, visited = defaultdict(set), set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].add(v)</span><br><span class="line">        graph[v].add(u)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dfs(u, <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="literal">True</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="keyword">assert</span> <span class="literal">False</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br></pre></td></tr></table></figure><h2 id="Directed-Graph"><a href="#Directed-Graph" class="headerlink" title="Directed Graph"></a>Directed Graph</h2><h3 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_cycle</span><span class="params">(n: int, edges: List[Tuple[int, int]])</span> -&gt; bool:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u: int)</span> -&gt; bool:</span></span><br><span class="line">        visited.add(u), stack.add(u)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> stack <span class="keyword">or</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dfs(v):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        stack.remove(u)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    graph, visited, stack = defaultdict(set), set(), set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].add(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dfs(u):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="literal">True</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="keyword">assert</span> <span class="literal">False</span> == detect_cycle(<span class="number">4</span>, [(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)])</span><br></pre></td></tr></table></figure><h1 id="Euler-Path"><a href="#Euler-Path" class="headerlink" title="Euler Path"></a>Euler Path</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_euler_path</span><span class="params">(start: int, edges: List[Tuple[int, int]])</span> -&gt; List[int]:</span></span><br><span class="line">    <span class="comment"># Assume euler path does exist</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> graph[u]:</span><br><span class="line">            v = graph[u].pop()</span><br><span class="line">            dfs(v)</span><br><span class="line">        ret.append(u)</span><br><span class="line"></span><br><span class="line">    graph, ret = defaultdict(set), []</span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].add(v)</span><br><span class="line">    </span><br><span class="line">    dfs(start)</span><br><span class="line">    <span class="keyword">return</span> ret[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(find_euler_path(<span class="number">0</span>, [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">4</span>)] ))</span><br></pre></td></tr></table></figure><h1 id="Shortest-Path"><a href="#Shortest-Path" class="headerlink" title="Shortest Path"></a>Shortest Path</h1><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(n: int, edges: List[Tuple[int, int, int]], begin: int, end: int)</span> -&gt; List[int]:</span></span><br><span class="line">    graph, dist, prev = defaultdict(dict), defaultdict(<span class="keyword">lambda</span>: math.inf), &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u][v] = w</span><br><span class="line">    </span><br><span class="line">    q = SortedList([(<span class="number">0</span>, begin)])</span><br><span class="line">    dist[begin] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        _, u = q.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            <span class="keyword">if</span> dist[v] &gt; dist[u] + w:</span><br><span class="line">                q.discard((dist[v], v)) <span class="comment"># this will reduce the time complexity from O(E*log(V)) to O(V*log(V))</span></span><br><span class="line">                prev[v] = u</span><br><span class="line">                dist[v] = dist[u] + w</span><br><span class="line">                q.add((dist[v], v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dist[end] == math.inf:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bt</span><span class="params">(cur)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cur == begin:</span><br><span class="line">            <span class="keyword">return</span> [begin]</span><br><span class="line">        <span class="keyword">return</span> bt(prev[cur]) + [cur]</span><br><span class="line">    <span class="keyword">return</span> bt(end)</span><br><span class="line"></span><br><span class="line">print(dijkstra(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]], <span class="number">0</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman Ford"></a>Bellman Ford</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bellman_ford</span><span class="params">(n: int, edges: List[Tuple[int, int, int]], begin: int, end: int)</span> -&gt; List[int]:</span></span><br><span class="line">    dist = defaultdict(<span class="keyword">lambda</span>: math.inf)</span><br><span class="line">    dist[begin], prev = <span class="number">0</span>, &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        upd = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> dist[v] &gt; dist[u] + w:</span><br><span class="line">                dist[v] = dist[u] + w</span><br><span class="line">                prev[v] = u</span><br><span class="line">                upd += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> upd:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> dist[u] + w &lt; dist[v]:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Negative cycle'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bt</span><span class="params">(u)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> u == begin:</span><br><span class="line">            <span class="keyword">return</span> [begin]</span><br><span class="line">        <span class="keyword">return</span> bt(prev[u]) + [u]</span><br><span class="line">    <span class="keyword">return</span> bt(end)</span><br><span class="line"></span><br><span class="line">print(bellman_ford(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]], <span class="number">0</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd Warshall"></a>Floyd Warshall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floyd_warshall</span><span class="params">(n: int, edges: List[Tuple[int, int, int]], begin: int, end: int)</span> -&gt; int:</span></span><br><span class="line">    dist = defaultdict(<span class="keyword">lambda</span>: math.inf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        dist[(u, v)] = w</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> dist[(u, k)] + dist[(k, v)] &lt; dist[(u, v)]:</span><br><span class="line">                    dist[(u, v)] = dist[(u, k)] + dist[(k, v)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dist[(begin, end)]</span><br><span class="line"></span><br><span class="line">print(floyd_warshall(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]], <span class="number">0</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h1 id="Minimal-Spanning-Tree"><a href="#Minimal-Spanning-Tree" class="headerlink" title="Minimal Spanning Tree"></a>Minimal Spanning Tree</h1><h2 id="Kruskal’s-method"><a href="#Kruskal’s-method" class="headerlink" title="Kruskal’s method"></a>Kruskal’s method</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">(n: int, edges: List[Tuple[int, int, int]])</span> -&gt; int:</span></span><br><span class="line">    uf, ret = UF(), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> sorted(edges, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>]):</span><br><span class="line">        <span class="keyword">if</span> uf.find(u) != uf.find(v):</span><br><span class="line">            ret.append((u, v, w))</span><br><span class="line">            uf.union(u, v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">if</span> len(set(map(uf.find, range(n)))) == <span class="number">1</span> <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">print(kruskal(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]]))</span><br></pre></td></tr></table></figure><h2 id="Prim’s-method"><a href="#Prim’s-method" class="headerlink" title="Prim’s method"></a>Prim’s method</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(n: int, edges: List[Tuple[int, int, int]])</span> -&gt; int:</span></span><br><span class="line">    graph = defaultdict(dict)</span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u][v] = w</span><br><span class="line">    </span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    pq, ret, visited, prev = SortedList([(<span class="number">0</span>, start, <span class="literal">None</span>)]), [], set(), &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pq:</span><br><span class="line">        <span class="keyword">if</span> len(visited) == n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        w, u, p = pq.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        visited.add(u), ret.append((p, u, w))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> prev <span class="keyword">and</span> prev[v][<span class="number">1</span>] &gt;= w:</span><br><span class="line">                pq.remove((prev[v][<span class="number">1</span>], v, prev[v][<span class="number">0</span>]))</span><br><span class="line">            prev[v] = (u, w)</span><br><span class="line">            pq.add((w, v, u))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret[<span class="number">1</span>:] <span class="keyword">if</span> len(visited) == n <span class="keyword">else</span> []</span><br><span class="line">        </span><br><span class="line">print(prim(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]]))</span><br></pre></td></tr></table></figure><h1 id="Tarjan’s-algorithm"><a href="#Tarjan’s-algorithm" class="headerlink" title="Tarjan’s algorithm"></a>Tarjan’s algorithm</h1><h2 id="Strong-Connected-Component"><a href="#Strong-Connected-Component" class="headerlink" title="Strong Connected Component"></a>Strong Connected Component</h2><h2 id="Cutting-Edge"><a href="#Cutting-Edge" class="headerlink" title="Cutting Edge"></a>Cutting Edge</h2><h2 id="Cutting-Vertex"><a href="#Cutting-Vertex" class="headerlink" title="Cutting Vertex"></a>Cutting Vertex</h2>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Graph </tag>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 207</title>
      <link href="/2020/09/20/weekly-contest-207/"/>
      <url>/2020/09/20/weekly-contest-207/</url>
      
        <content type="html"><![CDATA[<h1 id="Q1-1592-Rearrange-Spaces-Between-Words"><a href="#Q1-1592-Rearrange-Spaces-Between-Words" class="headerlink" title="Q1. 1592. Rearrange Spaces Between Words"></a>Q1. <a href="https://leetcode.com/problems/rearrange-spaces-between-words/" target="_blank" rel="noopener">1592. Rearrange Spaces Between Words</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderSpaces</span><span class="params">(self, text: str)</span> -&gt; str:</span></span><br><span class="line">        words = text.split()</span><br><span class="line">        spaces, n = text.count(<span class="string">' '</span>), len(words)</span><br><span class="line">        ret = <span class="string">''</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(words):</span><br><span class="line">            ret += word</span><br><span class="line">            <span class="keyword">if</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> i != n<span class="number">-1</span>:</span><br><span class="line">                ret += <span class="string">' '</span> * (spaces // (n<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret + <span class="string">' '</span> * ((spaces % (n<span class="number">-1</span>)) <span class="keyword">if</span> n&gt;<span class="number">1</span> <span class="keyword">else</span> spaces)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1593-Split-a-String-Into-the-Max-Number-of-Unique-Substrings"><a href="#Q2-1593-Split-a-String-Into-the-Max-Number-of-Unique-Substrings" class="headerlink" title="Q2. 1593. Split a String Into the Max Number of Unique Substrings"></a>Q2. <a href="https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings/" target="_blank" rel="noopener">1593. Split a String Into the Max Number of Unique Substrings</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxUniqueSplit</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(idx, cnt, exist)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> ret</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> idx == len(s):</span><br><span class="line">                ret = max(cnt, ret)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(idx+<span class="number">1</span>, len(s)+<span class="number">1</span>):</span><br><span class="line">                word = s[idx:i]</span><br><span class="line">                <span class="keyword">if</span> word <span class="keyword">in</span> exist:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                exist.add(word)</span><br><span class="line">                dfs(i, cnt+<span class="number">1</span>, exist)</span><br><span class="line">                exist.discard(word)</span><br><span class="line">        </span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, set())</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Q3-1594-Maximum-Non-Negative-Product-in-a-Matrix"><a href="#Q3-1594-Maximum-Non-Negative-Product-in-a-Matrix" class="headerlink" title="Q3. 1594. Maximum Non Negative Product in a Matrix"></a>Q3. <a href="https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/" target="_blank" rel="noopener">1594. Maximum Non Negative Product in a Matrix</a></h1><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>Only max or min can contribute to the possible answer.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProductPath</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        m, n = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">        @lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">and</span> y == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>], grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> ()</span><br><span class="line">            </span><br><span class="line">            vals = [val * grid[x][y] <span class="keyword">for</span> prev <span class="keyword">in</span> [(x<span class="number">-1</span>, y), (x, y<span class="number">-1</span>)] <span class="keyword">for</span> val <span class="keyword">in</span> dp(*prev)]</span><br><span class="line">            <span class="comment"># print(vals)</span></span><br><span class="line">            <span class="keyword">return</span> max(vals), min(vals)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (dp(m<span class="number">-1</span>, n<span class="number">-1</span>)[<span class="number">0</span>] % MOD) <span class="keyword">if</span> dp(m<span class="number">-1</span>, n<span class="number">-1</span>)[<span class="number">0</span>] &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="Q4-1595-Minimum-Cost-to-Connect-Two-Groups-of-Points"><a href="#Q4-1595-Minimum-Cost-to-Connect-Two-Groups-of-Points" class="headerlink" title="Q4. 1595. Minimum Cost to Connect Two Groups of Points"></a>Q4. <a href="https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/" target="_blank" rel="noopener">1595. Minimum Cost to Connect Two Groups of Points</a></h1><h1 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h1><p>Use bit mask for represent the state of each group. </p><p>This problem is difficult since it require 2 advanced DP technic </p><ol><li>Bit Mask</li><li>Optimization on <code>State Representation</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectTwoGroups</span><span class="params">(self, M: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_full</span><span class="params">(n)</span>:</span></span><br><span class="line">            ret = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n:</span><br><span class="line">                ret &lt;&lt;= <span class="number">1</span></span><br><span class="line">                ret += <span class="number">1</span></span><br><span class="line">                n -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">        m, n = len(M), len(M[<span class="number">0</span>])</span><br><span class="line">        full2 = get_full(n)</span><br><span class="line">        conn = [min(M[j][i] <span class="keyword">for</span> j <span class="keyword">in</span> range(m)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(idx, s2)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> idx == m <span class="keyword">and</span> s2 == full2:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            ret = math.inf <span class="keyword">if</span> idx != m <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> idx == m:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">1</span> &lt;&lt; i) &amp; s2 == <span class="number">0</span>:</span><br><span class="line">                        ret += conn[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                    ret = min(ret, M[idx][i] + dp(idx+<span class="number">1</span>, s2 | (<span class="number">1</span> &lt;&lt; i)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Understand the problem correctly before coding. (Incorrect submission to Q1 due to misinterpretation )</li><li>Optimize <code>State Representation</code> when TLE happens.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fraction</title>
      <link href="/2020/09/20/Fraction/"/>
      <url>/2020/09/20/Fraction/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fraction</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, numerator: int, denominator: int)</span>:</span></span><br><span class="line">        self.numerator = numerator</span><br><span class="line">        self.denominator = denominator</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.numerator&#125;</span> / <span class="subst">&#123;self.denominator&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, rhs: Fraction)</span>:</span></span><br><span class="line">        l, r = self.numerator * rhs.denominator, self.denominator * rhs.numerator</span><br><span class="line">        <span class="keyword">return</span> l &lt; r</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, rhs: Fraction)</span>:</span></span><br><span class="line">        numerator, denominator = self.numerator * rhs.denominator + rhs.numerator * self.denominator, \</span><br><span class="line">                                 self.denominator * rhs.denominator</span><br><span class="line">        gcd_val = math.gcd(numerator, denominator)</span><br><span class="line">        <span class="keyword">return</span> Fraction(numerator // gcd_val, denominator // gcd_val)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, rhs: Fraction)</span>:</span></span><br><span class="line">        numerator, denominator = rhs.numerator, rhs.denominator</span><br><span class="line">        <span class="keyword">return</span> self.__add__(Fraction(-numerator, denominator))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Top K out of N numbers</title>
      <link href="/2020/08/23/Top-K-out-of-N-numbers/"/>
      <url>/2020/08/23/Top-K-out-of-N-numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ol><li><a href="https://en.wikipedia.org/wiki/Binary_heap" target="_blank" rel="noopener">What is a binary-heap</a></li><li>It takes O(N) to heapify an array contains N integer</li></ol><h1 id="N-Log-K"><a href="#N-Log-K" class="headerlink" title="N*Log(K)"></a>N*Log(K)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heap = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">        heapq.heappush(heap, -num) <span class="comment"># we push -num as we want to build a max-heap</span></span><br><span class="line">        <span class="keyword">if</span> len(heap) &gt; k:</span><br><span class="line">            heapq.heappop(heap)</span><br><span class="line">    <span class="keyword">return</span> [-num <span class="keyword">for</span> num <span class="keyword">in</span> heap]</span><br></pre></td></tr></table></figure><h1 id="K-Log-N"><a href="#K-Log-N" class="headerlink" title="K*Log(N)"></a>K*Log(N)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heapq.heapify(arr)</span><br><span class="line">    <span class="keyword">return</span> [heapq.heappop(arr) <span class="keyword">for</span> i <span class="keyword">in</span> range(k)]</span><br></pre></td></tr></table></figure><h1 id="K-Log-K"><a href="#K-Log-K" class="headerlink" title="K*Log(K)"></a>K*Log(K)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heapq.heapify(arr)</span><br><span class="line">    heap = [(arr[<span class="number">0</span>], <span class="number">0</span>)]</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">        num, idx = heapq.heappop(heap)</span><br><span class="line">        ret.append(num)</span><br><span class="line">        heapq.heappush(heap, (arr[idx*<span class="number">2</span>+<span class="number">1</span>], idx*<span class="number">2</span>+<span class="number">1</span>))</span><br><span class="line">        heapq.heappush(heap, (arr[idx*<span class="number">2</span>+<span class="number">2</span>], idx*<span class="number">2</span>+<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(function)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_function</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line">    ret = function(*args, **kw)</span><br><span class="line">    elapsed = timeit.default_timer() - start_time</span><br><span class="line">    print(<span class="string">'Function "&#123;name&#125;" took &#123;time&#125; seconds to complete.'</span>.format(name=function.__name__, time=elapsed))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  <span class="keyword">return</span> new_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition</span><span class="params">()</span>:</span></span><br><span class="line">  total = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000000</span>):</span><br><span class="line">    total += i</span><br><span class="line">  <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest1</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heap = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">        heapq.heappush(heap, -num) <span class="comment"># we push -num as we want to build a max-heap</span></span><br><span class="line">        <span class="keyword">if</span> len(heap) &gt; k:</span><br><span class="line">            heapq.heappop(heap)</span><br><span class="line">    <span class="keyword">return</span> [-num <span class="keyword">for</span> num <span class="keyword">in</span> heap]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest2</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heapq.heapify(arr)</span><br><span class="line">    <span class="keyword">return</span> [heapq.heappop(arr) <span class="keyword">for</span> i <span class="keyword">in</span> range(k)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_smallest3</span><span class="params">(k: int, arr: List[int])</span>:</span></span><br><span class="line">    heapq.heapify(arr)</span><br><span class="line">    heap = [(arr[<span class="number">0</span>], <span class="number">0</span>)]</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">        num, idx = heapq.heappop(heap)</span><br><span class="line">        ret.append(num)</span><br><span class="line">        heapq.heappush(heap, (arr[idx*<span class="number">2</span>+<span class="number">1</span>], idx*<span class="number">2</span>+<span class="number">1</span>))</span><br><span class="line">        heapq.heappush(heap, (arr[idx*<span class="number">2</span>+<span class="number">2</span>], idx*<span class="number">2</span>+<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">k = <span class="number">5</span></span><br><span class="line">arr = [randrange(<span class="number">0</span>, <span class="number">100000000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>)]</span><br><span class="line"></span><br><span class="line">ans = set(sorted(arr)[:k])</span><br><span class="line"><span class="keyword">assert</span> ans == set(get_k_smallest1(k, list(arr)))</span><br><span class="line"><span class="keyword">assert</span> ans == set(get_k_smallest2(k, list(arr)))</span><br><span class="line"><span class="keyword">assert</span> ans == set(get_k_smallest3(k, list(arr)))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">» /usr/local/opt/python@3.8/bin/python3.8 /Users/yongcao/Program/tmp/py.py                                                                                                                                                              yongs-MBP</span></span><br><span class="line"><span class="string">Function "get_k_smallest1" took 3.168419736999999 seconds to complete.</span></span><br><span class="line"><span class="string">Function "get_k_smallest2" took 0.3814774750000005 seconds to complete.</span></span><br><span class="line"><span class="string">Function "get_k_smallest3" took 0.37742361599999974 seconds to complete.</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tree </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tarjan&#39;s algorithm</title>
      <link href="/2020/08/23/Tarjan-s-algorithm/"/>
      <url>/2020/08/23/Tarjan-s-algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="Find-Strong-Connected-Components-SCC"><a href="#Find-Strong-Connected-Components-SCC" class="headerlink" title="Find Strong Connected Components (SCC)"></a>Find Strong Connected Components (SCC)</h1><p><a href="https://www.youtube.com/watch?v=wUgWX0nc4NY" target="_blank" rel="noopener">Video</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_scc</span><span class="params">(n: int, edges: List[List[int]])</span>:</span></span><br><span class="line">    graph = defaultdict(set)</span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].add(v)</span><br><span class="line">        graph[v].add(u)</span><br><span class="line"></span><br><span class="line">    ids, low = [<span class="number">-1</span>] * n, [<span class="number">-1</span>] * n</span><br><span class="line">    stack, in_stack = [], [<span class="literal">False</span>] * n</span><br><span class="line">    id_max = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> id_max</span><br><span class="line">        stack.append(u)</span><br><span class="line">        in_stack[u] = <span class="literal">True</span></span><br><span class="line">        ids[u] = low[u] = id_max</span><br><span class="line">        id_max += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            <span class="keyword">if</span> ids[v] == <span class="number">-1</span>: dfs(v)</span><br><span class="line">            <span class="keyword">if</span> in_stack[v]:</span><br><span class="line">                low[u] = min(low[u], low[v])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> low[u] == ids[u]:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                node = stack.pop()</span><br><span class="line">                in_stack[node] = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> node == u: <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> ids[i] == <span class="number">-1</span>:</span><br><span class="line">            dfs(i)</span><br><span class="line">    <span class="keyword">return</span> low</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Find-Cutting-Edge"><a href="#Find-Cutting-Edge" class="headerlink" title="Find Cutting Edge"></a>Find Cutting Edge</h1><p><a href="https://www.youtube.com/watch?v=aZXi1unBdJA" target="_blank" rel="noopener">Video</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">criticalConnections</span><span class="params">(n: int, edges: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    graph = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].append(v)</span><br><span class="line">        graph[v].append(u)</span><br><span class="line"></span><br><span class="line">    ids, low = [<span class="number">-1</span>] * n, [<span class="number">0</span>] * n</span><br><span class="line">    id_max, bridges = <span class="number">0</span>, []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u, parent)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> id_max</span><br><span class="line">        ids[u] = low[u] = id_max</span><br><span class="line">        id_max += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            <span class="keyword">if</span> v == parent: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ids[v] == <span class="number">-1</span>:</span><br><span class="line">                dfs(v, u)</span><br><span class="line">                low[u] = min(low[u], low[v])</span><br><span class="line">                <span class="keyword">if</span> ids[u] &lt; low[v]:</span><br><span class="line">                    bridges.append((u, v))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low[u] = min(low[u], ids[v])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> ids[i] != <span class="number">-1</span>: <span class="keyword">continue</span></span><br><span class="line">        dfs(i, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> bridges</span><br><span class="line"></span><br><span class="line">edges = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>), (<span class="number">6</span>, <span class="number">7</span>), (<span class="number">7</span>, <span class="number">8</span>), (<span class="number">8</span>, <span class="number">5</span>)]</span><br><span class="line"><span class="keyword">assert</span> sorted([(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">5</span>)]) == sorted(criticalConnections(<span class="number">9</span>, edges))</span><br></pre></td></tr></table></figure><h1 id="Find-Cut-Vertices"><a href="#Find-Cut-Vertices" class="headerlink" title="Find Cut Vertices"></a>Find Cut Vertices</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_vertex</span><span class="params">(n: int, edges: List[List[int]])</span>:</span></span><br><span class="line">    graph = defaultdict(set)</span><br><span class="line">    <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u].add(v)</span><br><span class="line">        graph[v].add(u)</span><br><span class="line"></span><br><span class="line">    ids, low = [<span class="number">-1</span>] * n, [<span class="number">-1</span>] * n</span><br><span class="line">    is_cut, id_max = [<span class="literal">False</span>] * n, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u, p, root)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> out_edge</span><br><span class="line">        <span class="keyword">nonlocal</span> id_max</span><br><span class="line">        <span class="keyword">if</span> p == root:</span><br><span class="line">            out_edge += <span class="number">1</span></span><br><span class="line">        ids[u] = low[u] = id_max</span><br><span class="line">        id_max += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">            <span class="keyword">if</span> v == p: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ids[v] == <span class="number">-1</span>:</span><br><span class="line">                dfs(v, u, root)</span><br><span class="line">                low[u] = min(low[u], low[v])</span><br><span class="line">                <span class="keyword">if</span> low[v] &gt;= ids[u]:</span><br><span class="line">                    is_cut[u] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low[u] = min(low[u], ids[v])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> ids[i] == <span class="number">-1</span>:</span><br><span class="line">            out_edge = <span class="number">0</span></span><br><span class="line">            dfs(i, <span class="number">-1</span>, i)</span><br><span class="line">            is_cut[i] = out_edge &gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is_cut</span><br><span class="line"></span><br><span class="line">edges = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>), (<span class="number">6</span>, <span class="number">7</span>), (<span class="number">7</span>, <span class="number">8</span>), (<span class="number">8</span>, <span class="number">5</span>)]</span><br><span class="line"><span class="keyword">assert</span> [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>] == cut_vertex(<span class="number">9</span>, edges)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Graph </tag>
            
            <tag> Advanced </tag>
            
            <tag> SCC </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detect Cycle in a Graph</title>
      <link href="/2020/08/22/Detect-Cycle-in-a-Graph/"/>
      <url>/2020/08/22/Detect-Cycle-in-a-Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="Undirected-Graph"><a href="#Undirected-Graph" class="headerlink" title="Undirected Graph"></a>Undirected Graph</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(n: int, edges: List[List])</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u, parent)</span>:</span></span><br><span class="line">            visited.add(u)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">                <span class="keyword">if</span> v == parent: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">in</span> visited <span class="keyword">or</span> dfs(v, u):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        graph, visited = defaultdict(set), set()</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">            graph[u].add(v)</span><br><span class="line">            graph[v].add(u)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dfs(u, <span class="literal">None</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union-Find"></a>Union-Find</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(n: int, edges: List[List])</span> -&gt; bool:</span></span><br><span class="line">        uf = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            uf.setdefault(x, x)</span><br><span class="line">            <span class="keyword">if</span> uf[x] != x:</span><br><span class="line">                uf[x] = find(uf[x])</span><br><span class="line">            <span class="keyword">return</span> uf[x]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span> <span class="comment"># x -&gt; y</span></span><br><span class="line">            uf[find(x)] = find(y)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="keyword">if</span> find(u) == find(v):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            union(u, v)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h1 id="Directed-Graph"><a href="#Directed-Graph" class="headerlink" title="Directed Graph"></a>Directed Graph</h1><h2 id="DFS-Stack"><a href="#DFS-Stack" class="headerlink" title="DFS + Stack"></a>DFS + Stack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(n: int, edges: List[List])</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(u)</span>:</span></span><br><span class="line">            stack.add(u), visited.add(u)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> graph[u]:</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    <span class="keyword">if</span> dfs(v):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> v <span class="keyword">in</span> stack:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            stack.remove(u)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        graph, visited, stack = defaultdict(set), set(), set()</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">            graph[u].add(v)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dfs(u):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="Practice-1"><a href="#Practice-1" class="headerlink" title="Practice"></a>Practice</h2><ol><li><a href="https://leetcode.com/problems/course-schedule/" target="_blank" rel="noopener">207. Course Schedule</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 200</title>
      <link href="/2020/08/02/weekly-contest-200/"/>
      <url>/2020/08/02/weekly-contest-200/</url>
      
        <content type="html"><![CDATA[<h1 id="Q1-1534-Count-Good-Triplets"><a href="#Q1-1534-Count-Good-Triplets" class="headerlink" title="Q1. 1534. Count Good Triplets"></a>Q1. <a href="https://leetcode.com/problems/count-good-triplets/" target="_blank" rel="noopener">1534. Count Good Triplets</a></h1><blockquote><p>Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.</p><p>A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:</p><p>0 &lt;= i &lt; j &lt; k &lt; arr.length<br>|arr[i] - arr[j]| &lt;= a<br>|arr[j] - arr[k]| &lt;= b<br>|arr[i] - arr[k]| &lt;= c<br>Where |x| denotes the absolute value of x.</p><p>Return the number of good triplets.</p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>From constrain <code>3 &lt;= arr.length &lt;= 100</code>, we know this can be solved by <code>complete search</code> aka <code>Brute force</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countGoodTriplets</span><span class="params">(self, A: List[int], a: int, b: int, c: int)</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(arr, idx)</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> ret</span><br><span class="line">            <span class="keyword">if</span> len(arr) == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> abs(arr[<span class="number">0</span>]-arr[<span class="number">1</span>]) &lt;= a <span class="keyword">and</span> abs(arr[<span class="number">1</span>]-arr[<span class="number">2</span>]) &lt;= b <span class="keyword">and</span> abs(arr[<span class="number">0</span>]-arr[<span class="number">2</span>]) &lt;= c:</span><br><span class="line">                    ret += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(idx, len(A)):</span><br><span class="line">                dfs(arr+[A[i]], i+<span class="number">1</span>)</span><br><span class="line">        dfs([], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1535-Find-the-Winner-of-an-Array-Game"><a href="#Q2-1535-Find-the-Winner-of-an-Array-Game" class="headerlink" title="Q2. 1535. Find the Winner of an Array Game"></a>Q2. <a href="https://leetcode.com/problems/find-the-winner-of-an-array-game/" target="_blank" rel="noopener">1535. Find the Winner of an Array Game</a></h1><blockquote><p>Given an integer array arr of distinct integers and an integer k.</p><p>A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0 and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.</p><p>Return the integer which will win the game.</p><p>It is guaranteed that there will be a winner of the game.</p></blockquote><h2 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h2><p>Stuck here for a long time.<br>Key point is once we have visited the entire array once, the greatest number will be kept at idx-0.<br>Hence, we can simply simulate the game and find the first number win k times.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getWinner</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        cur, win = arr[<span class="number">0</span>], <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; cur:</span><br><span class="line">                cur = arr[i]</span><br><span class="line">                win = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                win +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> win == k:</span><br><span class="line">                <span class="keyword">return</span> cur</span><br><span class="line">        <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><h1 id="3-1536-Minimum-Swaps-to-Arrange-a-Binary-Grid"><a href="#3-1536-Minimum-Swaps-to-Arrange-a-Binary-Grid" class="headerlink" title="3. 1536. Minimum Swaps to Arrange a Binary Grid"></a>3. <a href="https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/" target="_blank" rel="noopener">1536. Minimum Swaps to Arrange a Binary Grid</a></h1><p>See details in link</p><h2 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h2><p>After you realize that this question is about permutation of array, it is not that hard.<br>Convert matrix into array of numbers by counting the length of continuous <code>0</code> from right side. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwaps</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        nums = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> grid:</span><br><span class="line">            size = <span class="number">0</span></span><br><span class="line">            i = len(row) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> row[i] == <span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            nums.append(len(row) - i - <span class="number">1</span>)</span><br><span class="line">        n = len(grid)</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            expect = n - i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &gt;= expect:</span><br><span class="line">                    nums = nums[:i] + [nums[j]] + nums[i:j] + nums[j+<span class="number">1</span>:]</span><br><span class="line">                    ret += j - i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Q4-1537-Get-the-Maximum-Score-FAILED"><a href="#Q4-1537-Get-the-Maximum-Score-FAILED" class="headerlink" title="Q4. 1537. Get the Maximum Score FAILED"></a>Q4. <a href="https://leetcode.com/problems/get-the-maximum-score/" target="_blank" rel="noopener">1537. Get the Maximum Score</a> FAILED</h1><p>See details in link</p><h2 id="Note-3"><a href="#Note-3" class="headerlink" title="Note"></a>Note</h2><p>I thought this must be a DP problem hence we can easily tell how the state is transit from previous state.</p><p>Start with a 2-D DP which cause TLE/MLE.</p><p>Was not realize that we should have 2 dictionaries to store the states.<br>That will reduce the memory/time complexity from M^2 to 2M.</p><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSum</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; int:</span></span><br><span class="line">        idx1 = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums1)&#125;</span><br><span class="line">        idx2 = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums2)&#125;</span><br><span class="line">        idxs = [idx1, idx2]</span><br><span class="line">        arrs = [nums1, nums2]</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(arr_id, idx)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> (arr_id, idx) <span class="keyword">in</span> memo: <span class="keyword">return</span> memo[(arr_id, idx)]</span><br><span class="line">            <span class="keyword">if</span> idx &gt;= len(arrs[arr_id]): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            val = arrs[arr_id][idx]</span><br><span class="line">            ret = val + dp(arr_id, idx+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> idxs[<span class="keyword">not</span> arr_id]:</span><br><span class="line">                ret = max(ret, val + dp(<span class="keyword">not</span> arr_id, idxs[<span class="keyword">not</span> arr_id][val]+<span class="number">1</span>))</span><br><span class="line">            memo[(arr_id, idx)] = ret</span><br><span class="line">            <span class="keyword">return</span> memo[(arr_id, idx)]</span><br><span class="line">        <span class="keyword">return</span> max(dp(<span class="number">0</span>, <span class="number">0</span>), dp(<span class="number">1</span>, <span class="number">0</span>)) % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSum</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; int:</span></span><br><span class="line">        idx1 = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums1)&#125;</span><br><span class="line">        idx2 = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums2)&#125;</span><br><span class="line">        </span><br><span class="line">        keys = [i <span class="keyword">for</span> i <span class="keyword">in</span> idx1 <span class="keyword">if</span> i <span class="keyword">in</span> idx2]</span><br><span class="line">        vals = [max(sum(nums1[idx1[k1]:idx1[k2]]), sum(nums2[idx2[k1]:idx2[k2]])) <span class="keyword">for</span> k1, k2 <span class="keyword">in</span> zip(keys, keys[<span class="number">1</span>:])]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> keys: <span class="keyword">return</span> max(sum(nums1), sum(nums2))</span><br><span class="line">        <span class="keyword">return</span> (sum(vals) + max(sum(nums1[:idx1[keys[<span class="number">0</span>]]]+[<span class="number">0</span>]), sum(nums2[:idx2[keys[<span class="number">0</span>]]]+[<span class="number">0</span>])) + max(sum(nums1[idx1[keys[<span class="number">-1</span>]]:]+[<span class="number">0</span>]), sum(nums2[idx2[keys[<span class="number">-1</span>]]:]+[<span class="number">0</span>]))) % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Usually, Q1 Q2 has not magic. Simple complete search or simulation is enough.</li><li>Surprisingly, <code>@lru_cache</code> cause MLE while native dictionary works.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 199</title>
      <link href="/2020/07/26/weekly-contest-199/"/>
      <url>/2020/07/26/weekly-contest-199/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 256 / 14309 🧐🤔😑</p></blockquote><h1 id="Q1-1528-Shuffle-String"><a href="#Q1-1528-Shuffle-String" class="headerlink" title="Q1. 1528. Shuffle String"></a>Q1. <a href="https://leetcode.com/problems/shuffle-string/" target="_blank" rel="noopener">1528. Shuffle String</a></h1><blockquote><p>Given a string s and an integer array indices of the same length.</p><p>The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.</p><p>Return the shuffled string.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restoreString</span><span class="params">(self, s: str, indices: List[int])</span> -&gt; str:</span></span><br><span class="line">        ret = [<span class="literal">None</span>] * len(s)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> zip(indices, s):</span><br><span class="line">            ret[i] = c</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(ret)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1529-Bulb-Switcher-IV"><a href="#Q2-1529-Bulb-Switcher-IV" class="headerlink" title="Q2. 1529. Bulb Switcher IV"></a>Q2. <a href="https://leetcode.com/problems/bulb-switcher-iv/" target="_blank" rel="noopener">1529. Bulb Switcher IV</a></h1><blockquote><p>There is a room with n bulbs, numbered from 0 to n-1, arranged in a row from left to right. Initially all the bulbs are turned off.</p><p>Your task is to obtain the configuration represented by target where target[i] is ‘1’ if the i-th bulb is turned on and is ‘0’ if it is turned off.</p><p>You have a switch to flip the state of the bulb, a flip operation is defined as follows:</p><p>Choose any bulb (index i) of your current configuration.<br>Flip each bulb from index i to n-1.<br>When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.</p><p>Return the minimum number of flips required to form target.</p></blockquote><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>The best (greedy) strategy is </p><ul><li>starting from left most bulb, flip that bulb and all following bulbs if it does not match <code>target</code></li><li>move to next bulb</li></ul><blockquote><p>Key observation<br>if we follow the above strategy, at any point, all following bulbs are at the same statue.<br>Hence we can use <code>boolean</code> to represent the status of all following bulbs and only update that <code>boolean</code> when we flip all following bubls. </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minFlips</span><span class="params">(self, target: str)</span> -&gt; int:</span></span><br><span class="line">        ret, cur = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(target)):</span><br><span class="line">            ex = <span class="number">0</span> <span class="keyword">if</span> target[i] == <span class="string">'0'</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ex != cur:</span><br><span class="line">                ret += <span class="number">1</span></span><br><span class="line">                cur = <span class="number">0</span> <span class="keyword">if</span> cur == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="1530-Number-of-Good-Leaf-Nodes-Pairs-FAILED"><a href="#1530-Number-of-Good-Leaf-Nodes-Pairs-FAILED" class="headerlink" title="1530. Number of Good Leaf Nodes Pairs FAILED"></a><a href="https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/" target="_blank" rel="noopener">1530. Number of Good Leaf Nodes Pairs</a> FAILED</h1><blockquote><p>Given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.</p><p>Return the number of good leaf node pairs in the tree.</p></blockquote><h2 id="4D-DP-hum…"><a href="#4D-DP-hum…" class="headerlink" title="4D DP, hum…"></a>4D DP, hum…</h2><p>It was so clear that this is a DP problem.<br>But i was not able to define the state transform formula during the contest…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLengthOfOptimalCompression</span><span class="params">(self, s: str, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp </span></span><br><span class="line"><span class="meta">        @lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(idx, last, size, remove)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> remove &gt; k: <span class="keyword">return</span> math.inf</span><br><span class="line">            <span class="keyword">if</span> idx == len(s): <span class="keyword">return</span> (<span class="number">1</span>+(<span class="number">0</span> <span class="keyword">if</span> size==<span class="number">1</span> <span class="keyword">else</span> len(str(size)))) <span class="keyword">if</span> last <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># remove, merge</span></span><br><span class="line">            <span class="keyword">if</span> s[idx] == last:</span><br><span class="line">                ret = min(dp(idx+<span class="number">1</span>, last, size+<span class="number">1</span>, remove), dp(idx+<span class="number">1</span>, last, size, remove+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret = min((<span class="number">1</span>+(<span class="number">0</span> <span class="keyword">if</span> size==<span class="number">1</span> <span class="keyword">else</span> len(str(size))) <span class="keyword">if</span> last <span class="keyword">else</span> <span class="number">0</span>)+dp(idx+<span class="number">1</span>, s[idx], <span class="number">1</span>, remove), \</span><br><span class="line">                          dp(idx+<span class="number">1</span>, last, size, remove+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="literal">None</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
            <tag> Binary Index Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Top Google Questions</title>
      <link href="/2020/07/21/Top-Google-Questions/"/>
      <url>/2020/07/21/Top-Google-Questions/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 198</title>
      <link href="/2020/07/19/weekly-contest-198/"/>
      <url>/2020/07/19/weekly-contest-198/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 1197 / 15151 😔😂😭</p></blockquote><h1 id="Q1-1518-Water-Bottles"><a href="#Q1-1518-Water-Bottles" class="headerlink" title="Q1. 1518. Water Bottles"></a>Q1. <a href="https://leetcode.com/problems/water-bottles/" target="_blank" rel="noopener">1518. Water Bottles</a></h1><blockquote><p>Given numBottles full water bottles, you can exchange numExchange empty water bottles for one full water bottle.</p><p>The operation of drinking a full water bottle turns it into an empty bottle.</p><p>Return the maximum number of water bottles you can drink</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWaterBottles</span><span class="params">(self, A: int, B: int)</span> -&gt; int:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> A:</span><br><span class="line">            <span class="keyword">if</span> A &gt;= B:</span><br><span class="line">                drink = (A // B) * B</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                drink = A</span><br><span class="line">            ret += drink</span><br><span class="line">            A = A - drink + drink // B</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1519-Number-of-Nodes-in-the-Sub-Tree-With-the-Same-Label"><a href="#Q2-1519-Number-of-Nodes-in-the-Sub-Tree-With-the-Same-Label" class="headerlink" title="Q2. 1519. Number of Nodes in the Sub-Tree With the Same Label"></a>Q2. <a href="https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/" target="_blank" rel="noopener">1519. Number of Nodes in the Sub-Tree With the Same Label</a></h1><blockquote><p>See details in link</p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>similar to<br>    <a href="https://leetcode.com/problems/path-sum-iii/" target="_blank" rel="noopener">437. Path Sum III</a><br>    <a href="https://leetcode.com/problems/sum-of-distances-in-tree/" target="_blank" rel="noopener">834. Sum of Distances in Tree</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubTrees</span><span class="params">(self, n: int, edges: List[List[int]], labels: str)</span> -&gt; List[int]:</span></span><br><span class="line">        graph = defaultdict(set)</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">            graph[u].add(v)</span><br><span class="line">            graph[v].add(u)</span><br><span class="line">        </span><br><span class="line">        d, ret = Counter(), [<span class="number">0</span>] * n</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cur, p)</span>:</span></span><br><span class="line">            above = d[labels[cur]]</span><br><span class="line">            d[labels[cur]] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> nxt <span class="keyword">in</span> graph[cur]:</span><br><span class="line">                <span class="keyword">if</span> nxt == p: <span class="keyword">continue</span></span><br><span class="line">                dfs(nxt, cur)</span><br><span class="line">            ret[cur] = d[labels[cur]] - above</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Q3-1520-Maximum-Number-of-Non-Overlapping-Substrings-FAILED"><a href="#Q3-1520-Maximum-Number-of-Non-Overlapping-Substrings-FAILED" class="headerlink" title="Q3. 1520. Maximum Number of Non-Overlapping Substrings FAILED"></a>Q3. <a href="https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/" target="_blank" rel="noopener">1520. Maximum Number of Non-Overlapping Substrings</a> FAILED</h1><blockquote><p>See details in link</p></blockquote><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol><li>So hard….</li><li>I thought we just need to deal with the edges <code>[l, r]</code>. But it turns out that we have to scan<br>all possible substring since within a substring, it may contains other characters which may extend the size of current substring. So it is different to merge ranges.</li><li><a href="https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/discuss/743223/C%2B%2B-Greedy-O(n" target="_blank" rel="noopener">@votrubac’s post</a>) provides an idea which is  <ol><li>Append current possible substring</li><li>Replace the previous substring if we find a better one to replace it<br>This idea might be helpful when dealing with other greedy algorithm. </li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumOfSubstrings</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span></span><br><span class="line">        c_set = set(s)</span><br><span class="line">        idx_l, idx_r = &#123;c: s.index(c) <span class="keyword">for</span> c <span class="keyword">in</span> c_set&#125;, &#123;c: s.rindex(c) <span class="keyword">for</span> c <span class="keyword">in</span> c_set&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_right</span><span class="params">(start)</span>:</span></span><br><span class="line">            right = idx_r[s[start]]</span><br><span class="line">            i = start</span><br><span class="line">            <span class="keyword">while</span> i &lt;= right:</span><br><span class="line">                <span class="keyword">if</span> idx_l[s[i]] &lt; start:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                right = max(right, idx_r[s[i]])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        </span><br><span class="line">        ret, right_max = [], <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> idx_l[c] == i:</span><br><span class="line">                right = find_right(i)</span><br><span class="line">                <span class="keyword">if</span> right == <span class="number">-1</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> right &gt; right_max:</span><br><span class="line">                    ret.append(s[i:right+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ret[<span class="number">-1</span>] = s[i:right+<span class="number">1</span>]</span><br><span class="line">                right_max = right</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Q4-1521-Find-a-Value-of-a-Mysterious-Function-Closest-to-Target-FAILED"><a href="#Q4-1521-Find-a-Value-of-a-Mysterious-Function-Closest-to-Target-FAILED" class="headerlink" title="Q4. 1521. Find a Value of a Mysterious Function Closest to Target FAILED"></a>Q4. <a href="https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/" target="_blank" rel="noopener">1521. Find a Value of a Mysterious Function Closest to Target</a> FAILED</h1><blockquote><p>See details in link</p></blockquote><h2 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestToTarget</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        ret, s = math.inf, set()</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> arr:</span><br><span class="line">            s = &#123;a &amp; b <span class="keyword">for</span> b <span class="keyword">in</span> s&#125; | &#123;a&#125;</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> s:</span><br><span class="line">                ret = min(ret, abs(target-val))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>When dealing with tree/graph problem, a pattern <code>subtree = total - parent</code> can be very useful. e.g.<br> <a href="https://leetcode.com/problems/path-sum-iii/" target="_blank" rel="noopener">437. Path Sum III</a><br> <a href="https://leetcode.com/problems/sum-of-distances-in-tree/" target="_blank" rel="noopener">834. Sum of Distances in Tree</a></li><li>A useful pattern in greedy algo.<ol><li>Add current possible value</li><li>Replace previous value if we find a better</li></ol></li><li>Too sad…</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
            <tag> Binary Index Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biweekly Contest 30</title>
      <link href="/2020/07/11/biweekly-contest-30/"/>
      <url>/2020/07/11/biweekly-contest-30/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 606 / 8175 😔😂😭</p></blockquote><h1 id="Q1-5177-Reformat-Date"><a href="#Q1-5177-Reformat-Date" class="headerlink" title="Q1. 5177. Reformat Date"></a>Q1. 5177. Reformat Date</h1><blockquote><p>Given a date string in the form Day Month Year, where:  </p><p>Day is in the set {“1st”, “2nd”, “3rd”, “4th”, …, “30th”, “31st”}.<br>Month is in the set {“Jan”, “Feb”, “Mar”, “Apr”, “May”, “Jun”, “Jul”, “Aug”, “Sep”, “Oct”, “Nov”, “Dec”}.<br>Year is in the range [1900, 2100].<br>Convert the date string to the format YYYY-MM-DD, where:  </p><p>YYYY denotes the 4 digit year.<br>MM denotes the 2 digit month.<br>DD denotes the 2 digit day.  </p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Very straight forward. Just do the string conversion.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reformatDate</span><span class="params">(self, date: str)</span> -&gt; str:</span></span><br><span class="line">        m_to_idx = [<span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span>, <span class="string">"Apr"</span>, <span class="string">"May"</span>, <span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>, <span class="string">"Sep"</span>, <span class="string">"Oct"</span>, <span class="string">"Nov"</span>, <span class="string">"Dec"</span>]</span><br><span class="line">        day, month, year = date.split()</span><br><span class="line">        day, month = day[:<span class="number">-2</span>], str(m_to_idx.index(month)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> len(day) &lt; <span class="number">2</span>: day = <span class="string">'0'</span> + day</span><br><span class="line">        <span class="keyword">if</span> len(month) &lt; <span class="number">2</span>: month = <span class="string">'0'</span> + month</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;year&#125;</span>-<span class="subst">&#123;month&#125;</span>-<span class="subst">&#123;day&#125;</span>'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-5445-Range-Sum-of-Sorted-Subarray-Sums"><a href="#Q2-5445-Range-Sum-of-Sorted-Subarray-Sums" class="headerlink" title="Q2. 5445. Range Sum of Sorted Subarray Sums"></a>Q2. 5445. Range Sum of Sorted Subarray Sums</h1><blockquote><p>Given the array nums consisting of n positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.</p><p>Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.</p></blockquote><h2 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h2><p>Use prefix-sum to generate the list of sum of all non-empty continous subarrys.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(N^2) Space O(N^2)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rangeSum</span><span class="params">(self, nums: List[int], n: int, left: int, right: int)</span> -&gt; int:</span></span><br><span class="line">        p_s = [nums[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            p_s.append(p_s[<span class="number">-1</span>]+val)</span><br><span class="line"></span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(p_s):</span><br><span class="line">            arr.append(v)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                arr.append(v - p_s[j])</span><br><span class="line">        arr = sorted(arr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(arr[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(left<span class="number">-1</span>, right))</span><br></pre></td></tr></table></figure><h1 id="Q3-5446-Minimum-Difference-Between-Largest-and-Smallest-Value-in-Three-Moves"><a href="#Q3-5446-Minimum-Difference-Between-Largest-and-Smallest-Value-in-Three-Moves" class="headerlink" title="Q3. 5446. Minimum Difference Between Largest and Smallest Value in Three Moves"></a>Q3. 5446. Minimum Difference Between Largest and Smallest Value in Three Moves</h1><blockquote><p>Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.</p><p>Return the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.</p></blockquote><h2 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h2><p>OMG, this problem is killing me! Spent more than 40 minutes here.</p><p>This is kind of a brute force solution.<br>Just try to exhaust it in a nicer way.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDifference</span><span class="params">(self, A)</span>:</span></span><br><span class="line">    A.sort()</span><br><span class="line">    <span class="keyword">return</span> min(b - a <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(A[:<span class="number">4</span>], A[<span class="number">-4</span>:]))</span><br></pre></td></tr></table></figure><h1 id="Q4-5447-Stone-Game-IV"><a href="#Q4-5447-Stone-Game-IV" class="headerlink" title="Q4. 5447. Stone Game IV"></a>Q4. 5447. Stone Game IV</h1><blockquote><p>Alice and Bob take turns playing a game, with Alice starting first.</p><p>Initially, there are n stones in a pile.  On each player’s turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.</p><p>Also, if a player cannot make a move, he/she loses the game.</p><p>Given a positive integer n. Return True if and only if Alice wins the game otherwise return False, assuming both players play optimally</p></blockquote><h2 id="Note-3"><a href="#Note-3" class="headerlink" title="Note"></a>Note</h2><ol><li>Typical 1-D DP</li><li>Top-down DP will cause stack overflow</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(N^1.5)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">winnerSquareGame</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>: dp[i] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">1</span>: dp[i] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i] = any(dp[i-j*j] <span class="keyword">is</span> <span class="literal">False</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, int(i**<span class="number">0.5</span>) + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Brute force might be OK. Exhaust all possible case in a nice way.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 196</title>
      <link href="/2020/07/05/weekly-contest-196/"/>
      <url>/2020/07/05/weekly-contest-196/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 133 / 14301 😋😋😋</p></blockquote><h1 id="Q1-1502-Can-Make-Arithmetic-Progression-From-Sequence"><a href="#Q1-1502-Can-Make-Arithmetic-Progression-From-Sequence" class="headerlink" title="Q1. 1502. Can Make Arithmetic Progression From Sequence"></a>Q1. <a href="https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/" target="_blank" rel="noopener">1502. Can Make Arithmetic Progression From Sequence</a></h1><blockquote><p>Given an array of numbers arr. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.</p><p>Return true if the array can be rearranged to form an arithmetic progression, otherwise, return false.</p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Was not clear about the description at the very beginning.<br>The question is easy after fully understand the description.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(self, A: List[int])</span> -&gt; bool:</span></span><br><span class="line">        A = sorted(A)</span><br><span class="line">        dis = A[<span class="number">0</span>] - A[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> all(a-b==dis <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(A, A[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1503-Last-Moment-Before-All-Ants-Fall-Out-of-a-Plank"><a href="#Q2-1503-Last-Moment-Before-All-Ants-Fall-Out-of-a-Plank" class="headerlink" title="Q2. 1503. Last Moment Before All Ants Fall Out of a Plank"></a>Q2. <a href="https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/" target="_blank" rel="noopener">1503. Last Moment Before All Ants Fall Out of a Plank</a></h1><blockquote><p>We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.</p><p>When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn’t take any additional time.</p><p>When an ant reaches one end of the plank at a time t, it falls out of the plank imediately.</p><p>Given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.</p></blockquote><h2 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h2><p>Again, spend a while to understand the description.</p><h2 id="Key-observation"><a href="#Key-observation" class="headerlink" title="Key observation"></a>Key observation</h2><blockquote><p><code>When two ants moving in two different directions meet at some point, they change their directions and continue moving again.</code>  </p></blockquote><p>This is a trap. The rule is a redundant, which can be ignore.<br>Once we understand this point, the answer is very straight forward.<br>Be careful about the corner case where <code>left</code> or <code>right</code> is empty.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLastMoment</span><span class="params">(self, n: int, left: List[int], right: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> max(max(left+[<span class="number">0</span>]), n - min(right+[n]))</span><br></pre></td></tr></table></figure><h1 id="Q3-1504-Count-Submatrices-With-All-Ones"><a href="#Q3-1504-Count-Submatrices-With-All-Ones" class="headerlink" title="Q3. 1504. Count Submatrices With All Ones"></a>Q3. <a href="https://leetcode.com/problems/count-submatrices-with-all-ones/" target="_blank" rel="noopener">1504. Count Submatrices With All Ones</a></h1><blockquote><p>Given a rows * columns matrix mat of ones and zeros, return how many submatrices have all ones.</p><p>Example 1:</p><p>Input: mat =<br>             [[1,0,1],<br>             [1,1,0],<br>             [1,1,0]] .<br>Output: 13<br>Explanation:<br>There are 6 rectangles of side 1x1.<br>There are 2 rectangles of side 1x2.<br>There are 3 rectangles of side 2x1.<br>There is 1 rectangle of side 2x2.<br>There is 1 rectangle of side 3x1.<br>Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.</p></blockquote><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>This looks like a DP problem at first glance.<br>But I was not able to define a clear <code>state transformation formula</code>.<br>End up as a greedy solution.</p><p>Very similar to <a href="https://leetcode.com/problems/maximal-rectangle/" target="_blank" rel="noopener">85. Maximal Rectangle</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSubmat</span><span class="params">(self, M: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M <span class="keyword">or</span> <span class="keyword">not</span> M[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m, n = len(M), len(M[<span class="number">0</span>])</span><br><span class="line">        ret, height = <span class="number">0</span>, [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n): </span><br><span class="line">                height[j] = <span class="number">1</span> + height[j] <span class="keyword">if</span> M[i][j] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                peak = m</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(j, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> height[k] == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">                    peak = min(height[k], peak)</span><br><span class="line">                    ret += peak</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Q4-1505-Minimum-Possible-Integer-After-at-Most-K-Adjacent-Swaps-On-Digits…"><a href="#Q4-1505-Minimum-Possible-Integer-After-at-Most-K-Adjacent-Swaps-On-Digits…" class="headerlink" title="Q4. 1505. Minimum Possible Integer After at Most K Adjacent Swaps On Digits…"></a>Q4. <a href="https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/" target="_blank" rel="noopener">1505. Minimum Possible Integer After at Most K Adjacent Swaps On Digits…</a></h1><blockquote><p>Given a string num representing the digits of a very large integer and an integer k.<br>You are allowed to swap any two adjacent digits of the integer at most k times.<br>Return the minimum integer you can obtain also as a string.<br>E.g. num = “4321”, k = 4 -&gt;&gt;&gt;&gt; “1342”<br>E.g. Input: num = “100”, k = 1 -&gt;&gt;&gt;&gt;&gt; “010”</p></blockquote><h2 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h2><h3 id="Key-observation-1"><a href="#Key-observation-1" class="headerlink" title="Key observation"></a>Key observation</h3><blockquote><p>You can move a digit k steps with k time of adjacent swapping. </p></blockquote><p>With that in mind, we start from the most significant digit (left most). Find smallest digit within the range of K and move it the the beginning.</p><p>Repeat the above algo and update K until K == 0, we will find the answer.</p><h3 id="Naive-solution"><a href="#Naive-solution" class="headerlink" title="Naive solution"></a>Naive solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(N^2)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minInteger</span><span class="params">(self, num: str, k: int)</span> -&gt; str:</span></span><br><span class="line">        num = list(num)</span><br><span class="line">        <span class="keyword">if</span> k &gt;= len(num)**<span class="number">2</span> / <span class="number">2</span>: <span class="keyword">return</span> <span class="string">''</span>.join(sorted(num))</span><br><span class="line">        ready = []</span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> num:</span><br><span class="line">            val = min(num[:k+<span class="number">1</span>])</span><br><span class="line">            idx = num.index(val)</span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">                ready.append(num.pop(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            num[:idx+<span class="number">1</span>] = num[:idx]</span><br><span class="line">            k -= idx</span><br><span class="line">            ready.append(val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(ready + num)</span><br></pre></td></tr></table></figure><h2 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary Index Tree"></a>Binary Index Tree</h2><blockquote><p>Wikipedia: A Fenwick tree or binary indexed tree is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.arr = [<span class="number">0</span>] * size</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, delta)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x &lt; len(self.arr):</span><br><span class="line">            self.arr[x] += delta</span><br><span class="line">            x += self._lowbit(x)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            ret += self.arr[x]</span><br><span class="line">            x -= self._lowbit(x)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_lowbit</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minInteger</span><span class="params">(self, num: str, k: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> k &gt;= len(num)**<span class="number">2</span> / <span class="number">2</span>: <span class="keyword">return</span> <span class="string">''</span>.join(sorted(num))</span><br><span class="line">        ret, digits = <span class="string">''</span>, defaultdict(deque)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(num):</span><br><span class="line">            digits[c].append(i)</span><br><span class="line">        <span class="comment"># Binary Index Tree: Log(N)</span></span><br><span class="line">        bit = BIT(len(num)+<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)): bit.add(i+<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(num)):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> string.digits:</span><br><span class="line">                <span class="keyword">if</span> digits[c] <span class="keyword">and</span> bit.sum(digits[c][<span class="number">0</span>]) &lt;= k:</span><br><span class="line">                    ret += c</span><br><span class="line">                    bit.add(digits[c][<span class="number">0</span>] + <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">                    k -= bit.sum(digits[c].popleft())</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="Self-Balanced-Tree-in-Python"><a href="#Self-Balanced-Tree-in-Python" class="headerlink" title="Self Balanced Tree in Python"></a>Self Balanced Tree in Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minInteger</span><span class="params">(self, num: str, k: int)</span> -&gt; str:</span></span><br><span class="line">        digits = defaultdict(deque)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(num):</span><br><span class="line">            digits[c].append(i)</span><br><span class="line">        ret, moved = <span class="string">''</span>, SortedList()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(num)):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> string.digits:</span><br><span class="line">                <span class="keyword">if</span> digits[c]:</span><br><span class="line">                    idx = digits[c][<span class="number">0</span>]</span><br><span class="line">                    real_idx = idx - moved.bisect(idx)</span><br><span class="line">                    <span class="keyword">if</span> real_idx &lt;= k:</span><br><span class="line">                        k -= real_idx</span><br><span class="line">                        ret += c</span><br><span class="line">                        moved.add(digits[c].popleft())</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul><li><code>Binary Index Tree</code> is not that hard to remember and implement.</li><li><code>from sortedcontainers import SortedList</code> is the counter part of C++’s <code>multiset</code> in Python</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
            <tag> Binary Index Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convert Recursive algo into Non-recursive</title>
      <link href="/2020/07/04/Convert-Recursive-algo-into-Non-recursive/"/>
      <url>/2020/07/04/Convert-Recursive-algo-into-Non-recursive/</url>
      
        <content type="html"><![CDATA[<h1 id="Pre"><a href="#Pre" class="headerlink" title="Pre"></a>Pre</h1><p>Before we try to convert any recursive algo into non-recursive, we should be familiar to recursive and non-recursive version of binary tree traversal.<br>Read <a href="https://yonglife.com/2019/05/04/binary-tree-traversal-updated/">binary tree traversal</a> to recap.</p><h1 id="Key-points"><a href="#Key-points" class="headerlink" title="Key points"></a>Key points</h1><ol><li>The idea is use <code>stack</code> in heap to mimic the behavior of function call stack. </li><li>For post-order traversal, since we need to update parent’s state from child node, we will need to push state of parent along with child node into stack. We will explain this later with example.</li></ol><h1 id="Post-order"><a href="#Post-order" class="headerlink" title="Post order"></a>Post order</h1><h2 id="Code-skeleton"><a href="#Code-skeleton" class="headerlink" title="Code skeleton"></a>Code skeleton</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        rst = []</span><br><span class="line">        stack, cur = [], root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                <span class="comment"># Push current node</span></span><br><span class="line">                stack.append(cur)</span><br><span class="line">                <span class="comment"># move to left or right child</span></span><br><span class="line">                cur = cur.left <span class="keyword">or</span> cur.right</span><br><span class="line">            <span class="comment"># all child is processed.</span></span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            <span class="comment"># update current state based on state from child nodes</span></span><br><span class="line">            rst.append(cur.val)</span><br><span class="line">            <span class="comment"># upload state to parent</span></span><br><span class="line">            <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Move to right node or previous level</span></span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>].left == cur:</span><br><span class="line">                cur = stack[<span class="number">-1</span>].right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><blockquote><ol><li>Lowest Common Ancestor of a Binary Tree<br>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</li></ol><p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p><p>Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: <span class="string">'TreeNode'</span>, p: <span class="string">'TreeNode'</span>, q: <span class="string">'TreeNode'</span>)</span> -&gt; 'TreeNode':</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        # Recursive</span></span><br><span class="line"><span class="string">        def dfs(cur):</span></span><br><span class="line"><span class="string">            if cur is None: return 0, None</span></span><br><span class="line"><span class="string">            cnt_l, node_l = dfs(cur.left)</span></span><br><span class="line"><span class="string">            cnt_r, node_r = dfs(cur.right)</span></span><br><span class="line"><span class="string">            if cnt_l == 2: return 2, node_l</span></span><br><span class="line"><span class="string">            if cnt_r == 2: return 2, node_r</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            if (cnt_l+cnt_r+(cur.val in [p.val, q.val])) == 2: return 2, cur</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            return (1, cur) if cur.val in [p.val, q.val] else ((cnt_l, node_l) if cnt_l else (cnt_r, node_r))</span></span><br><span class="line"><span class="string">        return dfs(root)[1]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Non-recursive</span></span><br><span class="line">        ret = [<span class="number">0</span>] * <span class="number">4</span> <span class="comment"># cnt_l, node_l, cnt_r, node_r</span></span><br><span class="line">        stack, cur = [], ((root, [<span class="number">0</span>] * <span class="number">4</span>), ret, <span class="string">'l'</span>) <span class="comment"># Carry all necessary data for current node and parent node</span></span><br><span class="line">        <span class="keyword">while</span> cur[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> cur[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                <span class="keyword">if</span> cur[<span class="number">0</span>][<span class="number">0</span>].left: cur = ((cur[<span class="number">0</span>][<span class="number">0</span>].left,  [<span class="number">0</span>]*<span class="number">4</span>), cur[<span class="number">0</span>][<span class="number">1</span>], <span class="string">'l'</span>)</span><br><span class="line">                <span class="keyword">else</span>: cur = ((cur[<span class="number">0</span>][<span class="number">0</span>].right,  [<span class="number">0</span>]*<span class="number">4</span>), cur[<span class="number">0</span>][<span class="number">1</span>], <span class="string">'r'</span>)</span><br><span class="line">            <span class="comment"># Pop and unpack node and state</span></span><br><span class="line">            <span class="comment"># ((cur_node, cur_state), (parent...), dir)</span></span><br><span class="line">            (node, (cnt_l, node_l, cnt_r, node_r)), p_state, dir = stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Compute local state based on state from childs</span></span><br><span class="line">            <span class="keyword">if</span> cnt_l == <span class="number">2</span>: my_ret = <span class="number">2</span>, node_l</span><br><span class="line">            <span class="keyword">elif</span> cnt_r == <span class="number">2</span>:  my_ret = <span class="number">2</span>, node_r</span><br><span class="line">            <span class="keyword">elif</span> (cnt_l+cnt_r+(node.val <span class="keyword">in</span> [p.val, q.val])) == <span class="number">2</span>:  my_ret = <span class="number">2</span>, node </span><br><span class="line">            <span class="keyword">else</span>: my_ret = (<span class="number">1</span>, node) <span class="keyword">if</span> node.val <span class="keyword">in</span> [p.val, q.val] <span class="keyword">else</span> ((cnt_l, node_l) <span class="keyword">if</span> cnt_l <span class="keyword">else</span> (cnt_r, node_r))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Upload state to parent </span></span><br><span class="line">            <span class="keyword">if</span> dir == <span class="string">'l'</span>: p_state[:<span class="number">2</span>] = my_ret</span><br><span class="line">            <span class="keyword">else</span>: p_state[<span class="number">2</span>:] = my_ret</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># :) Move to right or previous level</span></span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">0</span>][<span class="number">0</span>].left == node:</span><br><span class="line">                cur = ((stack[<span class="number">-1</span>][<span class="number">0</span>][<span class="number">0</span>].right, [<span class="number">0</span>] * <span class="number">4</span>), stack[<span class="number">-1</span>][<span class="number">0</span>][<span class="number">1</span>], <span class="string">'r'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = ((<span class="literal">None</span>, <span class="literal">None</span>), (<span class="literal">None</span>, <span class="literal">None</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="More-example"><a href="#More-example" class="headerlink" title="More example"></a>More example</h2><ul><li><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/discuss/721668/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">236. Lowest Common Ancestor of a Binary Tree</a></li><li><a href="https://leetcode.com/problems/distribute-coins-in-binary-tree/discuss/719810/Python-Concise-Anyone-has-interest-in-non-recursive-implementation" target="_blank" rel="noopener">979. Distribute Coins in Binary Tree</a></li><li><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/719519/python-concise-recursive-non-recursive" target="_blank" rel="noopener">297. Serialize and Deserialize Binary Tree</a></li><li><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/discuss/719416/python-concise-recursive-non-recursive" target="_blank" rel="noopener">108. Convert Sorted Array to Binary Search Tree</a></li><li><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/719653/Python-Concise-Recursive-%2B-Optimized-recursive-%2B-Non-recursive" target="_blank" rel="noopener">105. Construct Binary Tree from Preorder and Inorder Traversal</a></li><li><a href="https://leetcode.com/problems/balanced-binary-tree/discuss/721706/python-concise-recursive-non-recursive" target="_blank" rel="noopener">110. Balanced Binary Tree</a></li><li><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/721737/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">114. Flatten Binary Tree to Linked List</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Tree </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Recursive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode roadmap</title>
      <link href="/2020/07/04/leetcode-roadmap/"/>
      <url>/2020/07/04/leetcode-roadmap/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><p><img src="/images/leetcode_roadmap.png" alt="image"></p><a id="more"></a><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><blockquote><p>Tricks  </p></blockquote><ol><li><code>Counter()</code> can be used to create a <code>defaultdict(int)</code></li></ol><h3 id="I-do-not-know…"><a href="#I-do-not-know…" class="headerlink" title="I do not know…."></a>I do not know….</h3><ul><li><ol><li><p>String Compression</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, s: str)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="keyword">return</span> s <span class="keyword">in</span> (s*<span class="number">2</span>)[<span class="number">1</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Repeated String Match</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedStringMatch</span><span class="params">(self, A: str, B: str)</span> -&gt; int:</span>  </span><br><span class="line">        time = (len(B) // len(A)) + (<span class="number">1</span> <span class="keyword">if</span> len(B) % len(A) <span class="keyword">else</span> <span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">if</span> B <span class="keyword">in</span> A * time: <span class="keyword">return</span> time  </span><br><span class="line">        <span class="keyword">if</span> B <span class="keyword">in</span> A * (time+<span class="number">1</span>): <span class="keyword">return</span> time+<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Pure-programming"><a href="#Pure-programming" class="headerlink" title="Pure programming"></a>Pure programming</h3><ul><li><ol><li><p>Find and Replace Pattern</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findAndReplacePattern</span><span class="params">(self, words: List[str], pattern: str)</span> -&gt; List[str]:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(word)</span>:</span>  </span><br><span class="line">            <span class="keyword">if</span> len(word) != len(pattern):  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            d_12, d_21 = &#123;&#125;, &#123;&#125;  </span><br><span class="line">            <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> zip(word, pattern):  </span><br><span class="line">                <span class="keyword">if</span> c1 <span class="keyword">not</span> <span class="keyword">in</span> d_12:  </span><br><span class="line">                    <span class="keyword">if</span> c2 <span class="keyword">in</span> d_21:  </span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">                    d_12[c1] = c2  </span><br><span class="line">                    d_21[c2] = c1  </span><br><span class="line">                <span class="keyword">elif</span> d_12[c1] != c2:  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">        rst = []  </span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:  </span><br><span class="line">            <span class="keyword">if</span> is_valid(word):  </span><br><span class="line">                rst.append(word)  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Time Difference</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinDifference</span><span class="params">(self, timePoints: List[str])</span> -&gt; int:</span>  </span><br><span class="line">        times = sorted(int(time.split(<span class="string">':'</span>)[<span class="number">0</span>])*<span class="number">60</span>+int(time.split(<span class="string">':'</span>)[<span class="number">1</span>]) <span class="keyword">for</span> time <span class="keyword">in</span> timePoints)  </span><br><span class="line">        times.append(times[<span class="number">0</span>]+<span class="number">60</span>*<span class="number">24</span>)  </span><br><span class="line">        <span class="keyword">return</span> min(b-a <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(times, times[<span class="number">1</span>:]))</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Valid Palindrome II</p><p><a href="https://leetcode.com/problems/valid-palindrome-ii/discuss/701203/Python-Concise-O(n" target="_blank" rel="noopener">https://leetcode.com/problems/valid-palindrome-ii/discuss/701203/Python-Concise-O(n</a>)</p></li></ol></li><li><ol><li>Reverse String II</li></ol></li><li><ol><li><p>Group Shifted Strings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupStrings</span><span class="params">(self, strings: List[str])</span> -&gt; List[List[str]]:</span>  </span><br><span class="line">          </span><br><span class="line">        d = defaultdict(list)  </span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strings:  </span><br><span class="line">            delta = ord(s[<span class="number">0</span>]) - ord(<span class="string">'a'</span>)  </span><br><span class="line">            ss = <span class="string">''</span>.join(chr(<span class="number">97</span>+((ord(c)<span class="number">-97</span>-delta) % <span class="number">26</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> s)  </span><br><span class="line">            d[ss].append(s)  </span><br><span class="line">        <span class="keyword">return</span> d.values()</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Substring with Concatenation of All Words</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span><span class="params">(self, s: str, words: List[str])</span> -&gt; List[int]:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> words:  </span><br><span class="line">            <span class="keyword">return</span> []  </span><br><span class="line">        c = Counter(words)  </span><br><span class="line">        size = len(words[<span class="number">0</span>])  </span><br><span class="line">        rst = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)+<span class="number">1</span>-size*len(words)):  </span><br><span class="line">            j, cc = i, c.copy()  </span><br><span class="line">            <span class="keyword">while</span> j &lt; i+size*len(words) <span class="keyword">and</span> s[j:j+size] <span class="keyword">in</span> c:  </span><br><span class="line">                cur_w = s[j:j+size]  </span><br><span class="line">                cc[cur_w] -= <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> cc[cur_w] &lt; <span class="number">0</span>:  </span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line">                j += size  </span><br><span class="line">            <span class="keyword">if</span> all(v == <span class="number">0</span> <span class="keyword">for</span> v <span class="keyword">in</span> cc.values()):  </span><br><span class="line">                rst.append(i)  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Reverse Words in a String III</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(w[::<span class="number">-1</span>] <span class="keyword">for</span> w <span class="keyword">in</span> s.split())</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Add Strings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStrings</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span>  </span><br><span class="line">        rst = <span class="string">''</span>  </span><br><span class="line">        carry = <span class="literal">False</span>  </span><br><span class="line">        num1, num2 = list(num1), list(num2)  </span><br><span class="line">        <span class="keyword">while</span> num1 <span class="keyword">or</span> num2:  </span><br><span class="line">            cur = (int(num1.pop()) <span class="keyword">if</span> num1 <span class="keyword">else</span> <span class="number">0</span>) + (int(num2.pop()) <span class="keyword">if</span> num2 <span class="keyword">else</span> <span class="number">0</span>) + carry  </span><br><span class="line">            rst += str(cur % <span class="number">10</span>)  </span><br><span class="line">            carry = cur // <span class="number">10</span>  </span><br><span class="line">        <span class="keyword">if</span> carry:  </span><br><span class="line">            rst += <span class="string">'1'</span>  </span><br><span class="line">        <span class="keyword">return</span> rst[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Custom Sort String</p><p><a href="https://leetcode.com/problems/custom-sort-string/discuss/702725/Python-Concise-O(N)-%2B-Sort" target="_blank" rel="noopener">https://leetcode.com/problems/custom-sort-string/discuss/702725/Python-Concise-O(N)-%2B-Sort</a></p></li></ol></li><li><ol><li><p>String Compression</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(self, chars: List[str])</span> -&gt; int:</span>  </span><br><span class="line">        idx1, idx2, cnt = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        chars.append(<span class="string">'0'</span>)  </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(chars):  </span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> chars[i] != chars[i<span class="number">-1</span>]:  </span><br><span class="line">                chars[idx1] = chars[i<span class="number">-1</span>]  </span><br><span class="line">                idx1 += <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> cnt == <span class="number">1</span>:  </span><br><span class="line">                    <span class="keyword">continue</span>  </span><br><span class="line">                <span class="keyword">for</span> cc <span class="keyword">in</span> str(cnt):  </span><br><span class="line">                    chars[idx1] = cc  </span><br><span class="line">                    idx1 += <span class="number">1</span>  </span><br><span class="line">                cnt = <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                cnt += <span class="number">1</span>  </span><br><span class="line">                  </span><br><span class="line">        <span class="keyword">return</span> idx1</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>Multiply Strings</li></ol></li></ul><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span>  </span><br><span class="line">        <span class="keyword">if</span> num1 == <span class="string">'0'</span> <span class="keyword">or</span> num2 == <span class="string">'0'</span>: <span class="keyword">return</span> <span class="string">'0'</span>  </span><br><span class="line">        num1, num2 = num1[::<span class="number">-1</span>], num2[::<span class="number">-1</span>]  </span><br><span class="line">        m, n = len(num1), len(num2)  </span><br><span class="line">        rst = [<span class="number">0</span>] * (m+n)  </span><br><span class="line">        <span class="keyword">for</span> i1, v1 <span class="keyword">in</span> enumerate(num1):  </span><br><span class="line">            <span class="keyword">for</span> i2, v2 <span class="keyword">in</span> enumerate(num2):  </span><br><span class="line">                rst[i1+i2] += int(v1) * int(v2)  </span><br><span class="line">                rst[i1+i2+<span class="number">1</span>] += rst[i1+i2] // <span class="number">10</span>  </span><br><span class="line">                rst[i1+i2] %= <span class="number">10</span>  </span><br><span class="line">        <span class="keyword">while</span> rst[<span class="number">-1</span>] == <span class="number">0</span>:  </span><br><span class="line">            rst.pop()  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(map(str, rst))[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></code></pre><ul><li><ol><li><p>One Edit Distance</p><p><a href="https://leetcode.com/problems/one-edit-distance/discuss/702870/Python-Concise-Understand-it-in-5-second" target="_blank" rel="noopener">https://leetcode.com/problems/one-edit-distance/discuss/702870/Python-Concise-Understand-it-in-5-second</a></p></li></ol></li><li><ol><li><p>Before and After Puzzle</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">beforeAndAfterPuzzles</span><span class="params">(self, phrases: List[str])</span> -&gt; List[str]:</span>  </span><br><span class="line">        start = defaultdict(list)  </span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> enumerate(phrases):  </span><br><span class="line">            words = p.split()  </span><br><span class="line">            a, b = words[<span class="number">0</span>], <span class="string">' '</span>.join(words[<span class="number">1</span>:])  </span><br><span class="line">            start[a].append((i, b))  </span><br><span class="line">        ret = []  </span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> enumerate(phrases):  </span><br><span class="line">            words = p.split()  </span><br><span class="line">            ret += [(p + (<span class="string">f' <span class="subst">&#123;w&#125;</span>'</span> <span class="keyword">if</span> w <span class="keyword">else</span> <span class="string">''</span>)) <span class="keyword">for</span> j, w <span class="keyword">in</span> start[words[<span class="number">-1</span>]] <span class="keyword">if</span> i != j]  </span><br><span class="line">        <span class="keyword">return</span> sorted(set(ret))</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Group Anagrams</p><p><a href="https://leetcode.com/problems/group-anagrams/discuss/681219/Python-Concise-O(N)-no-need-to-sort-str" target="_blank" rel="noopener">https://leetcode.com/problems/group-anagrams/discuss/681219/Python-Concise-O(N)-no-need-to-sort-str</a></p></li></ol></li><li><ol><li><p>Add Binary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a: str, b: str)</span> -&gt; str:</span>  </span><br><span class="line">        a, b = list(a), list(b)  </span><br><span class="line">        carry, rst = <span class="literal">False</span>, <span class="string">''</span>  </span><br><span class="line">        <span class="keyword">while</span> a <span class="keyword">or</span> b:  </span><br><span class="line">            v1, v2 = int(a.pop()) <span class="keyword">if</span> a <span class="keyword">else</span> <span class="number">0</span>, int(b.pop()) <span class="keyword">if</span> b <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">            v = v1 + v2 + carry  </span><br><span class="line">            rst += str(v % <span class="number">2</span>)  </span><br><span class="line">            carry = v // <span class="number">2</span>  </span><br><span class="line">        <span class="keyword">if</span> carry:  </span><br><span class="line">            rst += <span class="string">'1'</span>  </span><br><span class="line">        <span class="keyword">return</span> rst[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Goat Latin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toGoatLatin</span><span class="params">(self, S: str)</span> -&gt; str:</span>  </span><br><span class="line">        words = []  </span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(S.split()):  </span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>].lower() <span class="keyword">in</span> [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>]:  </span><br><span class="line">                s += <span class="string">'ma'</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                s = s[<span class="number">1</span>:]+s[<span class="number">0</span>]+<span class="string">'ma'</span>  </span><br><span class="line">            s += <span class="string">'a'</span> * (i+<span class="number">1</span>)  </span><br><span class="line">            words.append(s)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(words)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Complex Number Multiplication</p><p><a href="https://leetcode.com/problems/complex-number-multiplication/discuss/702715/Python-Concise-%2B-Straightforward" target="_blank" rel="noopener">https://leetcode.com/problems/complex-number-multiplication/discuss/702715/Python-Concise-%2B-Straightforward</a></p></li></ol></li><li><ol><li><p>Find And Replace in String</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findReplaceString</span><span class="params">(self, s: str, indexes: List[int], sources: List[str], targets: List[str])</span> -&gt; str:</span>  </span><br><span class="line">        opers = [(idx, src, tar) <span class="keyword">for</span> idx, src, tar <span class="keyword">in</span> zip(indexes, sources, targets)]  </span><br><span class="line">        opers = sorted(opers, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])  </span><br><span class="line">        ret, prev = <span class="string">''</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> idx, src, tar <span class="keyword">in</span> opers:  </span><br><span class="line">            <span class="keyword">if</span> idx &gt; prev:  </span><br><span class="line">                ret += s[prev:idx]  </span><br><span class="line">            <span class="keyword">if</span> s[idx:idx+len(src)] == src:  </span><br><span class="line">                ret += tar  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                ret += s[idx:idx+len(src)]  </span><br><span class="line">            prev = idx + len(src)  </span><br><span class="line">        <span class="keyword">return</span> ret + s[prev:]</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>LRU Cache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, prev=None, next=None)</span>:</span>  </span><br><span class="line">        self.key, self.prev, self.next = key, prev, next  </span><br><span class="line">          </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span>  </span><br><span class="line">              </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span>  </span><br><span class="line">        self.cap = capacity  </span><br><span class="line">        self.d = &#123;&#125;  </span><br><span class="line">        self.head, self.tail = Node(<span class="literal">None</span>), <span class="literal">None</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.d: <span class="keyword">return</span> <span class="number">-1</span>  </span><br><span class="line">        self.put(key, self.d[key][<span class="number">0</span>])  </span><br><span class="line">        <span class="keyword">return</span> self.d[key][<span class="number">0</span>]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span>  </span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.d:  </span><br><span class="line">            self._remove(self.d[key][<span class="number">1</span>])  </span><br><span class="line">            <span class="keyword">del</span> self.d[key]  </span><br><span class="line">        <span class="keyword">if</span> len(self.d) == self.cap:  </span><br><span class="line">            <span class="keyword">del</span> self.d[self.tail.key]  </span><br><span class="line">            self._remove(self.tail)  </span><br><span class="line">        self._add_to_head(Node(key))  </span><br><span class="line">        self.d[key] = (value, self.head.next)  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_to_head</span><span class="params">(self, node)</span>:</span>  </span><br><span class="line">        node.prev, node.next = self.head, self.head.next  </span><br><span class="line">        <span class="keyword">if</span> self.head.next:  </span><br><span class="line">            self.head.next.prev = node  </span><br><span class="line">        self.head.next = node  </span><br><span class="line">        <span class="keyword">if</span> self.tail <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">            self.tail = node  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_remove</span><span class="params">(self, node)</span>:</span>  </span><br><span class="line">        node.prev.next = node.next  </span><br><span class="line">        <span class="keyword">if</span> node.next:  </span><br><span class="line">            node.next.prev = node.prev  </span><br><span class="line">        <span class="keyword">if</span> self.tail == node:  </span><br><span class="line">            self.tail = node.prev  </span><br><span class="line">        <span class="keyword">if</span> self.tail == self.head:  </span><br><span class="line">            self.tail = <span class="literal">None</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Read N Characters Given Read4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, buf, n)</span>:</span>  </span><br><span class="line">        <span class="string">"""  </span></span><br><span class="line"><span class="string">        :type buf: Destination buffer (List[str])  </span></span><br><span class="line"><span class="string">        :type n: Number of characters to read (int)  </span></span><br><span class="line"><span class="string">        :rtype: The number of actual characters read (int)  </span></span><br><span class="line"><span class="string">        """</span>  </span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n)[::<span class="number">4</span>]:  </span><br><span class="line">            tmp = [<span class="number">0</span>] * <span class="number">4</span>  </span><br><span class="line">            size = read4(tmp)  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(size):  </span><br><span class="line">                buf[i+j] = tmp[j]  </span><br><span class="line">            <span class="keyword">if</span> size != <span class="number">4</span>: <span class="keyword">break</span>  </span><br><span class="line">        <span class="keyword">return</span> min(n, i+size)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Read N Characters Given Read4 II - Call multiple times</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        self.remain = []  </span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, buf: List[str], n: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">while</span> len(self.remain) &lt; n:  </span><br><span class="line">            tmp = [<span class="literal">None</span>] * <span class="number">4</span>  </span><br><span class="line">            cnt = read4(tmp)  </span><br><span class="line">            self.remain.extend(tmp[:cnt])  </span><br><span class="line">            <span class="keyword">if</span> cnt &lt; <span class="number">4</span>:  </span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line">        cnt = len(self.remain)  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(cnt, n)):  </span><br><span class="line">            buf[i] = self.remain[i]  </span><br><span class="line">        self.remain[:n] = []  </span><br><span class="line">        <span class="keyword">return</span> min(cnt, n)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Reorganize String</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorganizeString</span><span class="params">(self, S: str)</span> -&gt; str:</span>  </span><br><span class="line">        rst = []  </span><br><span class="line">        counter = Counter(S)  </span><br><span class="line">        order = sorted(counter.keys(), key=<span class="keyword">lambda</span> x: -counter[x])  </span><br><span class="line">        idx, size = <span class="number">0</span>, counter[order[<span class="number">0</span>]]  </span><br><span class="line">        bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]  </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> order:  </span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(counter[c]):  </span><br><span class="line">                bucket[idx].append(c)  </span><br><span class="line">                idx = (idx+<span class="number">1</span>) % size  </span><br><span class="line">        <span class="keyword">if</span> size &gt; <span class="number">1</span> <span class="keyword">and</span> len(bucket[size<span class="number">-2</span>]) == <span class="number">1</span>:  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(<span class="string">''</span>.join(b) <span class="keyword">for</span> b <span class="keyword">in</span> bucket)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Brace Expansion II</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">braceExpansionII</span><span class="params">(self, expression: str)</span> -&gt; List[str]:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(pattern)</span>:</span>  </span><br><span class="line">            item, items = [<span class="string">''</span>], []  </span><br><span class="line">            pattern = deque(pattern)  </span><br><span class="line">            <span class="keyword">while</span> pattern:  </span><br><span class="line">                cur = pattern.popleft()  </span><br><span class="line">                <span class="keyword">if</span> cur == <span class="string">','</span>:  </span><br><span class="line">                    items.append(item)  </span><br><span class="line">                    item = [<span class="string">''</span>]  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">if</span> cur == <span class="string">'&#123;'</span>:  </span><br><span class="line">                        level = <span class="number">1</span>  </span><br><span class="line">                        sub_p = <span class="string">''</span>  </span><br><span class="line">                        <span class="keyword">while</span> level:  </span><br><span class="line">                            sub_p += pattern.popleft()  </span><br><span class="line">                            <span class="keyword">if</span> sub_p[<span class="number">-1</span>] == <span class="string">'&#123;'</span>: level += <span class="number">1</span>  </span><br><span class="line">                            <span class="keyword">elif</span> sub_p[<span class="number">-1</span>] == <span class="string">'&#125;'</span>: level -= <span class="number">1</span>  </span><br><span class="line">                        sub_p = sub_p[:<span class="number">-1</span>]  </span><br><span class="line">                        cur = helper(sub_p)  </span><br><span class="line">                    <span class="keyword">else</span>:  </span><br><span class="line">                        cur = [cur]  </span><br><span class="line">                    item = [a+b <span class="keyword">for</span> a <span class="keyword">in</span> item <span class="keyword">for</span> b <span class="keyword">in</span> cur]  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                items.append(item)  </span><br><span class="line">            <span class="keyword">return</span> sorted(set(s <span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">for</span> s <span class="keyword">in</span> item))  </span><br><span class="line">        <span class="keyword">return</span> helper(expression)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Remove Comments</p><p><a href="https://leetcode.com/problems/remove-comments/discuss/702669/Python-line-by-line-O(N" target="_blank" rel="noopener">https://leetcode.com/problems/remove-comments/discuss/702669/Python-line-by-line-O(N</a>)</p></li></ol></li><li><ol><li><p>Expressive Words</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expressiveWords</span><span class="params">(self, S: str, words: List[str])</span> -&gt; int:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">condense</span><span class="params">(s)</span>:</span>  </span><br><span class="line">            p_c, cnt, ret = s[<span class="number">0</span>], <span class="number">1</span>, []  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> s[<span class="number">1</span>:]+<span class="string">'$'</span>:  </span><br><span class="line">                <span class="keyword">if</span> c != p_c:  </span><br><span class="line">                    ret.append((p_c, cnt))  </span><br><span class="line">                    p_c, cnt = c, <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    cnt += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">return</span> ret  </span><br><span class="line">                      </span><br><span class="line">        cond = condense(S)  </span><br><span class="line">        ret = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:  </span><br><span class="line">            cond_cur = condense(word)  </span><br><span class="line">            <span class="keyword">if</span> len(cond_cur) == len(cond) <span class="keyword">and</span> all(a[<span class="number">0</span>]==b[<span class="number">0</span>] <span class="keyword">and</span> (a[<span class="number">1</span>]==b[<span class="number">1</span>] <span class="keyword">or</span> a[<span class="number">1</span>]&gt;b[<span class="number">1</span>] <span class="keyword">and</span> a[<span class="number">1</span>]&gt;=<span class="number">3</span>) <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(cond, cond_cur)):  </span><br><span class="line">                ret += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Remove Duplicate Letters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span><span class="params">(self, s: str)</span> -&gt; str:</span>  </span><br><span class="line">        ret, start = <span class="string">''</span>, <span class="number">0</span>  </span><br><span class="line">        chars = set(s)  </span><br><span class="line">        <span class="keyword">while</span> chars:  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_lowercase:  </span><br><span class="line">                <span class="keyword">if</span> c <span class="keyword">in</span> ret <span class="keyword">or</span> c <span class="keyword">not</span> <span class="keyword">in</span> s: <span class="keyword">continue</span>  </span><br><span class="line">                <span class="keyword">if</span> set(s[s.index(c):]) &gt;= chars:  </span><br><span class="line">                    ret += c  </span><br><span class="line">                    chars.remove(c)  </span><br><span class="line">                    s = s[s.index(c)+<span class="number">1</span>:]  </span><br><span class="line">                    <span class="keyword">break</span>  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Encode and Decode Strings</p><p><a href="https://leetcode.com/problems/encode-and-decode-strings/discuss/715649/Python-Straightforward" target="_blank" rel="noopener">https://leetcode.com/problems/encode-and-decode-strings/discuss/715649/Python-Straightforward</a></p></li></ol></li><li><ol><li><p>Swap For Longest Repeated Character Substring</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxRepOpt1</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        c_len, size = [[c, len(list(g))] <span class="keyword">for</span> c, g <span class="keyword">in</span> itertools.groupby(s)], <span class="number">1</span>  </span><br><span class="line">        ret = <span class="number">0</span>  </span><br><span class="line">        counter = Counter(c <span class="keyword">for</span> c, size <span class="keyword">in</span> c_len)  </span><br><span class="line">        <span class="keyword">for</span> i, (c, size) <span class="keyword">in</span> enumerate(c_len):  </span><br><span class="line">            ret = max(ret, size+(counter[c]&gt;<span class="number">1</span>))  </span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">2</span> <span class="keyword">and</span> c_len[i<span class="number">-1</span>][<span class="number">1</span>] == <span class="number">1</span> <span class="keyword">and</span> c_len[i<span class="number">-2</span>][<span class="number">0</span>] == c:  </span><br><span class="line">                <span class="keyword">if</span> counter[c] &gt; <span class="number">2</span>:  </span><br><span class="line">                    ret = max(ret, size + c_len[i<span class="number">-2</span>][<span class="number">1</span>] + <span class="number">1</span>)  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    ret = max(ret, size + c_len[i<span class="number">-2</span>][<span class="number">1</span>])  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Swaps to Make Strings Equal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumSwap</span><span class="params">(self, s1: str, s2: str)</span> -&gt; int:</span>  </span><br><span class="line">        xy, yx = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(s1, s2):  </span><br><span class="line">            <span class="keyword">if</span> a == b: <span class="keyword">continue</span>  </span><br><span class="line">            <span class="keyword">elif</span> a == <span class="string">'x'</span>: xy += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>: yx += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> (xy+yx) % <span class="number">2</span> <span class="keyword">else</span> ((xy+yx) // <span class="number">2</span> + (xy%<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Valid Parenthesis String</p><p><a href="https://leetcode.com/problems/valid-parenthesis-string/discuss/107570/JavaC%2B%2BPython-One-Pass-Count-the-Open-Parenthesis" target="_blank" rel="noopener">https://leetcode.com/problems/valid-parenthesis-string/discuss/107570/JavaC%2B%2BPython-One-Pass-Count-the-Open-Parenthesis</a></p></li></ol></li><li><ol><li>Last Substring in Lexicographical Order</li></ol></li><li><ol><li><p>Longest Uncommon Subsequence II</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLUSlength</span><span class="params">(self, strs: List[str])</span> -&gt; int:</span>  </span><br><span class="line">        <span class="comment"># This is an important technic to check whether a string is a substring of another string  </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_substr</span><span class="params">(s, ss)</span>:</span>  </span><br><span class="line">            idx = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> ss:  </span><br><span class="line">                <span class="keyword">if</span> idx &lt; len(s) <span class="keyword">and</span> c == s[idx]:  </span><br><span class="line">                    idx += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">return</span> idx == len(s)  </span><br><span class="line">        strs = sorted(strs, key=<span class="keyword">lambda</span> x:len(x), reverse=<span class="literal">True</span>)  </span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(strs):  </span><br><span class="line">            <span class="keyword">if</span> all(<span class="keyword">not</span> is_substr(s, ss) <span class="keyword">for</span> j, ss <span class="keyword">in</span> enumerate(strs) <span class="keyword">if</span> i != j):  </span><br><span class="line">                <span class="keyword">return</span> len(s)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Stamping The Sequence</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movesToStamp</span><span class="params">(self, s: str, t: str)</span> -&gt; List[int]:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(idx)</span>:</span>  </span><br><span class="line">            moved = <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m):  </span><br><span class="line">                <span class="keyword">if</span> t[idx+i] == <span class="string">'?'</span>: <span class="keyword">continue</span>  </span><br><span class="line">                <span class="keyword">if</span> t[idx+i] != s[i]: <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">                moved = <span class="literal">True</span>  </span><br><span class="line">            t[idx:idx+m] = [<span class="string">'?'</span>] * m  </span><br><span class="line">            <span class="keyword">if</span> moved:  </span><br><span class="line">                ret.append(idx)  </span><br><span class="line">            <span class="keyword">return</span> moved  </span><br><span class="line">        m, n, ret, s, t = len(s), len(t), [], list(s), list(t)  </span><br><span class="line">        moved = <span class="literal">True</span>  </span><br><span class="line">        <span class="keyword">while</span> moved:  </span><br><span class="line">            moved = <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n-m+<span class="number">1</span>):  </span><br><span class="line">                moved |= check(i)  </span><br><span class="line">        <span class="keyword">return</span> ret[::<span class="number">-1</span>] <span class="keyword">if</span> t == [<span class="string">'?'</span>]*n <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Reverse Words in a String II</p><p><a href="https://leetcode.com/problems/reverse-words-in-a-string-ii/discuss/715615/Python-Concise-In-place" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-words-in-a-string-ii/discuss/715615/Python-Concise-In-place</a></p></li></ol></li></ul><h3 id="Palindromic"><a href="#Palindromic" class="headerlink" title="Palindromic"></a>Palindromic</h3><p>Manacher’s Algorithm<br><a href="https://www.youtube.com/watch?v=nbTSfrEfo6M" target="_blank" rel="noopener">https://www.youtube.com/watch?v=nbTSfrEfo6M</a></p><ul><li><ol><li><p>Longest Palindromic Substring</p><p><a href="https://leetcode.com/problems/longest-palindromic-substring/discuss/3337/Manacher-algorithm-in-Python-O(n" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/discuss/3337/Manacher-algorithm-in-Python-O(n</a>)</p></li></ol></li><li><ol><li><p>Palindromic Substrings</p><p>O(N^2) - None Manacher’s Algorithm  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">        rst = len(s)  </span><br><span class="line">        i = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):  </span><br><span class="line">            j = i  </span><br><span class="line">            <span class="keyword">while</span> i+<span class="number">1</span> &lt; len(s) <span class="keyword">and</span> s[i] == s[i+<span class="number">1</span>]:  </span><br><span class="line">                i += <span class="number">1</span>  </span><br><span class="line">                rst += i-j  </span><br><span class="line">            rr = i  </span><br><span class="line">            <span class="keyword">while</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; len(s) <span class="keyword">and</span> s[j<span class="number">-1</span>] == s[i+<span class="number">1</span>]:  </span><br><span class="line">                j -= <span class="number">1</span>  </span><br><span class="line">                i += <span class="number">1</span>  </span><br><span class="line">                rst += <span class="number">1</span>  </span><br><span class="line">            i = rr + <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Palindrome Pairs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">palindromePairs</span><span class="params">(self, words: List[str])</span> -&gt; List[List[int]]:</span>  </span><br><span class="line">        d = &#123;word: i <span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(words)&#125;   </span><br><span class="line">        rst = set()  </span><br><span class="line">        <span class="keyword">for</span> i, word <span class="keyword">in</span> enumerate(words):  </span><br><span class="line">            t = word[::<span class="number">-1</span>]  </span><br><span class="line">            <span class="comment"># (i, j)  </span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(t)+<span class="number">1</span>):  </span><br><span class="line">                cur = t[j:]  </span><br><span class="line">                <span class="keyword">if</span> word+cur == str(word+cur)[::<span class="number">-1</span>] <span class="keyword">and</span> cur <span class="keyword">in</span> d <span class="keyword">and</span> cur != word:  </span><br><span class="line">                    rst.add((i, d[cur]))  </span><br><span class="line">            <span class="comment"># (j, i)  </span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(t), <span class="number">-1</span>, <span class="number">-1</span>):  </span><br><span class="line">                cur = t[:j]  </span><br><span class="line">                <span class="keyword">if</span> cur+word == str(cur+word)[::<span class="number">-1</span>] <span class="keyword">and</span> cur <span class="keyword">in</span> d <span class="keyword">and</span> cur != word:  </span><br><span class="line">                    rst.add((d[cur], i))  </span><br><span class="line">        <span class="keyword">return</span> [list(item) <span class="keyword">for</span> item <span class="keyword">in</span> rst]</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>I do not know.<br>You tell me how to solve it.</p><ul><li><ol><li>Orderly Queue</li></ol></li></ul><h3 id="Sliding-window"><a href="#Sliding-window" class="headerlink" title="Sliding window"></a>Sliding window</h3><p>Maintain a state while sliding window</p><ul><li><p>easy</p><ol><li>Dictionary, Dictionary, Dictionary  </li><li>Prefix_sum</li></ol><ul><li><ol><li><p>Longest Substring Without Repeating Characters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        d = Counter()  </span><br><span class="line">        l, r, rst = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> r &lt; len(s):  </span><br><span class="line">            c = s[r]  </span><br><span class="line">            r += <span class="number">1</span>  </span><br><span class="line">            d[c] += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> d[c] &lt;= <span class="number">1</span>:  </span><br><span class="line">                rst = max(rst, r-l)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="keyword">while</span> l &lt; r:  </span><br><span class="line">                    cc = s[l]  </span><br><span class="line">                    l += <span class="number">1</span>  </span><br><span class="line">                    d[cc] -= <span class="number">1</span>  </span><br><span class="line">                    <span class="keyword">if</span> d[cc] == <span class="number">1</span>:  </span><br><span class="line">                        <span class="keyword">break</span>  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Find Two Non-overlapping Sub-arrays Each With Target Sum</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSumOfLengths</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span>  </span><br><span class="line">        prefix = &#123;<span class="number">0</span>: <span class="number">-1</span>&#125;  </span><br><span class="line">        best, bests, rst = math.inf, [math.inf] * len(arr), math.inf  </span><br><span class="line">        cur = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(arr):  </span><br><span class="line">            cur += v  </span><br><span class="line">            <span class="keyword">if</span> cur - target <span class="keyword">in</span> prefix:  </span><br><span class="line">                begin = prefix[cur-target]  </span><br><span class="line">                <span class="keyword">if</span> begin &gt; <span class="number">-1</span>:  </span><br><span class="line">                    rst = min(rst, i-begin + bests[begin])  </span><br><span class="line">                best = min(best, i-begin)  </span><br><span class="line">            bests[i] = best  </span><br><span class="line">            prefix[cur] = i  </span><br><span class="line">        <span class="keyword">return</span> rst <span class="keyword">if</span> rst != math.inf <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Window Substring</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s: str, t: str)</span> -&gt; str:</span>  </span><br><span class="line">        c = Counter(t)  </span><br><span class="line">        cnt = len(c)  </span><br><span class="line">        l, r, rst = <span class="number">0</span>, <span class="number">0</span>, s+t  </span><br><span class="line">        <span class="keyword">while</span> r &lt; len(s) <span class="keyword">or</span> cnt == <span class="number">0</span>:  </span><br><span class="line">            <span class="keyword">if</span> cnt == <span class="number">0</span>:  </span><br><span class="line">                <span class="comment"># move l  </span></span><br><span class="line">                c[s[l]] += <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> c[s[l]] == <span class="number">1</span>:  </span><br><span class="line">                    cnt += <span class="number">1</span>  </span><br><span class="line">                l += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="comment"># move r  </span></span><br><span class="line">                c[s[r]] -= <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> c[s[r]] == <span class="number">0</span>:  </span><br><span class="line">                    cnt -= <span class="number">1</span>  </span><br><span class="line">                r += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> cnt == <span class="number">0</span> <span class="keyword">and</span> len(s[l:r]) &lt; len(rst):  </span><br><span class="line">                rst = s[l:r]  </span><br><span class="line">        <span class="keyword">return</span> rst <span class="keyword">if</span> rst != s+t <span class="keyword">else</span> <span class="string">''</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Longest Substring with At Most Two Distinct Characters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        d, cnt, ret = Counter(), <span class="number">2</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):  </span><br><span class="line">            d[c] += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> d[c] == <span class="number">1</span>:  </span><br><span class="line">                cnt += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> len(d) &lt;= <span class="number">2</span>:  </span><br><span class="line">                ret += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                d[s[i-ret]] -= <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> d[s[i-ret]] == <span class="number">0</span>:  </span><br><span class="line">                    <span class="keyword">del</span> d[s[i-ret]]  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Number of Substrings Containing All Three Characters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfSubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        ret, d, cnt, l = <span class="number">0</span>, Counter(), <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):  </span><br><span class="line">            d[c] += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> d[c] == <span class="number">1</span>: cnt += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> cnt == <span class="number">3</span>:  </span><br><span class="line">                <span class="keyword">while</span> d[s[l]] &gt; <span class="number">1</span>:  </span><br><span class="line">                    d[s[l]] -= <span class="number">1</span>  </span><br><span class="line">                    l += <span class="number">1</span>  </span><br><span class="line">                ret += l+<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>Monotone Stack</p><ul><li><ol><li><p>Largest Rectangle in Histogram</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span>  </span><br><span class="line">        stack = []  </span><br><span class="line">        rst = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i, height <span class="keyword">in</span> enumerate(heights + [<span class="number">0</span>]):  </span><br><span class="line">            idx_prev = i  </span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">1</span>] &gt;= height:  </span><br><span class="line">                idx_prev, h_prev = stack.pop()  </span><br><span class="line">                rst = max(rst, (i - idx_prev) * h_prev)  </span><br><span class="line">            stack.append((idx_prev, height))  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Maximal Rectangle</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, M: List[List[str]])</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M <span class="keyword">or</span> <span class="keyword">not</span> M[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">        m, n = len(M), len(M[<span class="number">0</span>])  </span><br><span class="line">        rst = <span class="number">0</span>  </span><br><span class="line">        h = [<span class="number">0</span>] * (n+<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> M:  </span><br><span class="line">            stack = [(<span class="number">0</span>, <span class="number">-1</span>)]  </span><br><span class="line">            <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(row+[<span class="number">0</span>]):  </span><br><span class="line">                <span class="keyword">if</span> v == <span class="string">'1'</span>:  </span><br><span class="line">                    h[i] += <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    h[i] = <span class="number">0</span>  </span><br><span class="line">                idx = i  </span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">0</span>] &gt; h[i]:  </span><br><span class="line">                    height, idx = stack.pop()  </span><br><span class="line">                    rst = max(rst, height * (i-idx))  </span><br><span class="line">                stack.append((h[i], idx))  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>Final Prices With a Special Discount in a Shop</li></ol></li><li><ol><li><p>Next Greater Element III</p><p><a href="https://leetcode.com/problems/next-greater-element-iii/discuss/702697/Python-Concise-O(n" target="_blank" rel="noopener">https://leetcode.com/problems/next-greater-element-iii/discuss/702697/Python-Concise-O(n</a>)</p></li></ol></li><li><ol><li><p>Maximum Binary Tree</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.  </span></span><br><span class="line"><span class="comment"># class TreeNode:  </span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):  </span></span><br><span class="line"><span class="comment">#         self.val = val  </span></span><br><span class="line"><span class="comment">#         self.left = left  </span></span><br><span class="line"><span class="comment">#         self.right = right  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constructMaximumBinaryTree</span><span class="params">(self, nums: List[int])</span> -&gt; TreeNode:</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Recursive  </span></span><br><span class="line"><span class="string">        if not nums: return None  </span></span><br><span class="line"><span class="string">        val = max(nums)  </span></span><br><span class="line"><span class="string">        return TreeNode(val, self.constructMaximumBinaryTree(nums[:nums.index(val)]),  </span></span><br><span class="line"><span class="string">                             self.constructMaximumBinaryTree(nums[nums.index(val)+1:]))  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Recursive optimized  </span></span><br><span class="line"><span class="string">        def dfs(l, r):  </span></span><br><span class="line"><span class="string">            if l == r: return None  </span></span><br><span class="line"><span class="string">            val = max(nums[l:r])  </span></span><br><span class="line"><span class="string">            idx = l + nums[l:r].index(val)  </span></span><br><span class="line"><span class="string">            return TreeNode(val, dfs(l, idx), dfs(idx+1, r))  </span></span><br><span class="line"><span class="string">        return dfs(0, len(nums))  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Non-recursive  </span></span><br><span class="line"><span class="string">        ret = TreeNode()  </span></span><br><span class="line"><span class="string">        stack = [((0, len(nums)), (ret, 'l'))]  </span></span><br><span class="line"><span class="string">        while stack:  </span></span><br><span class="line"><span class="string">            (l, r), (p, dir) = stack.pop()  </span></span><br><span class="line"><span class="string">            if l == r: continue  </span></span><br><span class="line"><span class="string">            node = TreeNode(max(nums[l:r]))  </span></span><br><span class="line"><span class="string">            idx = l + nums[l:r].index(node.val)  </span></span><br><span class="line"><span class="string">            if dir == 'l': p.left = node  </span></span><br><span class="line"><span class="string">            else: p.right = node  </span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">            stack.append(((idx+1, r), (node, 'r')))  </span></span><br><span class="line"><span class="string">            stack.append(((l, idx), (node, 'l')))  </span></span><br><span class="line"><span class="string">        return ret.left  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Optimal  </span></span><br><span class="line">        stack = []  </span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> nums:  </span><br><span class="line">            node = TreeNode(val)  </span><br><span class="line">            left = <span class="literal">None</span>  </span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>].val &lt; val:  </span><br><span class="line">                left = stack.pop()  </span><br><span class="line">            node.left = left  </span><br><span class="line">            <span class="keyword">if</span> stack:  </span><br><span class="line">                stack[<span class="number">-1</span>].right = node  </span><br><span class="line">            stack.append(node)  </span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>Monotone queue</p></li><li><p>stack</p><p>  <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Stack_(abstract_data_type)</a>)</p><p>  O(1) to push and pop at end.</p><ul><li><ol><li><p>Valid Parentheses</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span>  </span><br><span class="line">        stack = []  </span><br><span class="line">        pairs = &#123;<span class="string">'('</span>: <span class="string">')'</span>, <span class="string">'['</span>: <span class="string">']'</span>, <span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>&#125;  </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:  </span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> [<span class="string">'('</span>, <span class="string">'['</span>, <span class="string">'&#123;'</span>]:  </span><br><span class="line">                stack.append(pairs[c])  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="keyword">if</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] == c:  </span><br><span class="line">                    stack.pop()  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Basic Calculator II</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        s = s.strip().replace(<span class="string">' '</span>, <span class="string">''</span>)  </span><br><span class="line">        nums = []  </span><br><span class="line">        sign, val = <span class="string">'+'</span>, <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):  </span><br><span class="line">            <span class="keyword">if</span> c.isdigit():  </span><br><span class="line">                val = val*<span class="number">10</span> + int(c)  </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> c.isdigit() <span class="keyword">or</span> i == len(s)<span class="number">-1</span>:  </span><br><span class="line">                <span class="keyword">if</span> sign == <span class="string">'+'</span>:  </span><br><span class="line">                    nums.append(val)  </span><br><span class="line">                <span class="keyword">elif</span> sign == <span class="string">'-'</span>:  </span><br><span class="line">                    nums.append(-val)  </span><br><span class="line">                <span class="keyword">elif</span> sign == <span class="string">'*'</span>:  </span><br><span class="line">                    nums.append(nums.pop() * val)  </span><br><span class="line">                <span class="keyword">elif</span> sign == <span class="string">'/'</span>:  </span><br><span class="line">                    nums.append(int(nums.pop() / val))  </span><br><span class="line">                sign = c  </span><br><span class="line">                val = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">return</span> sum(nums)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Remove to Make Valid Parentheses</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minRemoveToMakeValid</span><span class="params">(self, s: str)</span> -&gt; str:</span>  </span><br><span class="line">        stack = []  </span><br><span class="line">        remove = set()  </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):  </span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">'('</span>:  </span><br><span class="line">                stack.append(i)  </span><br><span class="line">            <span class="keyword">elif</span> c == <span class="string">')'</span>:  </span><br><span class="line">                <span class="keyword">if</span> stack:  </span><br><span class="line">                    stack.pop()  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    remove.add(i)  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> stack:  </span><br><span class="line">            remove.add(i)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(c <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> remove)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Score of Parentheses</p><p><a href="https://leetcode.com/problems/score-of-parentheses/discuss/141777/C%2B%2BJavaPython-O(1)-Space" target="_blank" rel="noopener">https://leetcode.com/problems/score-of-parentheses/discuss/141777/C%2B%2BJavaPython-O(1)-Space</a></p></li></ol></li></ul></li></ul><h3 id="Heap-sort-Priority-Queue"><a href="#Heap-sort-Priority-Queue" class="headerlink" title="Heap sort / Priority Queue"></a>Heap sort / Priority Queue</h3><ul><li><ol><li><p>Smallest Range Covering Elements from K Lists</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestRange</span><span class="params">(self, nums: List[List[int]])</span> -&gt; List[int]:</span>  </span><br><span class="line">        q = [(num[<span class="number">0</span>], num, <span class="number">1</span>) <span class="keyword">for</span> num <span class="keyword">in</span> nums]  </span><br><span class="line">        heapq.heapify(q)  </span><br><span class="line">        rst = [min(q)[<span class="number">0</span>], max(q)[<span class="number">0</span>]]  </span><br><span class="line">        cur_max = max(q)[<span class="number">0</span>]  </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">            val, num, idx = heapq.heappop(q)  </span><br><span class="line">            <span class="keyword">if</span> idx == len(num):  </span><br><span class="line">                <span class="keyword">return</span> rst  </span><br><span class="line">            heapq.heappush(q, (num[idx], num, idx+<span class="number">1</span>))  </span><br><span class="line">            cur_max = max(num[idx], cur_max)  </span><br><span class="line">            <span class="keyword">if</span> cur_max - q[<span class="number">0</span>][<span class="number">0</span>] &lt; rst[<span class="number">1</span>] - rst[<span class="number">0</span>]:  </span><br><span class="line">                rst = [q[<span class="number">0</span>][<span class="number">0</span>], cur_max]</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h3><p><a href="https://yonglife.com/2017/01/22/Binary-Search/">Binary Search</a></p><blockquote><p>Ideal  </p></blockquote><ul><li>Binary search can be used to guess answer in a known range.  </li></ul><p>Leverage library if it is available.  </p><ul><li>Python: <code>bisect.bisect_left</code>, <code>bisect.bisect_right</code>  </li><li>C++: <code>lower_bound</code>, <code>upper_bound</code></li></ul><ul><li><ol><li><p>Design Log Storage System</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogSystem</span>:</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        self.data = []  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id: int, timestamp: str)</span> -&gt; <span class="keyword">None</span>:</span>  </span><br><span class="line">        bisect.insort_left(self.data, (timestamp, id))  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, s: str, e: str, gra: str)</span> -&gt; List[int]:</span>  </span><br><span class="line">        gra_to_idx = &#123;  </span><br><span class="line">            <span class="string">'Year'</span>: <span class="number">4</span>,  </span><br><span class="line">            <span class="string">'Month'</span>: <span class="number">7</span>,  </span><br><span class="line">            <span class="string">'Day'</span>: <span class="number">10</span>,  </span><br><span class="line">            <span class="string">'Hour'</span>: <span class="number">13</span>,  </span><br><span class="line">            <span class="string">'Minute'</span>: <span class="number">16</span>,  </span><br><span class="line">            <span class="string">'Second'</span>: <span class="number">19</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">        s = s[:gra_to_idx[gra]]  </span><br><span class="line">        e = e[:gra_to_idx[gra]]+<span class="string">':'</span>+<span class="string">'9'</span>*<span class="number">32</span>  </span><br><span class="line"></span><br><span class="line">        idx1, idx2 = bisect.bisect_left(self.data, (s, -math.inf)), bisect.bisect(self.data, (e, math.inf))  </span><br><span class="line">        <span class="keyword">return</span> [item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> self.data[idx1:idx2]]</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Split Array Largest Sum</p><p>Guess answer by using binary search  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitArray</span><span class="params">(self, nums: List[int], m: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">valid_sum</span><span class="params">(max_sum)</span>:</span>  </span><br><span class="line">            cnt, cur = <span class="number">1</span>, <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:  </span><br><span class="line">                cur += num  </span><br><span class="line">                <span class="keyword">if</span> cur &gt; max_sum:  </span><br><span class="line">                    cnt += <span class="number">1</span>  </span><br><span class="line">                    cur = num  </span><br><span class="line">                    <span class="keyword">if</span> cnt &gt; m:  </span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">        <span class="comment"># Binary search  </span></span><br><span class="line">        l, r = max(nums), sum(nums)  </span><br><span class="line">        <span class="keyword">while</span> l &lt; r:  </span><br><span class="line">            mid = (l+r) // <span class="number">2</span>  </span><br><span class="line">            <span class="keyword">if</span> valid_sum(mid):  </span><br><span class="line">                r = mid  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                l = mid+<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Number of Days to Make m Bouquets</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDays</span><span class="params">(self, B: List[int], m: int, k: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ok</span><span class="params">(day)</span>:</span>  </span><br><span class="line">            fl = <span class="number">0</span>  </span><br><span class="line">            cnt = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> B:  </span><br><span class="line">                fl = fl + <span class="number">1</span> <span class="keyword">if</span> day &gt;= d <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">                <span class="keyword">if</span> fl &gt;= k:  </span><br><span class="line">                    cnt += <span class="number">1</span>  </span><br><span class="line">                    fl = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">return</span> cnt &gt;= m  </span><br><span class="line"></span><br><span class="line">        l, r = min(B), max(B)+<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">while</span> l &lt; r:  </span><br><span class="line">            <span class="comment">#print(f'&#123;l&#125; &#123;r&#125;')  </span></span><br><span class="line">            mid = (l+r) // <span class="number">2</span>  </span><br><span class="line">            <span class="keyword">if</span> ok(mid):  </span><br><span class="line">                r = mid  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                l = mid + <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> l <span class="keyword">if</span> l &lt;= max(B) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Snapshot Array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnapshotArray</span>:</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length: int)</span>:</span>  </span><br><span class="line">        self.d = defaultdict(list)  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):  </span><br><span class="line">            self.d[i].append((<span class="number">0</span>, <span class="number">0</span>))  </span><br><span class="line">        self.v = <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, index: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span>  </span><br><span class="line">        self.d[index].append((self.v, val))  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snap</span><span class="params">(self)</span> -&gt; int:</span>  </span><br><span class="line">        self.v += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> self.v - <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, index: int, snap_id: int)</span> -&gt; int:</span>  </span><br><span class="line">        idx = bisect.bisect(self.d[index], (snap_id, float<span class="string">'inf'</span>)) - <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> self.d[index][idx][<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><ul><li><ol><li><p>Shortest Palindrome</p><ol><li>Shortest Palindrome</li></ol></li></ol></li></ul><h2 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h2><p><a href="[https://www.youtube.com/playlist?list=PL3P3cZGn6p661AmJdHafLMLzPxy5CXy-i](https://www.youtube.com/playlist?list=PL3P3cZGn6p661AmJdHafLMLzPxy5CXy-i">MIT 6.006 Introduction to Algorithms, Fall 2011</a>)</p><blockquote><p>Idea  </p></blockquote><ol><li>DP is a smart brute force. It remember state while exhausting all possible cases.  </li><li>DP is a DFS. Switching to BFS when it is too slow or taking too much memory to do DFS.  </li><li>Transformation formula is the key of DP. <code>Bottom up</code> or <code>Top down</code> is just the implementation technical.   </li><li><code>Bottom up</code> implementation can be used to save memory when we only need states from last n levels.  </li><li><p>Pay attention to edge cases. Edge cases used to happen when each parameter(dimension variable) reaching 0.<br>E.g. 10. Regular Expression Matching  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span>  </span><br><span class="line">            <span class="comment"># Memorization: Time O(M*N) Space O(M*N)  </span></span><br><span class="line">            m, n = len(s), len(p)  </span><br><span class="line">            <span class="keyword">import</span> functools  </span><br><span class="line"><span class="meta">            @functools.lru_cache(None)  </span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(x, y)</span>:</span>  </span><br><span class="line">                <span class="keyword">if</span> y == <span class="number">0</span>: <span class="keyword">return</span> x == <span class="number">0</span>  </span><br><span class="line">                <span class="keyword">if</span> x == <span class="number">0</span>: <span class="keyword">return</span> y == <span class="number">0</span> <span class="keyword">or</span> y&gt;=<span class="number">2</span> <span class="keyword">and</span> p[y<span class="number">-1</span>] == <span class="string">'*'</span> <span class="keyword">and</span> dp(x, y<span class="number">-2</span>)  </span><br><span class="line">                <span class="keyword">if</span> p[y<span class="number">-1</span>] != <span class="string">'*'</span>:  </span><br><span class="line">                    <span class="keyword">return</span> p[y<span class="number">-1</span>] <span class="keyword">in</span> [s[x<span class="number">-1</span>], <span class="string">'.'</span>] <span class="keyword">and</span> dp(x<span class="number">-1</span>, y<span class="number">-1</span>)  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">return</span> y&gt;<span class="number">1</span> <span class="keyword">and</span> (dp(x, y<span class="number">-2</span>) <span class="keyword">or</span> p[y<span class="number">-2</span>] <span class="keyword">in</span> [s[x<span class="number">-1</span>], <span class="string">'.'</span>] <span class="keyword">and</span> dp(x<span class="number">-1</span>, y))  </span><br><span class="line">            <span class="keyword">return</span> dp(m, n)  </span><br><span class="line">    ```  </span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> Same idea when dealing contest/competitive games. Find the optimal move by exhausting all possible choice.   </span><br><span class="line">    ```python  </span><br><span class="line">    DP(n) = max(Profit(move) - DP(move/next_start_point)  <span class="keyword">for</span> move <span class="keyword">in</span> possible_moves)  </span><br><span class="line">    ```  </span><br><span class="line"></span><br><span class="line">&gt; Useful trick  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> `dict` can be more flexible compare to `array` since you can switch between `i`, `i+<span class="number">1</span>`, `i<span class="number">-1</span>` <span class="keyword">as</span> needed when dealing edge cases.  </span><br><span class="line"><span class="number">2.</span> Use tuple <span class="keyword">as</span> key when multiple dimension dictionary/array <span class="keyword">is</span> needed.   </span><br><span class="line"></span><br><span class="line">    ```python  </span><br><span class="line">    dp = &#123;&#125;  </span><br><span class="line">    <span class="comment"># 1-d  </span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">10</span>  </span><br><span class="line">    <span class="comment"># 2-d  </span></span><br><span class="line">    dp[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">10</span>  </span><br><span class="line">    <span class="comment"># 3-d  </span></span><br><span class="line">    dp[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] = <span class="number">10</span>  </span><br><span class="line">    ```  </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> `@lru_cache(<span class="literal">None</span>)` can be used <span class="keyword">for</span> `Top down` implementation.  </span><br><span class="line"><span class="number">4.</span> `State transformation formular` can be identical between `bottom up` <span class="keyword">and</span> `top down` approach <span class="keyword">if</span> we use variable carfully.  </span><br><span class="line"></span><br><span class="line">    &gt; [<span class="number">10.</span> Regular Expression Matching]([https://leetcode.com/problems/regular-expression-matching/discuss/<span class="number">665501</span>/Python-Concise-DP-Botton-up-%<span class="number">2</span>B-Top-down](https://leetcode.com/problems/regular-expression-matching/discuss/<span class="number">665501</span>/Python-Concise-DP-Botton-up-%<span class="number">2</span>B-Top-down))</span><br><span class="line">    &gt; [<span class="number">44.</span> Wildcard Matching]([https://leetcode.com/problems/wildcard-matching/discuss/<span class="number">687707</span>/Python-Concise-DP-Bottom-up-%<span class="number">2</span>B-Top-down](https://leetcode.com/problems/wildcard-matching/discuss/<span class="number">687707</span>/Python-Concise-DP-Bottom-up-%<span class="number">2</span>B-Top-down))</span><br><span class="line"></span><br><span class="line"><span class="comment">### One dimension </span></span><br><span class="line"></span><br><span class="line">- <span class="number">91.</span> Decode Ways</span><br><span class="line"></span><br><span class="line">```python  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s: str)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Top down: Time O(N) Space O(N)  </span></span><br><span class="line"><span class="string">        dp = &#123;0: 1&#125;  </span></span><br><span class="line"><span class="string">        def helper(x):  </span></span><br><span class="line"><span class="string">            if x in dp: return dp[x]  </span></span><br><span class="line"><span class="string">            dp[x] = (helper(x-1) if s[x-1] != '0' else 0) + (helper(x-2) if x &gt; 1 and 9 &lt; int(s[x-2:x]) &lt;= 26 else 0)  </span></span><br><span class="line"><span class="string">            return dp[x]  </span></span><br><span class="line"><span class="string">        return helper(len(s))  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Bottom up: Time O(N) Space O(1)  </span></span><br><span class="line">        p2, p1 = <span class="number">1</span>, <span class="number">1</span> <span class="keyword">if</span> s[<span class="number">0</span>] != <span class="string">'0'</span> <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):  </span><br><span class="line">            cur = p1 <span class="keyword">if</span> s[i] != <span class="string">'0'</span> <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">            cur += p2 <span class="keyword">if</span> <span class="number">9</span> &lt; int(s[i<span class="number">-1</span>:i+<span class="number">1</span>]) &lt;= <span class="number">26</span> <span class="keyword">else</span> <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">if</span> cur == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">            p2, p1 = p1, cur  </span><br><span class="line">        <span class="keyword">return</span> p1</span><br></pre></td></tr></table></figure></li></ol><ul><li><ol><li><p>Unique Binary Search Trees</p><p><a href="https://leetcode.com/problems/unique-binary-search-trees/discuss/665520/Python-Concise-Botton-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/unique-binary-search-trees/discuss/665520/Python-Concise-Botton-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Climbing Stairs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="string">'''          </span></span><br><span class="line"><span class="string">        d = &#123;0:1, 1:1&#125;  </span></span><br><span class="line"><span class="string">        def helper(k):  </span></span><br><span class="line"><span class="string">            if k in d: return d[k]  </span></span><br><span class="line"><span class="string">            d[k] = helper(k-1) + helper(k-2)  </span></span><br><span class="line"><span class="string">            return d[k]  </span></span><br><span class="line"><span class="string">        return helper(n)  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">1</span>:  </span><br><span class="line">            a, b = b, a+b  </span><br><span class="line">            n-=<span class="number">1</span>  </span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Maximum Product Subarray</p><p><a href="https://leetcode.com/problems/maximum-product-subarray/discuss/665622/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-product-subarray/discuss/665622/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Triangle</p><p><a href="https://leetcode.com/problems/triangle/discuss/667442/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/triangle/discuss/667442/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>House Robber</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # bottom up  </span></span><br><span class="line"><span class="string">        a, b = 0, nums[0]  </span></span><br><span class="line"><span class="string">        for v in nums[1:]:  </span></span><br><span class="line"><span class="string">            a, b = b, max(b, a+v)  </span></span><br><span class="line"><span class="string">        return b  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Top down  </span></span><br><span class="line">        d = &#123;<span class="number">-1</span>: <span class="number">0</span>, <span class="number">0</span>: nums[<span class="number">0</span>]&#125;  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(k)</span>:</span>  </span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">in</span> d: <span class="keyword">return</span> d[k]  </span><br><span class="line">            d[k] = max(helper(k<span class="number">-2</span>)+nums[k], helper(k<span class="number">-1</span>))  </span><br><span class="line">            <span class="keyword">return</span> d[k]  </span><br><span class="line">        <span class="keyword">return</span> helper(len(nums)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Word Break</p><p><a href="https://leetcode.com/problems/word-break/discuss/665575/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/word-break/discuss/665575/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li>Triangle</li></ol></li><li><ol><li><p>Arithmetic Slices</p><p><a href="https://leetcode.com/problems/arithmetic-slices/discuss/671064/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/arithmetic-slices/discuss/671064/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Minimum Path Sum</p><p><a href="https://leetcode.com/problems/minimum-path-sum/discuss/667483/Python-Concise-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-path-sum/discuss/667483/Python-Concise-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Integer Break</p><p><a href="https://leetcode.com/problems/integer-break/discuss/676483/Python-DP-without-math-trick" target="_blank" rel="noopener">https://leetcode.com/problems/integer-break/discuss/676483/Python-DP-without-math-trick</a></p></li></ol></li><li><ol><li><p>Counting Bits</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBits</span><span class="params">(self, num: int)</span> -&gt; List[int]:</span>  </span><br><span class="line">        dp = [<span class="number">0</span>] * (num+<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">return</span> dp  </span><br><span class="line">        dp[<span class="number">1</span>], prev = <span class="number">1</span>, <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num+<span class="number">1</span>):  </span><br><span class="line">            <span class="keyword">if</span> i == prev * <span class="number">2</span>:  </span><br><span class="line">                dp[i] = <span class="number">1</span>  </span><br><span class="line">                prev = i  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                dp[i] = <span class="number">1</span> + dp[i-prev]  </span><br><span class="line">        <span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Best Time to Buy and Sell Stock with Cooldown</p><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/669064/Python-Concise-DP-Botton-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/669064/Python-Concise-DP-Botton-up-%2B-Top-down</a></p></li></ol></li><li><ol><li>Perfect Squares</li></ol></li><li><ol><li><p>Longest Valid Parentheses</p><p><a href="https://leetcode.com/problems/longest-valid-parentheses/discuss/669186/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/longest-valid-parentheses/discuss/669186/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Word Break II</p><p><a href="https://leetcode.com/problems/word-break-ii/discuss/672708/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/word-break-ii/discuss/672708/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li>Ugly Number II</li></ol></li><li><ol><li>Count Numbers with Unique Digits</li></ol></li></ul><h3 id="Two-dimension"><a href="#Two-dimension" class="headerlink" title="Two dimension"></a>Two dimension</h3><ul><li><ol><li><p>Longest Palindromic Substring</p><p><a href="https://leetcode.com/problems/longest-palindromic-substring/discuss/663984/python-concise-dp-on2" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/discuss/663984/python-concise-dp-on2</a></p></li></ol></li><li><ol><li><p>Edit Distance</p><p><a href="https://leetcode.com/problems/edit-distance/discuss/663855/Python-Concise-memorization-%2B-Botton-up" target="_blank" rel="noopener">https://leetcode.com/problems/edit-distance/discuss/663855/Python-Concise-memorization-%2B-Botton-up</a></p></li></ol></li><li><ol><li><p>Unique Binary Search Trees II</p><p><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/669241/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/669241/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Distinct Subsequences</p><p><a href="https://leetcode.com/problems/distinct-subsequences/discuss/673798/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/distinct-subsequences/discuss/673798/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Best Time to Buy and Sell Stock IV</p><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/676357/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/676357/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Regular Expression Matching</p><p><a href="https://leetcode.com/problems/regular-expression-matching/discuss/665501/Python-Concise-DP-Botton-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/regular-expression-matching/discuss/665501/Python-Concise-DP-Botton-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Wildcard Matching</p><p><a href="https://leetcode.com/problems/wildcard-matching/discuss/687707/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/wildcard-matching/discuss/687707/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li>Guess Number Higher or Lower II</li></ol></li><li><ol><li><p>Burst Balloons</p><p><a href="https://leetcode.com/problems/burst-balloons/discuss/665527/Python-Concise-Botton-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/burst-balloons/discuss/665527/Python-Concise-Botton-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Maximal Square</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span><span class="params">(self, M: List[List[str]])</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M <span class="keyword">or</span> <span class="keyword">not</span> M[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">        m, n = len(M), len(M[<span class="number">0</span>])  </span><br><span class="line">        h, max_l = [<span class="number">0</span>] * n, <span class="number">0</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # bottom up: Time O(M*N) Space O(M*N)  </span></span><br><span class="line"><span class="string">        dp = [[0]*(n+1) for _ in range(m+1)]  </span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">        for i in range(m):  </span></span><br><span class="line"><span class="string">            w = 0  </span></span><br><span class="line"><span class="string">            for j in range(n):  </span></span><br><span class="line"><span class="string">                if M[i][j] == '0':  </span></span><br><span class="line"><span class="string">                    w, h[j], dp[i+1][j+1] = 0, 0, 0  </span></span><br><span class="line"><span class="string">                else:  </span></span><br><span class="line"><span class="string">                    w, h[j] = w+1, h[j]+1  </span></span><br><span class="line"><span class="string">                    dp[i+1][j+1] = min(w, h[j], dp[i][j]+1)  </span></span><br><span class="line"><span class="string">                    max_l = max(max_l, dp[i+1][j+1])  </span></span><br><span class="line"><span class="string">        return max_l * max_l  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># bottom up: Time O(M*N) Space O(N)  </span></span><br><span class="line">        dp, ndp = [<span class="number">0</span>] * (n+<span class="number">1</span>), [<span class="number">0</span>] * (n+<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):  </span><br><span class="line">            w = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):  </span><br><span class="line">                <span class="keyword">if</span> M[i][j] == <span class="string">'0'</span>:  </span><br><span class="line">                    w, h[j], ndp[j+<span class="number">1</span>] = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    w, h[j] = w+<span class="number">1</span>, h[j]+<span class="number">1</span>  </span><br><span class="line">                    ndp[j+<span class="number">1</span>] = min(w, h[j], dp[j]+<span class="number">1</span>)  </span><br><span class="line">                    max_l = max(max_l, ndp[j+<span class="number">1</span>])  </span><br><span class="line">            dp, ndp = ndp, [<span class="number">0</span>] * (n+<span class="number">1</span>)  </span><br><span class="line">        <span class="keyword">return</span> max_l * max_l</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Interleaving String</p><p><a href="https://leetcode.com/problems/interleaving-string/discuss/673764/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/interleaving-string/discuss/673764/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Stone Game II</p><p>contest/competitive games  </p><p><a href="https://leetcode.com/problems/stone-game-ii/discuss/345230/Python-DP-Solution" target="_blank" rel="noopener">https://leetcode.com/problems/stone-game-ii/discuss/345230/Python-DP-Solution</a></p></li></ol></li><li><ol><li><p>Split Array Largest Sum</p><p><a href="https://leetcode.com/problems/split-array-largest-sum/discuss/676272/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/split-array-largest-sum/discuss/676272/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li><li><ol><li><p>Scramble String</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isScramble</span><span class="params">(self, s1: str, s2: str)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="comment"># Top down: Time O(N^3) Space O(N^3)  </span></span><br><span class="line">        <span class="keyword">import</span> functools  </span><br><span class="line"><span class="meta">        @functools.lru_cache(None)  </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(s1, s2, rev)</span>:</span>  </span><br><span class="line">            <span class="keyword">if</span> s1 == s2 <span class="keyword">or</span> s1 == s2[::<span class="number">-1</span>]: <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">            <span class="keyword">return</span> any(dp(s1[:i], s2[:i], <span class="literal">True</span>) <span class="keyword">and</span> dp(s1[i:], s2[i:], <span class="literal">True</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s1))) <span class="keyword">or</span> \  </span><br><span class="line">                   (rev <span class="keyword">and</span> dp(s1, s2[::<span class="number">-1</span>], <span class="keyword">not</span> rev))  </span><br><span class="line">        <span class="keyword">return</span> dp(s1, s2, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Count Different Palindromic Subsequences</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPalindromicSubsequences</span><span class="params">(self, S)</span>:</span>  </span><br><span class="line">        <span class="keyword">import</span> functools  </span><br><span class="line"><span class="meta">        @functools.lru_cache(None)  </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(start, end)</span>:</span>     <span class="comment">#returns the number of distinct palindromes in S[start:end]  </span></span><br><span class="line">            count = <span class="number">0</span>  </span><br><span class="line">            segment = S[start:end]  </span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcd'</span>:  </span><br><span class="line">                <span class="keyword">try</span>:  </span><br><span class="line">                    i = segment.index(x) + start  <span class="comment"># the starting index in S  </span></span><br><span class="line">                    j = segment.rindex(x) + start <span class="comment"># the ending index in S  </span></span><br><span class="line">                <span class="keyword">except</span>:  </span><br><span class="line">                    <span class="keyword">continue</span>  </span><br><span class="line">                count += dp(i+<span class="number">1</span>, j) + <span class="number">2</span> <span class="keyword">if</span> i != j <span class="keyword">else</span> <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">return</span> count % <span class="number">1000000007</span>  </span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, len(S))</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Minimum Cost Tree From Leaf Values</p><p><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/discuss/667294/Python-Concise-DP-Bottom-up-%2B-Top-down" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/discuss/667294/Python-Concise-DP-Bottom-up-%2B-Top-down</a></p></li></ol></li></ul><h3 id="Three-dimension"><a href="#Three-dimension" class="headerlink" title="Three dimension"></a>Three dimension</h3><ul><li><ol><li><p>Paint House III</p><p><a href="https://leetcode.com/problems/paint-house-iii/discuss/674485/Python-Solution" target="_blank" rel="noopener">https://leetcode.com/problems/paint-house-iii/discuss/674485/Python-Solution</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCost</span><span class="params">(self, houses: List[int], cost: List[List[int]], m: int, n: int, target: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Top down: Time O(m*n*t*n) Space O(m*n*t)  </span></span><br><span class="line"><span class="string">        dp = &#123;&#125;# idx, t, color  </span></span><br><span class="line"><span class="string">        def helper(x, t, c):  </span></span><br><span class="line"><span class="string">            if (x, t ,c) in dp: return dp[x, t, c]  </span></span><br><span class="line"><span class="string">            if x &lt; t or t &lt; 1 or x &lt; 0: return float('inf')  </span></span><br><span class="line"><span class="string">            my_cost = cost[x][c] if houses[x] == 0 else (0 if houses[x] == c+1 else float('inf'))  </span></span><br><span class="line"><span class="string">            if x == 0 and t == 1: return my_cost  </span></span><br><span class="line"><span class="string">            dp[x, t, c] = helper(x-1, t, c) + my_cost  </span></span><br><span class="line"><span class="string">            for i in range(n):  </span></span><br><span class="line"><span class="string">                if i == c: continue  </span></span><br><span class="line"><span class="string">                dp[x, t, c] = min(dp[x, t, c], helper(x-1, t-1, i)+my_cost)  </span></span><br><span class="line"><span class="string">            return dp[x, t, c]  </span></span><br><span class="line"><span class="string">        rst = min(helper(m-1, target, c) for c in range(n))  </span></span><br><span class="line"><span class="string">        return rst if rst != float('inf') else -1  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Bottom up: Time O(m*n*t*n) Space O(n*t)  </span></span><br><span class="line">        dp, ndp = &#123;(<span class="number">0</span>,<span class="number">0</span>): <span class="number">0</span>&#125;, &#123;&#125; <span class="comment"># (color, group)  </span></span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(houses):  </span><br><span class="line">            <span class="keyword">for</span> cc <span class="keyword">in</span> (range(<span class="number">1</span>, n+<span class="number">1</span>) <span class="keyword">if</span> c == <span class="number">0</span> <span class="keyword">else</span> [c]):  </span><br><span class="line">                <span class="keyword">for</span> c_prev, g_prev <span class="keyword">in</span> dp:  </span><br><span class="line">                    g_new = g_prev + (cc != c_prev)  </span><br><span class="line">                    <span class="keyword">if</span> g_new &gt; target: <span class="keyword">continue</span>  </span><br><span class="line">                    ndp[cc, g_new] = min(ndp.get((cc, g_new), float(<span class="string">'inf'</span>)), dp[c_prev, g_prev] + (cost[i][cc<span class="number">-1</span>] <span class="keyword">if</span> c == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>))  </span><br><span class="line">            dp, ndp = ndp, &#123;&#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> min([dp[c, g] <span class="keyword">for</span> c, g <span class="keyword">in</span> dp <span class="keyword">if</span> g == target] <span class="keyword">or</span> [<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>Recursive! Recursive! Recursive!  </p><h2 id="pre-in-post-order-traversal"><a href="#pre-in-post-order-traversal" class="headerlink" title="pre/in/post order traversal"></a>pre/in/post order traversal</h2><p><a href="https://yonglife.com/2019/05/04/binary-tree-traversal-updated/">https://yonglife.com/2019/05/04/binary-tree-traversal-updated/</a>  </p><h2 id="Recursive-to-Non-recursive"><a href="#Recursive-to-Non-recursive" class="headerlink" title="Recursive to Non-recursive"></a>Recursive to Non-recursive</h2><ul><li><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/discuss/721668/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">236. Lowest Common Ancestor of a Binary Tree</a>  </li><li><a href="[https://leetcode.com/problems/distribute-coins-in-binary-tree/discuss/719810/Python-Concise-Anyone-has-interest-in-non-recursive-implementation](https://leetcode.com/problems/distribute-coins-in-binary-tree/discuss/719810/Python-Concise-Anyone-has-interest-in-non-recursive-implementation">979. Distribute Coins in Binary Tree</a>)  </li><li><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/719519/python-concise-recursive-non-recursive" target="_blank" rel="noopener">297. Serialize and Deserialize Binary Tree</a>  </li><li><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/discuss/719416/python-concise-recursive-non-recursive" target="_blank" rel="noopener">108. Convert Sorted Array to Binary Search Tree</a>  </li><li><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/719653/Python-Concise-Recursive-%2B-Optimized-recursive-%2B-Non-recursive" target="_blank" rel="noopener">105. Construct Binary Tree from Preorder and Inorder Traversal</a>  </li></ul><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><ul><li><ol><li><p>Construct String from Binary Tree</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.  </span></span><br><span class="line"><span class="comment"># class TreeNode:  </span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):  </span></span><br><span class="line"><span class="comment">#         self.val = val  </span></span><br><span class="line"><span class="comment">#         self.left = left  </span></span><br><span class="line"><span class="comment">#         self.right = right  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tree2str</span><span class="params">(self, t: TreeNode)</span> -&gt; str:</span>  </span><br><span class="line">        <span class="keyword">if</span> t == <span class="literal">None</span>:  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>  </span><br><span class="line">        l, r = self.tree2str(t.left), self.tree2str(t.right)  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;t.val&#125;</span>'</span> + (<span class="string">f'(<span class="subst">&#123;l&#125;</span>)'</span> <span class="keyword">if</span> l <span class="keyword">or</span> r <span class="keyword">else</span> <span class="string">''</span>) + (<span class="string">f'(<span class="subst">&#123;r&#125;</span>)'</span> <span class="keyword">if</span> r <span class="keyword">else</span> <span class="string">''</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Same Tree</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Recursive: Time O(N) Space O(N)  </span></span><br><span class="line"><span class="string">        if not p and not q: return True  </span></span><br><span class="line"><span class="string">        if not (p and q and p.val == q.val): return False  </span></span><br><span class="line"><span class="string">        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Non-recursive: Time O(N) Space O(N)  </span></span><br><span class="line">        stack = []  </span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">or</span> q <span class="keyword">or</span> stack:  </span><br><span class="line">            <span class="keyword">while</span> p <span class="keyword">or</span> q:  </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ((p <span class="keyword">and</span> q) <span class="keyword">and</span> p.val == q.val): <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">                stack.append((p.right, q.right))  </span><br><span class="line">                p, q = p.left, q.left  </span><br><span class="line">            p, q = stack.pop()  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Symmetric Tree</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # Recursive  </span></span><br><span class="line"><span class="string">        def dfs(a, b):  </span></span><br><span class="line"><span class="string">            if ((a is None) ^ ( b is None)) or (a and a.val != b.val): return False  </span></span><br><span class="line"><span class="string">            if not a: return True  </span></span><br><span class="line"><span class="string">            return dfs(a.left, b.right) and dfs(a.right, b.left)  </span></span><br><span class="line"><span class="string">        return dfs(root.left, root.right) if root else True  </span></span><br><span class="line"><span class="string">        '''</span>  </span><br><span class="line">        <span class="comment"># Non-recursive  </span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">        stack = [(root.left, root.right)]  </span><br><span class="line">        <span class="keyword">while</span> stack:  </span><br><span class="line">            a, b = stack.pop()  </span><br><span class="line">            <span class="keyword">if</span> (a <span class="keyword">is</span> <span class="literal">None</span>) ^ (b <span class="keyword">is</span> <span class="literal">None</span>): <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">and</span> a.val != b.val: <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> a: <span class="keyword">continue</span>  </span><br><span class="line">              </span><br><span class="line">            stack.append((a.left, b.right))  </span><br><span class="line">            stack.append((a.right, b.left))  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Binary Search Tree Iterator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.  </span></span><br><span class="line"><span class="comment"># class TreeNode:  </span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):  </span></span><br><span class="line"><span class="comment">#         self.val = val  </span></span><br><span class="line"><span class="comment">#         self.left = left  </span></span><br><span class="line"><span class="comment">#         self.right = right  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span>:</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root: TreeNode)</span>:</span>  </span><br><span class="line">        self.stack = []  </span><br><span class="line">        self._next(root)  </span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_next</span><span class="params">(self, node)</span>:</span>  </span><br><span class="line">        <span class="keyword">while</span> node:  </span><br><span class="line">            self.stack.append(node)  </span><br><span class="line">            node = node.left  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="string">"""  </span></span><br><span class="line"><span class="string">        @return the next smallest number  </span></span><br><span class="line"><span class="string">        """</span>  </span><br><span class="line">        node = self.stack.pop()  </span><br><span class="line">        self._next(node.right)  </span><br><span class="line">        <span class="keyword">return</span> node.val  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="string">"""  </span></span><br><span class="line"><span class="string">        @return whether we have a next smallest number  </span></span><br><span class="line"><span class="string">        """</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Generate Parentheses</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n: int)</span> -&gt; List[str]:</span>  </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(l, r, s)</span>:</span>  </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l <span class="keyword">and</span> <span class="keyword">not</span> r:  </span><br><span class="line">                rst.append(s)  </span><br><span class="line">                <span class="keyword">return</span>  </span><br><span class="line">            <span class="keyword">if</span> l:  </span><br><span class="line">                dfs(l<span class="number">-1</span>, r, s+<span class="string">'('</span>)  </span><br><span class="line">            <span class="keyword">if</span> l &lt; r:  </span><br><span class="line">                dfs(l, r<span class="number">-1</span>, s+<span class="string">')'</span>)  </span><br><span class="line">        rst = []  </span><br><span class="line">        dfs(n, n, <span class="string">''</span>)  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Convert Sorted Array to Binary Search Tree</p><p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/discuss/719416/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/discuss/719416/Python-Concise-Recursive-%2B-Non-recursive</a></p></li></ol></li><li><ol><li><p>Construct Binary Tree from Preorder and Inorder Traversal</p><p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/719653/Python-Concise-Recursive-%2B-Optimized-recursive-%2B-Non-recursive" target="_blank" rel="noopener">https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/719653/Python-Concise-Recursive-%2B-Optimized-recursive-%2B-Non-recursive</a></p></li></ol></li><li><ol><li><p>Serialize and Deserialize Binary Tree</p><p><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/719519/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">https://leetcode.com/problems/serialize-and-deserialize-binary-tree/discuss/719519/Python-Concise-Recursive-%2B-Non-recursive</a></p></li></ol></li><li><ol><li><p>Remove Invalid Parentheses</p><p>DFS is simple. It is only the matter of how many unnecessary subtree we can cut.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeInvalidParentheses</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span>  </span><br><span class="line">        <span class="comment"># BFS Time: 2^N Space: 2^N  </span></span><br><span class="line">            l = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> s:  </span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">'('</span>:  </span><br><span class="line">                    l += <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">elif</span> c == <span class="string">')'</span>:  </span><br><span class="line">                    l -= <span class="number">1</span>  </span><br><span class="line">                <span class="keyword">if</span> l &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">            <span class="keyword">return</span> l == <span class="number">0</span>  </span><br><span class="line">        q, nq = [(s, <span class="number">0</span>)], []  </span><br><span class="line">        rst = []  </span><br><span class="line">        <span class="keyword">while</span> q:  </span><br><span class="line">            <span class="keyword">for</span> cur <span class="keyword">in</span> q:  </span><br><span class="line">                <span class="keyword">if</span> is_valid(cur[<span class="number">0</span>]):  </span><br><span class="line">                    rst.append(cur[<span class="number">0</span>])  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    s, cur_idx = cur  </span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(cur_idx, len(s)):  </span><br><span class="line">                        <span class="keyword">if</span> i == cur_idx <span class="keyword">or</span> s[i<span class="number">-1</span>] != s[i]:  </span><br><span class="line">                            nq.append((s[:i]+s[i+<span class="number">1</span>:], i))      </span><br><span class="line">            <span class="keyword">if</span> rst:  </span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line">            q, nq = nq, []  </span><br><span class="line">        <span class="keyword">return</span> rst  </span><br><span class="line"></span><br><span class="line">        <span class="string">'''  </span></span><br><span class="line"><span class="string">        # DFS Time: 2^N Space N  </span></span><br><span class="line"><span class="string">        rm_l, rm_r = 0, 0  </span></span><br><span class="line"><span class="string">        for c in s:  </span></span><br><span class="line"><span class="string">            if c == '(':  </span></span><br><span class="line"><span class="string">                rm_l += 1  </span></span><br><span class="line"><span class="string">            elif c == ')':  </span></span><br><span class="line"><span class="string">                if rm_l &gt; 0:  </span></span><br><span class="line"><span class="string">                    rm_l -= 1  </span></span><br><span class="line"><span class="string">                else:  </span></span><br><span class="line"><span class="string">                    rm_r += 1  </span></span><br><span class="line"><span class="string">        def dfs(cur, idx, rm_l, rm_r, l):  </span></span><br><span class="line"><span class="string">            if idx == len(s) or rm_l &lt; 0 or rm_r &lt; 0 or l &lt; 0:  </span></span><br><span class="line"><span class="string">                if rm_l == 0 and rm_r == 0 and l == 0:  </span></span><br><span class="line"><span class="string">                    rst.add(cur)  </span></span><br><span class="line"><span class="string">                return  </span></span><br><span class="line"><span class="string">            if s[idx] == '(':  </span></span><br><span class="line"><span class="string">                dfs(cur, idx+1, rm_l-1, rm_r, l)  </span></span><br><span class="line"><span class="string">                dfs(cur+s[idx], idx+1, rm_l, rm_r, l+1)  </span></span><br><span class="line"><span class="string">            elif s[idx] == ')':  </span></span><br><span class="line"><span class="string">                dfs(cur, idx+1, rm_l, rm_r-1, l)  </span></span><br><span class="line"><span class="string">                dfs(cur+s[idx], idx+1, rm_l, rm_r, l-1)  </span></span><br><span class="line"><span class="string">            else:  </span></span><br><span class="line"><span class="string">                dfs(cur+s[idx], idx+1, rm_l, rm_r, l)  </span></span><br><span class="line"><span class="string">        rst = set()  </span></span><br><span class="line"><span class="string">        dfs('', 0, rm_l, rm_r, 0)  </span></span><br><span class="line"><span class="string">        return list(rst) if rst else [""]  </span></span><br><span class="line"><span class="string">        '''</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li><p>Merge Two Binary Trees</p><p><a href="https://leetcode.com/problems/merge-two-binary-trees/discuss/718497/Python-Concise-Recursive-%2B-Non-recursive" target="_blank" rel="noopener">https://leetcode.com/problems/merge-two-binary-trees/discuss/718497/Python-Concise-Recursive-%2B-Non-recursive</a></p></li></ol></li></ul><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><ul><li><ol><li><p>Binary Tree Right Side View</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []  </span><br><span class="line">        q, nq, ret = deque([root]), deque(), [root.val]  </span><br><span class="line">        <span class="keyword">while</span> q:  </span><br><span class="line">            cur = q.popleft()  </span><br><span class="line">            <span class="keyword">if</span> cur.left: nq.append(cur.left)  </span><br><span class="line">            <span class="keyword">if</span> cur.right: nq.append(cur.right)  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> q <span class="keyword">and</span> nq:  </span><br><span class="line">                ret.append(nq[<span class="number">-1</span>].val)  </span><br><span class="line">                q, nq = nq, deque()  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>Remove Invalid Parentheses</li></ol></li><li><ol><li><p>Word Ladder II</p><p><a href="https://leetcode.com/problems/word-ladder-ii/discuss/269012/Python-BFS%2BBacktrack-Greatly-Improved-by-bi-directional-BFS" target="_blank" rel="noopener">https://leetcode.com/problems/word-ladder-ii/discuss/269012/Python-BFS%2BBacktrack-Greatly-Improved-by-bi-directional-BFS</a></p></li></ol></li><li><ol><li><p>Perfect Squares</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSquares</span><span class="params">(self, n: int)</span> -&gt; int:</span>  </span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>: <span class="keyword">return</span> n  </span><br><span class="line">        square_table = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(n**<span class="number">0.5</span>)+<span class="number">1</span>)]  </span><br><span class="line">        q, nq = [n], []  </span><br><span class="line">        rst = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> q:  </span><br><span class="line">            rst += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> q:  </span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> square_table:  </span><br><span class="line">                    <span class="keyword">if</span> i == x:  </span><br><span class="line">                        <span class="keyword">return</span> rst  </span><br><span class="line">                    <span class="keyword">elif</span> i &gt; x:  </span><br><span class="line">                        <span class="keyword">break</span>  </span><br><span class="line">                    nq.append(x-i)  </span><br><span class="line">            q, nq = nq, []  </span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><ul><li><ol><li><p>Search Suggestions System</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        self.words = []  </span><br><span class="line">        self.next = defaultdict(Node)  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">suggestedProducts</span><span class="params">(self, products: List[str], searchWord: str)</span> -&gt; List[List[str]]:</span>  </span><br><span class="line">        products = sorted(products)  </span><br><span class="line">        tries = Node()  </span><br><span class="line">        <span class="keyword">for</span> product <span class="keyword">in</span> products:  </span><br><span class="line">            cur = tries  </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> product:  </span><br><span class="line">                cur = cur.next[c]  </span><br><span class="line">                cur.words.append(product)  </span><br><span class="line">        ret, cur = [], tries  </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> searchWord:  </span><br><span class="line">            cur = cur.next[c]  </span><br><span class="line">            ret.append(cur.words[:<span class="number">3</span>])  </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h3><h3 id="Binary-Lifting"><a href="#Binary-Lifting" class="headerlink" title="Binary Lifting"></a>Binary Lifting</h3><ul><li><ol><li>Kth Ancestor of a Tree Node</li></ol></li></ul><h3 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary Index Tree"></a>Binary Index Tree</h3><blockquote><p>Wikipedia: A Fenwick tree or binary indexed tree is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers.  </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span>  </span><br><span class="line">        self.arr = [<span class="number">0</span>] * size  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, delta)</span>:</span>  </span><br><span class="line">        <span class="keyword">while</span> x &lt; len(self.arr):  </span><br><span class="line">            self.arr[x] += delta  </span><br><span class="line">            x += self._lowbit(x)  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(self, x)</span>:</span>  </span><br><span class="line">        ret = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> x:  </span><br><span class="line">            ret += self.arr[x]  </span><br><span class="line">            x -= self._lowbit(x)  </span><br><span class="line">        <span class="keyword">return</span> ret  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_lowbit</span><span class="params">(self, x)</span>:</span>  </span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x)</span><br></pre></td></tr></table></figure><ul><li><ol><li>Minimum Possible Integer After at Most K Adjacent Swaps On Digits</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 194</title>
      <link href="/2020/06/21/weekly-contest-194/"/>
      <url>/2020/06/21/weekly-contest-194/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 429 / 13808 😋</p></blockquote><h1 id="Q1-1486-XOR-Operation-in-an-Array"><a href="#Q1-1486-XOR-Operation-in-an-Array" class="headerlink" title="Q1. 1486. XOR Operation in an Array"></a>Q1. <a href="https://leetcode.com/problems/xor-operation-in-an-array/" target="_blank" rel="noopener">1486. XOR Operation in an Array</a></h1><blockquote><p>Given an integer n and an integer start.<br>Define an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length.<br>Return the bitwise XOR of all elements of nums.</p></blockquote><p>Very straight forward.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xorOperation</span><span class="params">(self, n: int, start: int)</span> -&gt; int:</span></span><br><span class="line">        arr = [start+<span class="number">2</span>*i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        rst = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> arr:</span><br><span class="line">            rst ^= a</span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1487-Making-File-Names-Unique"><a href="#Q2-1487-Making-File-Names-Unique" class="headerlink" title="Q2. 1487. Making File Names Unique"></a>Q2. <a href="https://leetcode.com/problems/making-file-names-unique/" target="_blank" rel="noopener">1487. Making File Names Unique</a></h1><blockquote><p>Too long. See description in link</p></blockquote><p>Code is easy. It might takes a while to understand the question.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFolderNames</span><span class="params">(self, names: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        rst = []</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">                rst.append(name)</span><br><span class="line">                d[name] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                suffix = d[name]</span><br><span class="line">                <span class="keyword">while</span> name+<span class="string">f'(<span class="subst">&#123;suffix&#125;</span>)'</span> <span class="keyword">in</span> d:</span><br><span class="line">                    suffix += <span class="number">1</span></span><br><span class="line">                d[name] = suffix + <span class="number">1</span></span><br><span class="line">                new_name = name + <span class="string">f'(<span class="subst">&#123;suffix&#125;</span>)'</span></span><br><span class="line">                rst.append(new_name)</span><br><span class="line">                d[new_name] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h1 id="Q3-1488-Avoid-Flood-in-The-City"><a href="#Q3-1488-Avoid-Flood-in-The-City" class="headerlink" title="Q3 1488. Avoid Flood in The City"></a>Q3 <a href="https://leetcode.com/problems/avoid-flood-in-the-city/" target="_blank" rel="noopener">1488. Avoid Flood in The City</a></h1><blockquote><p>Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.<br>Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.  </p><p>Given an integer array rains where:  d</p><ul><li>rains[i] &gt; 0 means there will be rains over the rains[i] lake.  </li><li>rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.</li></ul><p>Return an array ans where:  </p><ul><li>ans.length == rains.length . </li><li>ans[i] == -1 if rains[i] &gt; 0.   </li><li>ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.  </li></ul><p>If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.<br>Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)</p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ol><li>Failed 3 times to cover all corner cases.</li></ol><h2 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h2><ol><li>When there are no rains, append that day to a array. By nature, that array is sorted. </li><li>Using a dictionary to track which lack is full and when it was filled. {lack: day_it_get_filled}</li><li>When we found a lack is going to be flood, use binary search to find the earliest day we can use to dry that lake.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">avoidFlood</span><span class="params">(self, rains: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        rst = [<span class="number">-1</span>] * len(rains)</span><br><span class="line">        dry, full = [], &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, lack <span class="keyword">in</span> enumerate(rains):</span><br><span class="line">            <span class="keyword">if</span> lack &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> lack <span class="keyword">in</span> full:</span><br><span class="line">                    prev = full[lack]</span><br><span class="line">                    idx = bisect.bisect(dry, prev)</span><br><span class="line">                    <span class="keyword">if</span> idx &gt;= len(dry): <span class="keyword">return</span> []</span><br><span class="line">                    rst[dry[idx]] = lack</span><br><span class="line">                    <span class="keyword">del</span> dry[idx]</span><br><span class="line">                full[lack] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dry.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dry:</span><br><span class="line">            rst[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h1 id="Q4-1489-Find-Critical-and-Pseudo-Critical-Edges-in-Minimum-Spanning-Tree"><a href="#Q4-1489-Find-Critical-and-Pseudo-Critical-Edges-in-Minimum-Spanning-Tree" class="headerlink" title="Q4. 1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree"></a>Q4. <a href="https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/" target="_blank" rel="noopener">1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree</a></h1><blockquote><p>Too long. See description in link</p></blockquote><p>Such a nice question. I learnt a lot from this one.</p><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>Iterator each edge</p><pre><code>1. If the cost of MST without this edge increased, this is a critical edge . 2. elif the cost of MST without this edge does not change, this is a Pseudo-Critical edge</code></pre><h2 id="Minimal-Spanning-Tree"><a href="#Minimal-Spanning-Tree" class="headerlink" title="Minimal Spanning Tree"></a>Minimal Spanning Tree</h2><h3 id="Kruskal’s-algorithm"><a href="#Kruskal’s-algorithm" class="headerlink" title="Kruskal’s algorithm"></a>Kruskal’s algorithm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimal_spanning_tree</span><span class="params">(self, n: int, edges: List[List])</span> -&gt; List[List]:</span></span><br><span class="line">        <span class="comment"># Args:</span></span><br><span class="line">        <span class="comment">#   n: vertices 0, 1, 2, 3, ..... n-1</span></span><br><span class="line">        <span class="comment">#   edges: [edge, edge, edge, ...]</span></span><br><span class="line">        <span class="comment">#          edge = (from, to, weight)</span></span><br><span class="line">        arr = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> arr[x] != arr[arr[x]]: arr[x] = find(arr[x])</span><br><span class="line">            <span class="keyword">return</span> arr[x]</span><br><span class="line">            </span><br><span class="line">        edges = sorted(edges, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>])</span><br><span class="line">        ret = []</span><br><span class="line">        <span class="keyword">for</span> f, t, w <span class="keyword">in</span> edges:</span><br><span class="line">            rf, rt = find(f), find(t)</span><br><span class="line">            <span class="keyword">if</span> rf != rt:</span><br><span class="line">                arr[rf] = rt</span><br><span class="line">                ret.append((f, t, w))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret <span class="keyword">if</span> all(find(i)==find(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)) <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure><h3 id="Prim’s-algorithm"><a href="#Prim’s-algorithm" class="headerlink" title="Prim’s algorithm"></a>Prim’s algorithm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prim</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimal_spanning_tree</span><span class="params">(self, n: int, edges: List[List])</span> -&gt; List[List]:</span></span><br><span class="line">        <span class="comment"># Args:</span></span><br><span class="line">        <span class="comment">#   n: vertices 0, 1, 2, 3, ..... n-1</span></span><br><span class="line">        <span class="comment">#   edges: [edge, edge, edge, ...]</span></span><br><span class="line">        <span class="comment">#          edge = (from, to, weight)</span></span><br><span class="line">        graph = defaultdict(dict)</span><br><span class="line">        <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">            graph[u][v] = w</span><br><span class="line">            graph[v][u] = w</span><br><span class="line"></span><br><span class="line">        ret, pq = [], [(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>)]</span><br><span class="line">        visited = set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            w, u, v = heappop(pq)</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            visited.add(v)</span><br><span class="line">            ret.append((u, v, w))</span><br><span class="line">            <span class="keyword">for</span> vv, ww <span class="keyword">in</span> graph[v].items():</span><br><span class="line">                <span class="keyword">if</span> vv <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">                heappush(pq, (ww, v, vv))</span><br><span class="line">            <span class="keyword">if</span> len(visited) == n:</span><br><span class="line">                <span class="keyword">return</span> ret[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A decent implementation based on Kruskal's algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCriticalAndPseudoCriticalEdges</span><span class="params">(self, n: int, edges: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(arr, x)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> arr[x] != arr[arr[x]]: arr[x] = find(arr, arr[x])</span><br><span class="line">            <span class="keyword">return</span> arr[x]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mst</span><span class="params">(exclude_idx, pre_exist_idx)</span>:</span></span><br><span class="line">            cost, visited = <span class="number">0</span>, set()</span><br><span class="line">            arr = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">            <span class="keyword">if</span> pre_exist_idx != <span class="number">-1</span>:</span><br><span class="line">                f, t, w, _ = edges[pre_exist_idx]</span><br><span class="line">                cost += w</span><br><span class="line">                arr[f] = t</span><br><span class="line">            <span class="keyword">for</span> i, edge <span class="keyword">in</span> enumerate(edges):</span><br><span class="line">                f, t, w, _ = edge</span><br><span class="line">                <span class="keyword">if</span> i == exclude_idx: <span class="keyword">continue</span></span><br><span class="line">                rf, rt = find(arr, f), find(arr, t)</span><br><span class="line">                <span class="keyword">if</span> rf != rt:</span><br><span class="line">                    arr[rf] = rt</span><br><span class="line">                    cost += w</span><br><span class="line">            <span class="keyword">return</span> cost <span class="keyword">if</span> all(find(arr, i) == find(arr, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)) <span class="keyword">else</span> math.inf</span><br><span class="line">                </span><br><span class="line">        edges = sorted([edge+[i] <span class="keyword">for</span> i, edge <span class="keyword">in</span> enumerate(edges)], key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>])</span><br><span class="line">        best = mst(<span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        A, B = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(edges)):</span><br><span class="line">            <span class="keyword">if</span> mst(i, <span class="number">-1</span>) &gt; best:</span><br><span class="line">                A.append(edges[i][<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">elif</span> mst(<span class="number">-1</span>, i) == best:</span><br><span class="line">                B.append(edges[i][<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">return</span> [A, B]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCriticalAndPseudoCriticalEdges</span><span class="params">(self, n: int, edges: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mst</span><span class="params">(exclude_idx, pre_exist_idx)</span> -&gt; List[List]:</span></span><br><span class="line">            pq = []</span><br><span class="line">            visited, cost = set(), <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> pre_exist_idx == <span class="number">-1</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start = edges[pre_exist_idx][<span class="number">0</span>]</span><br><span class="line">            pq.append((<span class="number">0</span>, start, math.inf))</span><br><span class="line">            <span class="keyword">while</span> pq:</span><br><span class="line">                w, t, idx = heappop(pq)</span><br><span class="line">                <span class="keyword">if</span> t <span class="keyword">in</span> visited <span class="keyword">or</span> idx == exclude_idx: <span class="keyword">continue</span></span><br><span class="line">                visited.add(t)</span><br><span class="line">                cost += w</span><br><span class="line">                <span class="keyword">for</span> tt, ww, iidx <span class="keyword">in</span> adj[t]:</span><br><span class="line">                    <span class="keyword">if</span> tt <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> iidx == pre_exist_idx:</span><br><span class="line">                        cost += ww</span><br><span class="line">                        ww = <span class="number">0</span></span><br><span class="line">                    heappush(pq, (ww, tt, iidx))</span><br><span class="line">                <span class="keyword">if</span> len(visited) == n:</span><br><span class="line">                    <span class="keyword">return</span> cost</span><br><span class="line">            <span class="keyword">return</span> math.inf</span><br><span class="line">        <span class="comment"># Build adjacent dict </span></span><br><span class="line">        adj = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i, edge <span class="keyword">in</span> enumerate(edges):</span><br><span class="line">            f, t, w = edge</span><br><span class="line">            adj[f].append((t, w, i))</span><br><span class="line">            adj[t].append((f, w, i))</span><br><span class="line">        </span><br><span class="line">        best = mst(<span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># Main logic</span></span><br><span class="line">        A, B = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(edges)):</span><br><span class="line">            <span class="keyword">if</span> mst(i, <span class="number">-1</span>) &gt; best:</span><br><span class="line">                A.append(i)</span><br><span class="line">            <span class="keyword">elif</span> mst(<span class="number">-1</span>, i) == best:</span><br><span class="line">                B.append(i)</span><br><span class="line">        <span class="keyword">return</span> [A, B]</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul><li>OMG! I want to be as strong as <a href="https://www.youtube.com/watch?v=Ryrt3A0frRo&amp;t=1s" target="_blank" rel="noopener">Aoxiang Cui</a></li><li>Kruskal’s algorithm is easier to implement during contest/interview</li><li>Prim’s algorithm can be implemented with <code>heapq</code> in python. Red-Black tree is not needed.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Graph </tag>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Biweekly Contest 28</title>
      <link href="/2020/06/14/biweekly-contest-28/"/>
      <url>/2020/06/14/biweekly-contest-28/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 678 / 8571</p></blockquote><h1 id="Q1-1475-Final-Prices-With-a-Special-Discount-in-a-Shop"><a href="#Q1-1475-Final-Prices-With-a-Special-Discount-in-a-Shop" class="headerlink" title="Q1. 1475. Final Prices With a Special Discount in a Shop"></a>Q1. <a href="https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/" target="_blank" rel="noopener">1475. Final Prices With a Special Discount in a Shop</a></h1><blockquote><p>Given the array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop, if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j &gt; i and prices[j] &lt;= prices[i], otherwise, you will not receive any discount at all.<br>Return an array where the ith element is the final price you will pay for the ith item of the shop considering the special discount.</p></blockquote><p>Solved it by using brute force in contest. O(N^2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalPrices</span><span class="params">(self, prices: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        rst = []</span><br><span class="line">        <span class="keyword">for</span> i, price <span class="keyword">in</span> enumerate(prices):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(prices)):</span><br><span class="line">                <span class="keyword">if</span> prices[j] &lt;= price:</span><br><span class="line">                    rst.append(price-prices[j])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rst.append(price)</span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><ol><li>Subtract each value by next smaller number</li><li>Equivalent to subtract each value from all its previous greater number</li><li>Monotonic stack !!!</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalPrices</span><span class="params">(self, prices: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># Next smaller num</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(prices):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> prices[stack[<span class="number">-1</span>]] &gt;= v:</span><br><span class="line">                prices[stack.pop()] -= v</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> prices</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-1476-Subrectangle-Queries"><a href="#Q2-1476-Subrectangle-Queries" class="headerlink" title="Q2. 1476. Subrectangle Queries"></a>Q2. <a href="https://leetcode.com/problems/subrectangle-queries/" target="_blank" rel="noopener">1476. Subrectangle Queries</a></h1><blockquote><p>Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:  </p><ol><li>updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)<br>Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).</li><li>getValue(int row, int col)<br>Returns the current value of the coordinate (row,col) from the rectangle.</li></ol></blockquote><p>Solved it by using brute force in contest.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubrectangleQueries</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rectangle: List[List[int]])</span>:</span></span><br><span class="line">        self.M = rectangle</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateSubrectangle</span><span class="params">(self, row1: int, col1: int, row2: int, col2: int, newValue: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row1, row2+<span class="number">1</span>):</span><br><span class="line">            self.M[i][col1:col2+<span class="number">1</span>] = [newValue] * (col2-col1+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getValue</span><span class="params">(self, row: int, col: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.M[row][col]</span><br></pre></td></tr></table></figure><h2 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h2><ol><li>Value updates -&gt; Snapshot search</li><li>Share the same idea with <a href="https://leetcode.com/problems/snapshot-array/" target="_blank" rel="noopener">1146. Snapshot Array</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubrectangleQueries</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rectangle: List[List[int]])</span>:</span></span><br><span class="line">        self.M = copy.deepcopy(rectangle)</span><br><span class="line">        self.snapshot = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateSubrectangle</span><span class="params">(self, row1: int, col1: int, row2: int, col2: int, newValue: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.snapshot.append((row1, col1, row2, col2, newValue))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getValue</span><span class="params">(self, row: int, col: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> snapshot <span class="keyword">in</span> self.snapshot[::<span class="number">-1</span>]:</span><br><span class="line">            row1, col1, row2, col2, newValue = snapshot</span><br><span class="line">            <span class="keyword">if</span> row1 &lt;= row &lt;= row2 <span class="keyword">and</span> col1 &lt;= col &lt;= col2:</span><br><span class="line">                <span class="keyword">return</span> newValue</span><br><span class="line">        <span class="keyword">return</span> self.M[row][col]</span><br></pre></td></tr></table></figure><h1 id="Q3-1477-Find-Two-Non-overlapping-Sub-arrays-Each-With-Target-Sum"><a href="#Q3-1477-Find-Two-Non-overlapping-Sub-arrays-Each-With-Target-Sum" class="headerlink" title="Q3. 1477. Find Two Non-overlapping Sub-arrays Each With Target Sum"></a>Q3. <a href="https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/" target="_blank" rel="noopener">1477. Find Two Non-overlapping Sub-arrays Each With Target Sum</a></h1><blockquote><p>Given an array of integers arr and an integer target.<br>You have to find two non-overlapping sub-arrays of arr each with sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.<br>Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.</p></blockquote><h2 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h2><ol><li>Easy to find the shortest subarray with target sum </li><li>Iterate through each index and find the smallest length of valid subarray from left and right side</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSumOfLengths</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        len_l, len_r = [math.inf] * len(arr), [math.inf] * len(arr)</span><br><span class="line">        <span class="comment"># left</span></span><br><span class="line">        l, r, cur_sum, min_len = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, math.inf</span><br><span class="line">        <span class="keyword">while</span> r &lt; len(arr):</span><br><span class="line">            cur_sum += arr[r]</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> cur_sum &gt; target:</span><br><span class="line">                cur_sum -= arr[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cur_sum == target:</span><br><span class="line">                min_len = min(min_len, r-l)</span><br><span class="line">            len_l[r<span class="number">-1</span>] = min_len</span><br><span class="line">        <span class="comment"># right</span></span><br><span class="line">        l, r, cur_sum, min_len = len(arr)<span class="number">-1</span>, len(arr)<span class="number">-1</span>, <span class="number">0</span>, math.inf</span><br><span class="line">        <span class="keyword">while</span> l &gt;= <span class="number">0</span>:</span><br><span class="line">            cur_sum += arr[l]</span><br><span class="line">            l -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> cur_sum &gt; target:</span><br><span class="line">                cur_sum -= arr[r]</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cur_sum == target:</span><br><span class="line">                min_len = min(min_len, r-l)</span><br><span class="line">            len_r[l] = min_len</span><br><span class="line">        rst = min(len_l[i]+len_r[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(arr)<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">return</span> rst <span class="keyword">if</span> rst != math.inf <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="Cleaner-code"><a href="#Cleaner-code" class="headerlink" title="Cleaner code"></a>Cleaner code</h2><p>Add some DP thinking here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSumOfLengths</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        prefix = &#123;<span class="number">0</span>: <span class="number">-1</span>&#125;</span><br><span class="line">        best, bests, rst = math.inf, [math.inf] * len(arr), math.inf</span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(arr):</span><br><span class="line">            cur += v</span><br><span class="line">            <span class="keyword">if</span> cur - target <span class="keyword">in</span> prefix:</span><br><span class="line">                begin = prefix[cur-target]</span><br><span class="line">                <span class="keyword">if</span> begin &gt; <span class="number">-1</span>:</span><br><span class="line">                    rst = min(rst, i-begin + bests[begin])</span><br><span class="line">                best = min(best, i-begin)</span><br><span class="line">            bests[i] = best</span><br><span class="line">            prefix[cur] = i</span><br><span class="line">        <span class="keyword">return</span> rst <span class="keyword">if</span> rst != math.inf <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="Q4-FAILED-1478-Allocate-Mailboxes"><a href="#Q4-FAILED-1478-Allocate-Mailboxes" class="headerlink" title="Q4. [FAILED] 1478. Allocate Mailboxes"></a>Q4. [<strong>FAILED</strong>] <a href="https://leetcode.com/problems/allocate-mailboxes/" target="_blank" rel="noopener">1478. Allocate Mailboxes</a></h1><p>Directly heading to <code>3D</code> DP during contest which end up as <code>Time Limit Exceeded</code>.</p><h3 id="3D-DP-gt-TLE"><a href="#3D-DP-gt-TLE" class="headerlink" title="3D DP -&gt; TLE"></a>3D DP -&gt; TLE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, H: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">solve_it</span><span class="params">(l, r)</span>:</span></span><br><span class="line">            idx = H[(l+r)//<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">return</span> sum(abs(H[i]-idx) <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r))</span><br><span class="line">        <span class="keyword">if</span> k &gt;= len(H): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        H = sorted(H)</span><br><span class="line">        <span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">        @functools.lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(l, r, box)</span>:</span> <span class="comment"># return cost</span></span><br><span class="line">            <span class="keyword">if</span> l &gt;= r<span class="number">-1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> box == <span class="number">1</span>: <span class="keyword">return</span> solve_it(l, r)</span><br><span class="line">            rst = math.inf</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, box):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(l+<span class="number">1</span>, r):</span><br><span class="line">                    cost = dp(l, j, i) + dp(j, r, box-i)</span><br><span class="line">                    rst = min(rst, cost)</span><br><span class="line">            <span class="keyword">return</span> rst</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, len(H), k)</span><br></pre></td></tr></table></figure><h1 id="2D-DP"><a href="#2D-DP" class="headerlink" title="2D DP"></a>2D DP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, H: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">        @functools.lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">solve_it</span><span class="params">(l, r)</span>:</span></span><br><span class="line">            idx = H[(l+r)//<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">return</span> sum(abs(H[i]-idx) <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r))</span><br><span class="line">        <span class="keyword">if</span> k &gt;= len(H): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        H = sorted(H)</span><br><span class="line">        <span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">        @functools.lru_cache(None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(r, box)</span>:</span> <span class="comment"># return cost</span></span><br><span class="line">            <span class="keyword">if</span> r &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> box == <span class="number">1</span>: <span class="keyword">return</span> solve_it(<span class="number">0</span>, r)</span><br><span class="line">            <span class="keyword">return</span> min(dp(i, box<span class="number">-1</span>) + solve_it(i, r) <span class="keyword">for</span> i <span class="keyword">in</span> range(r))</span><br><span class="line">        <span class="keyword">return</span> dp(len(H), k)</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Try <code>monotonic stack / queue</code> when its related to <code>next/prev</code> <code>greater/smaller</code> element.</li><li>Try to record less status when a higher dimension DP is too slow.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly Contest 193</title>
      <link href="/2020/06/14/weekly-contest-193/"/>
      <url>/2020/06/14/weekly-contest-193/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ranking: 2148 / 13794 😭</p></blockquote><h1 id="Q1-5453-Running-Sum-of-1d-Array"><a href="#Q1-5453-Running-Sum-of-1d-Array" class="headerlink" title="Q1. 5453. Running Sum of 1d Array"></a>Q1. <a href="https://leetcode.com/problems/running-sum-of-1d-array/" target="_blank" rel="noopener">5453. Running Sum of 1d Array</a></h1><blockquote><p>Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).<br>Return the running sum of nums.</p></blockquote><p>Equivalent to compute prefix-sum.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runningSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        rst = [<span class="number">0</span>] * (len(nums)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            rst[i+<span class="number">1</span>] = rst[i] + v</span><br><span class="line">        <span class="keyword">return</span> rst[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Q2-5454-Least-Number-of-Unique-Integers-after-K-Removals"><a href="#Q2-5454-Least-Number-of-Unique-Integers-after-K-Removals" class="headerlink" title="Q2. 5454. Least Number of Unique Integers after K Removals"></a>Q2. <a href="https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/" target="_blank" rel="noopener">5454. Least Number of Unique Integers after K Removals</a></h1><blockquote><p>Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.</p></blockquote><p>Start removal from element with least frequency. The will maximum the unique characters we can remove.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLeastNumOfUniqueInts</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        c = Counter(arr)</span><br><span class="line">        rst = len(c)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sorted(c.keys(), key=<span class="keyword">lambda</span> x: c[x]):</span><br><span class="line">            <span class="keyword">if</span> c[i] &gt; k:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                k -= c[i]</span><br><span class="line">                rst -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h1 id="Q3-FAILED-5455-Minimum-Number-of-Days-to-Make-m-Bouquets"><a href="#Q3-FAILED-5455-Minimum-Number-of-Days-to-Make-m-Bouquets" class="headerlink" title="Q3.[FAILED] 5455. Minimum Number of Days to Make m Bouquets"></a>Q3.[<strong>FAILED</strong>] <a href="https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/" target="_blank" rel="noopener">5455. Minimum Number of Days to Make m Bouquets</a></h1><blockquote><p>click header to review question</p></blockquote><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ol><li>Spent a lot of time to understand the question. </li><li>Did not catch the requirement of <code>adjacent flowers</code> at the beginning.</li></ol><hr><p>Use binary search to guess answer when</p><ol><li>Answer is in a known range.</li><li>Easy to determine the correctness of a guess.</li><li>Each guess can reduce the range of answer. Most likely, the range looks like <code>[False, False, False, True, True]</code>.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDays</span><span class="params">(self, B: List[int], m: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ok</span><span class="params">(day)</span>:</span></span><br><span class="line">            fl, cnt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> B:</span><br><span class="line">                fl = fl + <span class="number">1</span> <span class="keyword">if</span> day &gt;= d <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> fl &gt;= k:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                    fl = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> cnt &gt;= m</span><br><span class="line"></span><br><span class="line">        l, r = min(B), max(B)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid = (l+r) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> ok(mid):</span><br><span class="line">                r = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l <span class="keyword">if</span> l &lt;= max(B) <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="Q4-FAILED-5456-Kth-Ancestor-of-a-Tree-Node"><a href="#Q4-FAILED-5456-Kth-Ancestor-of-a-Tree-Node" class="headerlink" title="Q4. [FAILED] 5456. Kth Ancestor of a Tree Node"></a>Q4. [<strong>FAILED</strong>] <a href="https://leetcode.com/problems/kth-ancestor-of-a-tree-node/" target="_blank" rel="noopener">5456. Kth Ancestor of a Tree Node</a></h1><blockquote><p>You are given a tree with n nodes numbered from 0 to n-1 in the form of a parent array where parent[i] is the parent of node i. The root of the tree is node 0.<br>Implement the function getKthAncestor(int node, int k) to return the k-th ancestor of the given node. If there is no such ancestor, return -1.<br>The k-th ancestor of a tree node is the k-th node in the path from that node to the root.</p></blockquote><h2 id="NEW-TECHNIQUE-Binary-Lifting"><a href="#NEW-TECHNIQUE-Binary-Lifting" class="headerlink" title="[NEW TECHNIQUE] Binary Lifting"></a>[NEW TECHNIQUE] Binary Lifting</h2><p>Binary Lifting is a <code>dynamic programming</code> approach where we pre-compute an array <code>memo[1, log(n)][1, n]</code> where <code>memo[i][j]</code> contains <code>2^i-th</code> ancestor of node <code>j</code>.</p><p><code>Binary Lifting</code> can also be used to solve <code>Lowest Common Ancestor of two nodes in a tree</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeAncestor</span>:</span></span><br><span class="line">    MAX_HEIGHT = <span class="number">16</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n: int, parent: List[int])</span>:</span></span><br><span class="line">        A, B = parent, [<span class="number">-1</span>] * len(parent)</span><br><span class="line">        self.memo = [A]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.MAX_HEIGHT):</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> range(len(parent)):</span><br><span class="line">                <span class="keyword">if</span> A[num] != <span class="number">-1</span>:</span><br><span class="line">                    B[num] = A[A[num]]</span><br><span class="line">            A, B = B, [<span class="number">-1</span>] * len(parent)</span><br><span class="line">            self.memo.append(A)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKthAncestor</span><span class="params">(self, node: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> level <span class="keyword">in</span> range(self.MAX_HEIGHT)[::<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> &lt;&lt; level) &lt;= k:</span><br><span class="line">                <span class="keyword">if</span> node == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                node = self.memo[level][node]</span><br><span class="line">                k -= (<span class="number">1</span> &lt;&lt; level)</span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ol><li>Ready question more carefully. Catch all requirement before coding.</li><li>Be more clear on when will <code>binary search</code> can be applied to <code>guess and find answer</code>. Be familiar with this tool.</li><li>Learnt new technique -  <code>Binary Lifting</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Contest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What-is-Kafka</title>
      <link href="/2019/09/02/What-is-Kafka/"/>
      <url>/2019/09/02/What-is-Kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="What-can-Kafka-do"><a href="#What-can-Kafka-do" class="headerlink" title="What can Kafka do?"></a>What can Kafka do?</h1><ul><li>Kafka as a Messaging System<ul><li>Combination of two traditional queuing systems<ul><li><code>queuing</code><br>  Scalable but not extendable. Data is gone after consumed</li><li><code>publish-subscribe</code><br>  Not scalable since every subscriber will receive a copy of new messages</li></ul></li><li>Provide string order guarantee <strong>in</strong> a partition<br>  YES, <strong>no</strong> global ordering across multiple partitions in a topic</li></ul></li><li>Kafka as a Storage System<ul><li>Data is written on disk and replicated for fault-tolerance</li><li>Provide write on acknowledgement</li><li>Perform the same whether the data is 50KB or 50TB</li></ul></li><li>Kafka for a Stream Processing<ul><li>Handling out-of-order data<ul><li>Use <code>event time</code> rather than <code>processing time</code> to provide a deterministic result</li></ul></li><li>Performing stateful computations<ul><li>uses Kafka for stateful storage</li></ul></li><li>Reprocessing input as code changes</li></ul></li></ul><a id="more"></a><h1 id="How-does-Kafka-provide-a-High-Available-system"><a href="#How-does-Kafka-provide-a-High-Available-system" class="headerlink" title="How does Kafka provide a High Available system?"></a>How does Kafka provide a High Available system?</h1><p>The total number of replicas including the leader constitute the <code>replication factor</code>.<br>All reads and writes go to the <strong>leader</strong> of the partition.</p><p>Kafka dynamically maintains a set of <code>in-sync replicas (ISR)</code> that are caught-up to the leader. Only members of this set are eligible for election as leader. A write to a Kafka partition is not considered committed until all in-sync replicas have received the write.</p><p>When writing to Kafka, producers can choose whether they wait for the message to be acknowledged by 0,1 or all (-1) replicas.</p><h2 id="Key-properties"><a href="#Key-properties" class="headerlink" title="Key properties"></a>Key properties</h2><table><thead><tr><th>property</th><th>Scope</th><th>usage</th></tr></thead><tbody><tr><td>replication.factor</td><td>broker, topic</td><td>The total number of replicas including the leader</td></tr><tr><td>min.insync.replicas</td><td>broker, topic</td><td>the minimum number of replicas that must acknowledge a write for the write to be considered successful</td></tr><tr><td>acks</td><td>producer</td><td>The number of acknowledgments the producer requires the leader to have received before considering a request complete</td></tr></tbody></table><h1 id="How-does-Kafka-scale"><a href="#How-does-Kafka-scale" class="headerlink" title="How does Kafka scale?"></a>How does Kafka scale?</h1><ul><li>Partitioning the log<ul><li>Multiple messages can be read/written concurrently using multiple partition on different broker</li></ul></li><li>Optimizing throughput by batching reads and writes<ul><li>Batching leads to larger network packets, larger sequential disk operations, contiguous memory blocks, and so on, all of which allows Kafka to turn a bursty stream of random message writes into linear writes that flow to the consumers.</li></ul></li><li>Avoiding needless data copies<ul><li><a href="https://developer.ibm.com/articles/j-zerocopy/" target="_blank" rel="noopener">zero-copy data transfer</a> which directly send data from disk to socket rather than moving data between <code>pagecache</code>, <code>application buffer</code> and <code>socket buffer</code></li></ul></li></ul><p>The cumulative effect of these optimizations is that you can usually write and read data at the rate supported by the disk or network, even while maintaining data sets that vastly exceed memory.</p><h1 id="What-is-Stream-Processing-and-Why"><a href="#What-is-Stream-Processing-and-Why" class="headerlink" title="What is Stream Processing and Why"></a>What is Stream Processing and Why</h1><p>I see stream processing as something much broader: infrastructure for continuous data processing. I think the computational model can be as general as MapReduce or other distributed processing frameworks, but with the ability to produce low-latency results.</p><ul><li>The real driver for the processing model is the method of data collection</li><li>A event driven based Stream Process system can produce low-latency result</li></ul><h1 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h1><ul><li>2015/03<br>At the busiest times of day, we are receiving over 13 million messages per second, or 2.75 gigabytes of data per second. To handle all these messages, LinkedIn runs over 1100 Kafka brokers organized into more than 60 clusters.</li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote><p><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener">https://kafka.apache.org/documentation/</a></p><p><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">The Log: What every software engineer should know about real-time data’s unifying abstraction</a></p><p><a href="https://insidebigdata.com/2018/04/12/developing-deeper-understanding-apache-kafka-architecture/" target="_blank" rel="noopener">Developing a Deeper Understanding of Apache Kafka Architecture</a></p><p><a href="https://insidebigdata.com/2018/04/19/developing-deeper-understanding-apache-kafka-architecture-part-2-write-read-scalability/" target="_blank" rel="noopener">Developing a Deeper Understanding of Apache Kafka Architecture Part 2: Write and Read Scalability</a></p><p><a href="https://www.youtube.com/watch?v=Z3JKCLG3VP4" target="_blank" rel="noopener">Intro to Streams | Apache Kafka® Streams API</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> Big Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extended Iterable Unpacking</title>
      <link href="/2019/07/02/Extended-Iterable-Unpacking/"/>
      <url>/2019/07/02/Extended-Iterable-Unpacking/</url>
      
        <content type="html"><![CDATA[<p>The following syntax looks very handy in many case. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.7</span><span class="number">.3</span> (default, Mar <span class="number">27</span> <span class="number">2019</span>, <span class="number">09</span>:<span class="number">23</span>:<span class="number">15</span>)</span><br><span class="line">[Clang <span class="number">10.0</span><span class="number">.1</span> (clang<span class="number">-1001.0</span><span class="number">.46</span><span class="number">.3</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>I can understand what does those code try to do easily. Yeah, this is the magic of Python. :-)<br>But I had a hard time to find the semantic explanation for the syntax.</p><p>I was thinking about   </p><ol><li><p><code>Arbitrary Argument Lists</code><br> But this is not function signature. And <code>Arbitrary Argument Lists</code> will construct <code>*args</code> as a <code>tuple</code> rather than a <code>list</code>.</p></li><li><p><code>Unpacking Argument Lists</code><br>As the name suggested, this syntax unpacking a list or tuple rather than create a new list.</p></li></ol><a id="more"></a><h2 id="Extended-Iterable-Unpacking"><a href="#Extended-Iterable-Unpacking" class="headerlink" title="Extended Iterable Unpacking"></a><a href="https://www.python.org/dev/peps/pep-3132/" target="_blank" rel="noopener">Extended Iterable Unpacking</a></h2><p>This is a new feature introduced in <code>Python 3.0</code></p><p>I believe the posted code is already explained the usage of this syntax. Find more details from <a href="https://www.python.org/dev/peps/pep-3132/" target="_blank" rel="noopener">PEP 3132</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Syntax sugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph topological sort</title>
      <link href="/2019/06/02/Graph-topological-sort/"/>
      <url>/2019/06/02/Graph-topological-sort/</url>
      
        <content type="html"><![CDATA[<p><code>topological ordering</code> is possible only if the graph is a DAG(Directed Acyclic Graph).</p><h2 id="Time-Complexity-V-E"><a href="#Time-Complexity-V-E" class="headerlink" title="Time Complexity: V + E"></a>Time Complexity: V + E</h2><ul><li>E is the number of edges</li><li>V is the number of vertices</li></ul><h2 id="Implementation-Kahn’s-Algorithm"><a href="#Implementation-Kahn’s-Algorithm" class="headerlink" title="Implementation (Kahn’s Algorithm)"></a>Implementation (Kahn’s Algorithm)</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topological_sort</span><span class="params">(vertices: int, edges: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        vertices: 0, 1, 2, .... , vertices-1</span></span><br><span class="line"><span class="string">        edges: (start, end, weight)</span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">        A valid topological ordering</span></span><br><span class="line"><span class="string">    Raise:</span></span><br><span class="line"><span class="string">        ValueError: if there is not a valid topological ordering.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># build graph</span></span><br><span class="line">    graph, indegrees = defaultdict(set), [<span class="number">0</span>] * vertices</span><br><span class="line">    <span class="keyword">for</span> (start, end, weight) <span class="keyword">in</span> edges:</span><br><span class="line">        graph[start].add(end)</span><br><span class="line">        indegrees[end] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># find vertices have zero indegree</span></span><br><span class="line">    zero_degrees = [vertex <span class="keyword">for</span> vertex, indegree <span class="keyword">in</span> enumerate(indegrees) <span class="keyword">if</span> indegree == <span class="number">0</span>]</span><br><span class="line">    ordering = []</span><br><span class="line">    <span class="keyword">while</span> zero_degrees:</span><br><span class="line">        vertex = zero_degrees.pop()</span><br><span class="line">        ordering.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> successor <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            indegrees[successor] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> indegrees[successor] == <span class="number">0</span>:</span><br><span class="line">                zero_degrees.append(successor)</span><br><span class="line">    <span class="keyword">if</span> len(ordering) != vertices:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'There is not a valid topological ordering'</span>)</span><br><span class="line">    <span class="keyword">return</span> ordering</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ordering = topological_sort(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]])</span><br><span class="line">print(<span class="string">'-&gt;'</span>.join([str(vertex) <span class="keyword">for</span> vertex <span class="keyword">in</span> ordering]))</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          +-+                  +-+</span><br><span class="line"> +-2-----&gt;+1|                  |4+&lt;--+</span><br><span class="line"> |        +++                  +++   |</span><br><span class="line">+++        |         +-+        ^    |</span><br><span class="line">|0|        +--3-----&gt;+3+----3---+    |</span><br><span class="line">+++                  +-+             |</span><br><span class="line"> |        +-+                        |</span><br><span class="line"> +--5----&gt;+2+----------------10------+</span><br><span class="line">          +-+</span><br><span class="line"></span><br><span class="line">0-&gt;2-&gt;1-&gt;3-&gt;4</span><br></pre></td></tr></table></figure><h2 id="Application-in-Shortest-Path-Finding"><a href="#Application-in-Shortest-Path-Finding" class="headerlink" title="Application in Shortest Path Finding"></a>Application in Shortest Path Finding</h2><p><code>topological sort</code> can also be used to find shortest path of a <code>DAG</code> in <strong>liner time</strong>.</p><p>Other algorithms for shortest path finding</p><ul><li><a href="/2019/06/01/Graph-Dijkstra/" title="Dijkstra">Dijkstra</a>  </li><li><a href="/2019/06/01/Graph-Bellman-Ford/" title="Bellman Ford">Bellman Ford</a></li></ul><h3 id="Time-Complexity-V-E-1"><a href="#Time-Complexity-V-E-1" class="headerlink" title="Time Complexity: V + E"></a>Time Complexity: V + E</h3><ul><li>E is the number of edges</li><li>V is the number of vertices</li></ul><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortest_path_finding</span><span class="params">(vertices: int, edges: List[List[int]], origin: int, destination: int)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    print shortest path from origin to destination</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        vertices: number of vertices. First vertex is 0.</span></span><br><span class="line"><span class="string">        edges: list of (start, end, weight)</span></span><br><span class="line"><span class="string">        origin: -</span></span><br><span class="line"><span class="string">        destination: -</span></span><br><span class="line"><span class="string">    Raise:</span></span><br><span class="line"><span class="string">        ValueError: if destination is not reachable from origin</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># build graph</span></span><br><span class="line">    graph = defaultdict(dict)</span><br><span class="line">    max_dist = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (start, end, weight) <span class="keyword">in</span> edges:</span><br><span class="line">        graph[start][end] = weight</span><br><span class="line">        max_dist += weight</span><br><span class="line">    <span class="comment"># takes V + E</span></span><br><span class="line">    ordering = topological_sort(vertices, edges)</span><br><span class="line">    <span class="comment"># remove most unreachable vertices</span></span><br><span class="line">    ordering = ordering[ordering.index(origin):]</span><br><span class="line">    <span class="comment"># prepare data</span></span><br><span class="line">    dist, predecessor = [max_dist+<span class="number">1</span>] * vertices, [<span class="literal">None</span>] * vertices</span><br><span class="line">    dist[origin] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># relax edges</span></span><br><span class="line">    <span class="keyword">for</span> vertex <span class="keyword">in</span> ordering:</span><br><span class="line">        <span class="keyword">for</span> successor <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="comment"># shorter path is found</span></span><br><span class="line">            <span class="keyword">if</span> dist[vertex] + graph[vertex][successor] &lt; dist[successor]:</span><br><span class="line">                dist[successor] = dist[vertex] + graph[vertex][successor]</span><br><span class="line">                predecessor[successor] = vertex</span><br><span class="line">    <span class="comment"># build path</span></span><br><span class="line">    cur, path = destination, []</span><br><span class="line">    <span class="keyword">while</span> cur != origin <span class="keyword">and</span> predecessor[cur] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        path.append(cur)</span><br><span class="line">        cur = predecessor[cur]</span><br><span class="line">    <span class="keyword">if</span> cur != origin:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'<span class="subst">&#123;destination&#125;</span> is not reachable from <span class="subst">&#123;origin&#125;</span>'</span>)</span><br><span class="line">    path = [origin] + path[::<span class="number">-1</span>]</span><br><span class="line">    print(<span class="string">'-&gt;'</span>.join([str(vertex) <span class="keyword">for</span> vertex <span class="keyword">in</span> path]))</span><br></pre></td></tr></table></figure><h3 id="Test-Case-1"><a href="#Test-Case-1" class="headerlink" title="Test Case"></a>Test Case</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          +-+                  +-+</span><br><span class="line"> +-2-----&gt;+1|                  |4+&lt;--+</span><br><span class="line"> |        +++                  +++   |</span><br><span class="line">+++        |         +-+        ^    |</span><br><span class="line">|0|        +--3-----&gt;+3+----3---+    |</span><br><span class="line">+++                  +-+             |</span><br><span class="line"> |        +-+                        |</span><br><span class="line"> +--5----&gt;+2+----------------10------+</span><br><span class="line">          +-+</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">testcases = [(<span class="number">0</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="keyword">for</span> testcase <span class="keyword">in</span> testcases:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        shortest_path_finding(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]], *testcase)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Not reachable'</span>)</span><br><span class="line">        </span><br><span class="line">0-&gt;1-&gt;3-&gt;4</span><br><span class="line">1-&gt;3-&gt;4</span><br><span class="line">Not reachable</span><br><span class="line">Not reachable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Graph </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bellman Ford</title>
      <link href="/2019/06/01/Graph-Bellman-Ford/"/>
      <url>/2019/06/01/Graph-Bellman-Ford/</url>
      
        <content type="html"><![CDATA[<p><code>Bellman-Ford Algorithm</code> is slower than <a href="/2019/06/01/Graph-Dijkstra/" title="Dijkstra">Dijkstra</a>. But it can handle graph contains a <strong>negative cycle</strong>.</p><h2 id="Time-Complexity-E-V"><a href="#Time-Complexity-E-V" class="headerlink" title="Time Complexity: E * V"></a>Time Complexity: E * V</h2><ul><li>E is the number of edges</li><li>V is the number of vertexs</li></ul><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bellman_ford</span><span class="params">(vertexs: int, edges: List[List[int]], origin: int, destination: int)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    print shortest path from origin to destination</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        vertexs: number of vertexs. First vertex is 0.</span></span><br><span class="line"><span class="string">        edges: list of (start, end, weight)</span></span><br><span class="line"><span class="string">        origin: -</span></span><br><span class="line"><span class="string">        destination: -</span></span><br><span class="line"><span class="string">    Raise:</span></span><br><span class="line"><span class="string">        ValueError: if destination is not reachable from origin</span></span><br><span class="line"><span class="string">                      or a negative cycle is found</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># prepare data</span></span><br><span class="line">    dist, prev = defaultdict(<span class="keyword">lambda</span>: math.inf), [<span class="literal">None</span>] * vertexs</span><br><span class="line">    dist[origin] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># relex edges</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(vertexs):</span><br><span class="line">        upd = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">            <span class="comment"># find a shorter path</span></span><br><span class="line">            <span class="keyword">if</span> dist[u] + w &lt; dist[v]:</span><br><span class="line">                dist[v] = dist[u] + w</span><br><span class="line">                prev[v] = u</span><br><span class="line">                upd += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> upd == <span class="number">0</span>: <span class="comment"># quick exit</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># check for negative cycle</span></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> dist[u] + w &lt; dist[v]:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Negative cycle is found'</span>)</span><br><span class="line">    <span class="comment"># build path</span></span><br><span class="line">    path, cur = [], destination</span><br><span class="line">    <span class="keyword">while</span> cur != origin <span class="keyword">and</span> prev[cur] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        path.append(cur)</span><br><span class="line">        cur = prev[cur]</span><br><span class="line">    <span class="keyword">if</span> cur != origin:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'<span class="subst">&#123;destination&#125;</span> is not reachable from <span class="subst">&#123;origin&#125;</span>'</span>)</span><br><span class="line">    path = [origin] + path[::<span class="number">-1</span>]</span><br><span class="line">    print(<span class="string">'-&gt;'</span>.join([str(vertex) <span class="keyword">for</span> vertex <span class="keyword">in</span> path]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># regular graph with negative weight</span></span><br><span class="line">bellman_ford(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>]], <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># negative cycle </span></span><br><span class="line">bellman_ford(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">-1</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">-1</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">-1</span>]], <span class="number">0</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">## Test Case</span><br></pre></td></tr></table></figure><h1 id="regular-graph-with-negative-weight"><a href="#regular-graph-with-negative-weight" class="headerlink" title="regular graph with negative weight"></a>regular graph with negative weight</h1><pre><code>+-+                  +-+</code></pre><p> +-2—–&gt;+1|                  |4+&lt;–+<br> |        +++                  +++   |<br>+++        |         +-+        ^    |<br>|0|        +–3—–&gt;+3+—(-1)-+    |<br>+++                  +-+             |<br> |        +-+                        |<br> +–5—-&gt;+2+—————-10——+<br>          +-+</p><h1 id="negative-cycle"><a href="#negative-cycle" class="headerlink" title="negative cycle"></a>negative cycle</h1><pre><code>+-+                  +-+</code></pre><p> +-2—–&gt;+1+&lt;——-(-1)——+4+&lt;–+<br> |        +++                  +++   |<br>+++        |         +-+        ^    |<br>|0|        +-(-1)—&gt;+3+—(-1)-+    |<br>+++                  +-+             |<br> |        +-+                        |<br> +–5—-&gt;+2+—————-10——+<br>          +-+</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Graph </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2019/06/01/Graph-Dijkstra/"/>
      <url>/2019/06/01/Graph-Dijkstra/</url>
      
        <content type="html"><![CDATA[<p><code>Dijkstra Algorithm</code> is the known <strong>fastest</strong> algorithm to find the <strong>shortest path</strong> in a graph with unbounded <strong>non-negative weights</strong>.</p><h2 id="Time-Complexity-E-V-log-V"><a href="#Time-Complexity-E-V-log-V" class="headerlink" title="Time Complexity: E + V*log(V)"></a>Time Complexity: <code>E + V*log(V)</code></h2><ul><li>E is the number of edges</li><li>V is the number of vertexs</li></ul><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(vertexs: int, edges: List[List[int]], origin: int, destination: int)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    print shortest path from origin to destination</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        vertexs: number of vertexs. First vertex is 0.</span></span><br><span class="line"><span class="string">        edges: list of (start, end, weight)</span></span><br><span class="line"><span class="string">        origin: -</span></span><br><span class="line"><span class="string">        destination: -</span></span><br><span class="line"><span class="string">    Raise:</span></span><br><span class="line"><span class="string">        ValueError: if destination is not reachable from origin</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    graph = defaultdict(dict)</span><br><span class="line">    <span class="comment"># build graph</span></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u][v] = w</span><br><span class="line">    <span class="comment"># prepare data</span></span><br><span class="line">    dist, prev = defaultdict(<span class="keyword">lambda</span>: math.inf), [<span class="literal">None</span>] * vertexs</span><br><span class="line">    dist[origin] = <span class="number">0</span></span><br><span class="line">    heap = [(<span class="number">0</span>, origin)]</span><br><span class="line">    <span class="comment"># relax edges</span></span><br><span class="line">    <span class="keyword">while</span> heap:</span><br><span class="line">        _, u = heapq.heappop(heap)</span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            <span class="comment"># if neighbor is not reachable or find a shorter path</span></span><br><span class="line">            <span class="keyword">if</span> dist[v] &gt; dist[u] + w:</span><br><span class="line">                dist[v] = dist[u] + w</span><br><span class="line">                prev[v] = u</span><br><span class="line">                heapq.heappush(heap, (dist[v], v))</span><br><span class="line">    <span class="comment"># build path</span></span><br><span class="line">    path, cur = [], destination</span><br><span class="line">    <span class="keyword">while</span> cur != origin <span class="keyword">and</span> prev[cur] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        path.append(cur)</span><br><span class="line">        cur = prev[cur]</span><br><span class="line">    <span class="keyword">if</span> cur != origin:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f'<span class="subst">&#123;destination&#125;</span> is not reachable from <span class="subst">&#123;origin&#125;</span>'</span>)</span><br><span class="line">    path = [origin] + path[::<span class="number">-1</span>]</span><br><span class="line">    print(<span class="string">'-&gt;'</span>.join([str(point) <span class="keyword">for</span> point <span class="keyword">in</span> path]))</span><br><span class="line"></span><br><span class="line">dijkstra(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]], <span class="number">0</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><a href="/2017/07/01/Dijkstra-C/" title="Dijkstra C++">Dijkstra C++</a><h2 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">          +-+                  +-+</span><br><span class="line"> +-2-----&gt;+1|                  |4+&lt;--+</span><br><span class="line"> |        +++                  +++   |</span><br><span class="line">+++        |         +-+        ^    |</span><br><span class="line">|0|        +--3-----&gt;+3+----3---+    |</span><br><span class="line">+++                  +-+             |</span><br><span class="line"> |        +-+                        |</span><br><span class="line"> +--5----&gt;+2+----------------10------+</span><br><span class="line">          +-+</span><br><span class="line"></span><br><span class="line">0-&gt;1-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Graph </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>binary tree traversal [updated]</title>
      <link href="/2019/05/04/binary-tree-traversal-updated/"/>
      <url>/2019/05/04/binary-tree-traversal-updated/</url>
      
        <content type="html"><![CDATA[<p>I wrote post <a href="/2017/01/28/Binary-Tree-Traversal/" title="Binary_Tree_Traversal">Binary_Tree_Traversal</a> around two years ago to help me remember how to traversal binary tree iteratively.<br>The solution in that post is quite simply. But I still have trouble to remember it since the code pattern is slight different within <code>preorder</code>, <code>inorder</code>, <code>postorder</code>.</p><p>Eventually, I rewrite the code using similar pattern in <code>python</code>.</p><h1 id="preorder"><a href="#preorder" class="headerlink" title="preorder"></a>preorder</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        rst, stack = [], []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                rst.append(cur.val)</span><br><span class="line">                stack.append(cur.right)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h1 id="inorder"><a href="#inorder" class="headerlink" title="inorder"></a>inorder</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        rst, stack = [], []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            rst.append(cur.val)</span><br><span class="line">            cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure><h1 id="postorder"><a href="#postorder" class="headerlink" title="postorder"></a>postorder</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        rst, stack = [], []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                cur = cur.left <span class="keyword">or</span> cur.right</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            rst.append(cur.val)</span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>].left == cur:</span><br><span class="line">                cur = stack[<span class="number">-1</span>].right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> rst</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS based button-up-parser</title>
      <link href="/2018/06/24/BFS-based-button-up-parser/"/>
      <url>/2018/06/24/BFS-based-button-up-parser/</url>
      
        <content type="html"><![CDATA[<h1 id="Bottom-Up-Parsing"><a href="#Bottom-Up-Parsing" class="headerlink" title="Bottom Up Parsing"></a>Bottom Up Parsing</h1><p><a href="https://github.com/gfxcc/parser/tree/master/bottom_up_parsing" target="_blank" rel="noopener">Source Code</a></p><h2 id="Chapter-7-1"><a href="#Chapter-7-1" class="headerlink" title="Chapter 7.1"></a>Chapter 7.1</h2><p>Simple C++ implementation of BFS based bottom up parser</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">» ./bin/buttomUpParser ../data/rules.dat</span><br><span class="line">S</span><br><span class="line">S -&gt; aaa</span><br><span class="line">S -&gt; Sab</span><br><span class="line">S -&gt; aSb</span><br><span class="line"></span><br><span class="line">input: aaaab</span><br><span class="line">2 valid solutions found</span><br><span class="line">aaaab --(S -&gt; aaa)-- Sab --(S -&gt; Sab)-- S</span><br><span class="line"></span><br><span class="line">aaaab --(S -&gt; aaa)-- aSb --(S -&gt; aSb)-- S</span><br><span class="line"></span><br><span class="line">-------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Parsing </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unger parser</title>
      <link href="/2018/01/14/unger-parser/"/>
      <url>/2018/01/14/unger-parser/</url>
      
        <content type="html"><![CDATA[<h2 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h2><p><a href="http://www.cs.nuim.ie/~jpower/Courses/Previous/parsing/node54.html" target="_blank" rel="noopener">Unger’s Method</a></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p>please find library <a href="https://github.com/gfxcc/ascii_tree" target="_blank" rel="noopener">ascii_tree</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unger.h</span></span><br><span class="line"><span class="comment">// Created by Yong Cao at Dec/22/2017</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ascii_tree.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unordered_map</span>;</span><br><span class="line"><span class="keyword">using</span> AsciiTree::Tree;</span><br><span class="line"><span class="keyword">using</span> AsciiTree::Node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parser</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Parser(<span class="keyword">const</span> <span class="built_in">string</span>&amp; grammar);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; pattern, <span class="keyword">const</span> <span class="built_in">string</span>&amp; input)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_grammar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----grammar------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; rule : grammar_) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; right : rule.second) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c -&gt; %s\n"</span>, rule.first, right.c_str());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; pattern, <span class="keyword">const</span> <span class="built_in">string</span>&amp; input, Node* node)</span></span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; grammar_;</span><br><span class="line">    Tree ptree_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rule</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> left;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; right;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unger.cpp</span></span><br><span class="line"><span class="comment">// Created by Yong Cao at Dec/22/2017</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unger.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Parser::Parser(<span class="keyword">const</span> <span class="built_in">string</span>&amp; grammar) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(grammar)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (getline(file, line)) &#123;</span><br><span class="line">        grammar_[line[<span class="number">0</span>]].push_back(line.substr(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Parser::parse</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; pattern, <span class="keyword">const</span> <span class="built_in">string</span>&amp; input)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ROOT:%s\n"</span>, pattern.c_str());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input:%s\n"</span>, input.c_str());</span><br><span class="line">    ptree_.reset();</span><br><span class="line">    ptree_.set_root(pattern);</span><br><span class="line">    <span class="keyword">bool</span> rc = parse(pattern, input, ptree_.get_root());</span><br><span class="line">    ptree_.print_tree();</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Parser::parse</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; pattern, <span class="keyword">const</span> <span class="built_in">string</span>&amp; input, Node* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pattern == input &amp;&amp; pattern.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//node-&gt;children.push_back(make_shared&lt;Node&gt;(pattern));</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pattern.size() &gt; input.size())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pattern.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; input_left : grammar_[pattern[<span class="number">0</span>]]) &#123;</span><br><span class="line">            node-&gt;children.push_back(make_shared&lt;Node&gt;(input_left));</span><br><span class="line">            <span class="keyword">if</span> (parse(input_left, input, node-&gt;children.back().get())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;children.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; input.size(); len++) &#123;</span><br><span class="line">        <span class="built_in">string</span> pattern_left = pattern.substr(<span class="number">0</span>, <span class="number">1</span>), pattern_remain = pattern.substr(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> input_left = input.substr(<span class="number">0</span>, len), input_remain = input.substr(len);</span><br><span class="line"></span><br><span class="line">        node-&gt;children.push_back(make_shared&lt;Node&gt;(pattern_left));</span><br><span class="line">        <span class="keyword">auto</span> ptr_left = node-&gt;children.back().get();</span><br><span class="line">        <span class="keyword">auto</span> ptr_right = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pattern_remain.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            node-&gt;children.push_back(make_shared&lt;Node&gt;(pattern_remain));</span><br><span class="line">            ptr_right = node-&gt;children.back().get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (parse(pattern_left, input_left, ptr_left) &amp;&amp;</span><br><span class="line">                parse(pattern_remain, input_remain, ptr_right)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pattern_remain.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            node-&gt;children.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;children.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="comment">// Created by Yong Cao at Dec/22/2017</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unger.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Parser <span class="title">parser</span><span class="params">(<span class="string">"../data/grammar.dat"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    parser.print_grammar();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"----parsing process----\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> input;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        parser.parse(<span class="string">"E"</span>, input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sample-output"><a href="#Sample-output" class="headerlink" title="Sample output"></a>Sample output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-----grammar------</span><br><span class="line">T -&gt; T*a</span><br><span class="line">T -&gt; a</span><br><span class="line">E -&gt; E+T</span><br><span class="line">E -&gt; T</span><br><span class="line">----parsing process----</span><br><span class="line">a+a*a*a+a+a</span><br><span class="line">ROOT:E</span><br><span class="line">input:a+a*a*a+a+a</span><br><span class="line">(E)</span><br><span class="line"> &#96;--(E+T)</span><br><span class="line">     &#96;--(E)</span><br><span class="line">     |   &#96;--(E+T)</span><br><span class="line">     |       &#96;--(E)</span><br><span class="line">     |       |   &#96;--(E+T)</span><br><span class="line">     |       |       &#96;--(E)</span><br><span class="line">     |       |       |   &#96;--(T)</span><br><span class="line">     |       |       |       &#96;--[a]</span><br><span class="line">     |       |       &#96;--[+]</span><br><span class="line">     |       |       &#96;--(T)</span><br><span class="line">     |       |           &#96;--(T*a)</span><br><span class="line">     |       |               &#96;--(T)</span><br><span class="line">     |       |               |   &#96;--(T*a)</span><br><span class="line">     |       |               |       &#96;--(T)</span><br><span class="line">     |       |               |       |   &#96;--[a]</span><br><span class="line">     |       |               |       &#96;--[*]</span><br><span class="line">     |       |               |       &#96;--[a]</span><br><span class="line">     |       |               &#96;--[*]</span><br><span class="line">     |       |               &#96;--[a]</span><br><span class="line">     |       &#96;--[+]</span><br><span class="line">     |       &#96;--(T)</span><br><span class="line">     |           &#96;--[a]</span><br><span class="line">     &#96;--[+]</span><br><span class="line">     &#96;--(T)</span><br><span class="line">         &#96;--[a]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Parsing </tag>
            
            <tag> Compiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fancy bash</title>
      <link href="/2017/07/22/fancy-bash/"/>
      <url>/2017/07/22/fancy-bash/</url>
      
        <content type="html"><![CDATA[<p>Given a formatted log file, find the top 3 most frequency command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;shell » cat input.txt                                                                                                               ubuntu@ip-172-31-17-20</span><br><span class="line">yong ls</span><br><span class="line">hao man</span><br><span class="line">yong cd</span><br><span class="line">yong cd</span><br><span class="line">yong grep</span><br><span class="line">yong ls</span><br><span class="line">yong ls</span><br><span class="line"></span><br><span class="line">~&#x2F;shell » sort -k 2,2 input.txt | cut -d &#39; &#39; -f 2 | uniq \</span><br><span class="line">| xargs -I&#123;&#125; sh -c &#39;echo -n &quot;&#123;&#125;\t&quot;; grep &#123;&#125; -c input.txt&#39; \</span><br><span class="line">| sort -r -k 2,2 | head -3</span><br><span class="line"></span><br><span class="line">ls3</span><br><span class="line">cd2</span><br><span class="line">man1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reservoir sampling-Algorithem R</title>
      <link href="/2017/07/21/Reservoir-sampling-Algorithem-R/"/>
      <url>/2017/07/21/Reservoir-sampling-Algorithem-R/</url>
      
        <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Reservoir_sampling" target="_blank" rel="noopener">Algorithm R</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Algorithm R </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;yong/head.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rand [low, high)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rand</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">func</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ret</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="comment">// fill reservior array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">      ret[i] = vec[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// replace element with gradually decreasing probability</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k, n = vec.size(); i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> val = Rand(<span class="number">0</span>, i);</span><br><span class="line">      <span class="keyword">if</span> (val &lt; k) &#123;</span><br><span class="line">        ret[val] = vec[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>text justification</title>
      <link href="/2017/07/02/text-justification/"/>
      <url>/2017/07/02/text-justification/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;yong/head.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Badness</span><span class="params">(<span class="keyword">int</span> page_width, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> width = accumulate(words.begin() + start, words.begin() + end, <span class="number">0</span>, [](<span class="keyword">int</span> a, <span class="built_in">string</span>&amp; b) &#123;</span><br><span class="line">          <span class="keyword">return</span> a + b.size() + <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">// not fit</span></span><br><span class="line">    <span class="keyword">if</span> (width &gt; page_width)</span><br><span class="line">      <span class="keyword">return</span> numeric_limits&lt;<span class="keyword">int</span>&gt;::max();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(page_width - width, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; split_points, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; memo, <span class="keyword">int</span> start, <span class="keyword">int</span> page_width)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[start] != <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span> memo[start];</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= words.size())</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> badness = numeric_limits&lt;<span class="keyword">int</span>&gt;::max(), split_point = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = start + <span class="number">1</span>; j &lt;= words.size(); j++) &#123;</span><br><span class="line">      <span class="comment">// avoid overflow</span></span><br><span class="line">      <span class="keyword">int</span> badness_j = Badness(page_width, words, start, j),</span><br><span class="line">          badness_suffix = helper(words, split_points, memo, j, page_width);</span><br><span class="line">      <span class="keyword">if</span> (numeric_limits&lt;<span class="keyword">int</span>&gt;::max() - badness_j &gt;= badness_suffix) &#123;</span><br><span class="line">        badness_j += badness_suffix;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        badness_j = numeric_limits&lt;<span class="keyword">int</span>&gt;::max();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// better split point</span></span><br><span class="line">      <span class="keyword">if</span> (badness_j &lt; badness) &#123;</span><br><span class="line">        split_point = j;</span><br><span class="line">        badness = badness_j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    split_points[start] = split_point;</span><br><span class="line">    <span class="keyword">return</span> memo[start] = badness;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">Justification</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="keyword">int</span> page_width)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">memo</span><span class="params">(words.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">split_points</span><span class="params">(words.size())</span></span>;</span><br><span class="line"></span><br><span class="line">    helper(words, split_points, memo, <span class="number">0</span>, page_width);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// build lines</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lines;</span><br><span class="line">    <span class="keyword">int</span> split = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (split != words.size()) &#123;</span><br><span class="line">      <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">line</span><span class="params">(words.begin() + split, words.begin() + split_points[split])</span></span>;</span><br><span class="line">      lines.push_back(move(line));</span><br><span class="line">      split = split_points[split];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lines;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra C++</title>
      <link href="/2017/07/01/Dijkstra-C/"/>
      <url>/2017/07/01/Dijkstra-C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Time: E + V * log(V)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;yong/head.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Graph(<span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&amp; edges, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; weights) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = edges.size(); i &lt; n; i++) &#123;</span><br><span class="line">      vertexs_.insert(edges[i].first);</span><br><span class="line">      vertexs_.insert(edges[i].second);</span><br><span class="line"></span><br><span class="line">      edges_[edges[i].first][edges[i].second] = weights[i];</span><br><span class="line">      edges_[edges[i].second][edges[i].first] = weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vector&lt;pair&lt;string, int&gt;&gt; FindPath(const string&amp; source, const string&amp; destination) &#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt;&gt; pq;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; dist;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; prev;</span><br><span class="line"></span><br><span class="line">    pq.push(&#123;<span class="number">0</span>, source&#125;);</span><br><span class="line">    dist[source] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pq.empty()) &#123;</span><br><span class="line">      <span class="built_in">string</span> u = pq.top().second;</span><br><span class="line"></span><br><span class="line">      pq.pop();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// update dist of vertex u 's neighbor</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> iter = edges_[u].begin(); iter != edges_[u].end(); iter++) &#123;</span><br><span class="line">        <span class="built_in">string</span> v = iter-&gt;first;</span><br><span class="line">        <span class="keyword">int</span> weight = iter-&gt;second;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dist.find(v) == dist.end() || dist[v] &gt; dist[u] + weight) &#123;</span><br><span class="line">          dist[v] = dist[u] + weight;</span><br><span class="line">          prev[v] = u;</span><br><span class="line">          pq.push(&#123;dist[v], v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate path</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; path;</span><br><span class="line">    <span class="built_in">string</span> cur = destination;</span><br><span class="line">    <span class="keyword">while</span> (cur != source) &#123;</span><br><span class="line">      <span class="keyword">int</span> dis = edges_[cur][prev[cur]];</span><br><span class="line">      path.emplace_back(make_pair(cur, dis));</span><br><span class="line">      cur = prev[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(path.begin(), path.end());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; source;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ele : path) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"--("</span> &lt;&lt; ele.second &lt;&lt; <span class="string">")--&gt;"</span> &lt;&lt; ele.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; edges_;</span><br><span class="line">  <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; vertexs_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">  vector&lt;pair&lt;string, string&gt;&gt; edges = &#123;&#123;"1", "3"&#125;, &#123;"1", "6"&#125;, &#123;"1", "2"&#125;,</span></span><br><span class="line"><span class="comment">    &#123;"6", "5"&#125;, &#123;"6", "3"&#125;, &#123;"5", "4"&#125;, &#123;"3", "4"&#125;, &#123;"3", "2"&#125;, &#123;"2", "4"&#125;&#125;;</span></span><br><span class="line"><span class="comment">  vector&lt;int&gt; weights = &#123;9, 14, 7, 9, 2, 6, 11, 10, 15&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Graph g(edges, weights);</span></span><br><span class="line"><span class="comment">  auto path = g.FindPath("1", "5");</span></span><br><span class="line"><span class="comment">  return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake Sample</title>
      <link href="/2017/06/09/CMake-Sample/"/>
      <url>/2017/06/09/CMake-Sample/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line"># Author: &lt;gfxcc_stevens@outlook.com&gt;</span><br><span class="line"># created: 2017-06-07</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 2.8.11)</span><br><span class="line"></span><br><span class="line"># In-source builds are disabled.</span><br><span class="line">if ($&#123;CMAKE_SOURCE_DIR&#125; STREQUAL $&#123;CMAKE_BINARY_DIR&#125;)</span><br><span class="line">    message(FATAL_ERROR</span><br><span class="line">        &quot;CMake generation is not possible within the source directory!&quot;</span><br><span class="line">        &quot;\n Remove the CMakeCache.txt file and try again from another folder, e.g.:&quot;</span><br><span class="line">        &quot;\n &quot;</span><br><span class="line">        &quot;\n rm CMakeCache.txt&quot;</span><br><span class="line">        &quot;\n mkdir build&quot;</span><br><span class="line">        &quot;\n cd build&quot;</span><br><span class="line">        &quot;\n cmake ..&quot;</span><br><span class="line">    )</span><br><span class="line">endif()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROJECT(analyze)</span><br><span class="line"></span><br><span class="line">MESSAGE(STATUS &quot;Project: $&#123;PROJECT_NAME&#125;&quot;)</span><br><span class="line"></span><br><span class="line">file(GLOB_RECURSE header $&#123;analyze_SOURCE_DIR&#125;&#x2F;src&#x2F;*.h)</span><br><span class="line">file(GLOB_RECURSE source $&#123;analyze_SOURCE_DIR&#125;&#x2F;src&#x2F;*.cc)</span><br><span class="line">#list(REMOVE_ITEM source $&#123;iShare_SOURCE_DIR&#125;&#x2F;MMGAPN&#x2F;feedback.cpp $&#123;iShare_SOURCE_DIR&#125;&#x2F;MMGAPN&#x2F;main.cpp)</span><br><span class="line"></span><br><span class="line">SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAGS &quot;-std&#x3D;c++11&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV&#123;CXXFLAGS&#125; -Wall -g -ggdb&quot;)</span><br><span class="line">SET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;)</span><br><span class="line">SET(CMAKE_C_COMPILER &#x2F;usr&#x2F;bin&#x2F;clang)</span><br><span class="line">SET(CMAKE_CXX_COMPILER &#x2F;usr&#x2F;bin&#x2F;clang++)</span><br><span class="line"></span><br><span class="line">include_directories(</span><br><span class="line">    &#x2F;usr&#x2F;include&#x2F;cppconn&#x2F;</span><br><span class="line">    &#x2F;usr&#x2F;local&#x2F;include&#x2F;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add_executable(analyze $&#123;source&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target_link_libraries(analyze</span><br><span class="line">    mysqlcppconn</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LevelDB Source Code Review---SkipList</title>
      <link href="/2017/06/01/LevelDB-Source-Code-Review-SkipList/"/>
      <url>/2017/06/01/LevelDB-Source-Code-Review-SkipList/</url>
      
        <content type="html"><![CDATA[<h3 id="SkipList-Seek-and-SkipList-Node"><a href="#SkipList-Seek-and-SkipList-Node" class="headerlink" title="SkipList::Seek and SkipList::Node"></a>SkipList::Seek and SkipList::Node</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="class"><span class="keyword">class</span> <span class="title">Comparator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">SkipList</span>&lt;Key,Comparator&gt;:</span>:Iterator::Seek(<span class="keyword">const</span> Key&amp; target) &#123;</span><br><span class="line">  node_ = list_-&gt;FindGreaterOrEqual(target, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="class"><span class="keyword">class</span> <span class="title">Comparator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">SkipList</span>&lt;Key,Comparator&gt;:</span>:Node* SkipList&lt;Key,Comparator&gt;::FindGreaterOrEqual(<span class="keyword">const</span> Key&amp; key, Node** prev)</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">  Node* x = head_;</span><br><span class="line">  <span class="keyword">int</span> level = GetMaxHeight() - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    Node* next = x-&gt;Next(level);</span><br><span class="line">    <span class="keyword">if</span> (KeyIsAfterNode(key, next)) &#123;</span><br><span class="line">      <span class="comment">// Keep searching in this list</span></span><br><span class="line">      x = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (prev != <span class="literal">NULL</span>) prev[level] = x;</span><br><span class="line">      <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Switch to next list</span></span><br><span class="line">        level--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation details follow</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="class"><span class="keyword">class</span> <span class="title">Comparator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">SkipList</span>&lt;Key,Comparator&gt;:</span>:Node &#123;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(<span class="keyword">const</span> Key&amp; k)</span> : <span class="title">key</span><span class="params">(k)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">  Key <span class="keyword">const</span> key;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Accessors/mutators for links.  Wrapped in methods so we can</span></span><br><span class="line">  <span class="comment">// add the appropriate barriers as necessary.</span></span><br><span class="line">  <span class="function">Node* <span class="title">Next</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Use an 'acquire load' so that we observe a fully initialized</span></span><br><span class="line">    <span class="comment">// version of the returned Node.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Node*&gt;(next_[n].Acquire_Load());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetNext</span><span class="params">(<span class="keyword">int</span> n, Node* x)</span> </span>&#123;</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Use a 'release store' so that anybody who reads through this</span></span><br><span class="line">    <span class="comment">// pointer observes a fully initialized version of the inserted node.</span></span><br><span class="line">    next_[n].Release_Store(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No-barrier variants that can be safely used in a few locations.</span></span><br><span class="line">  <span class="function">Node* <span class="title">NoBarrier_Next</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Node*&gt;(next_[n].NoBarrier_Load());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">NoBarrier_SetNext</span><span class="params">(<span class="keyword">int</span> n, Node* x)</span> </span>&#123;</span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);</span><br><span class="line">    next_[n].NoBarrier_Store(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Array of length equal to the node height.  next_[0] is lowest level link.</span></span><br><span class="line">  port::AtomicPointer next_[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LevelDB </tag>
            
            <tag> SourceCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LevelDB Source Code Review---Get</title>
      <link href="/2017/06/01/LevelDB-Source-Code-Review-Get/"/>
      <url>/2017/06/01/LevelDB-Source-Code-Review-Get/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="DB-Get"><a href="#DB-Get" class="headerlink" title="DB::Get"></a>DB::Get</h1><p><img src="/images/leveldb_writeflow.png" alt="prove"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DBImpl::Get</span><span class="params">(<span class="keyword">const</span> ReadOptions&amp; options,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> Slice&amp; key,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="built_in">std</span>::<span class="built_in">string</span>* value)</span> </span>&#123;</span><br><span class="line">  Status s;</span><br><span class="line">  <span class="function">MutexLock <span class="title">l</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">  SequenceNumber snapshot;</span><br><span class="line">  <span class="keyword">if</span> (options.snapshot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    snapshot = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> SnapshotImpl*&gt;(options.snapshot)-&gt;number_;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* what does versions_ do? */</span></span><br><span class="line">    snapshot = versions_-&gt;LastSequence();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MemTable* mem = mem_;</span><br><span class="line">  MemTable* imm = imm_;</span><br><span class="line">  Version* current = versions_-&gt;current();</span><br><span class="line">  mem-&gt;Ref();</span><br><span class="line">  <span class="keyword">if</span> (imm != <span class="literal">NULL</span>) imm-&gt;Ref();</span><br><span class="line">  current-&gt;Ref();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> have_stat_update = <span class="literal">false</span>;</span><br><span class="line">  Version::GetStats stats;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Unlock while reading from files and memtables</span></span><br><span class="line">  &#123;</span><br><span class="line">    mutex_.Unlock();</span><br><span class="line">    <span class="comment">// First look in the memtable, then in the immutable memtable (if any).</span></span><br><span class="line">    <span class="comment">/* Wrapping key into class LookupKey </span></span><br><span class="line"><span class="comment">     * check detail in the following content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">LookupKey <span class="title">lkey</span><span class="params">(key, snapshot)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (mem-&gt;Get(lkey, value, &amp;s)) &#123;</span><br><span class="line">      <span class="comment">// Done</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imm != <span class="literal">NULL</span> &amp;&amp; imm-&gt;Get(lkey, value, &amp;s)) &#123;</span><br><span class="line">      <span class="comment">// Done</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      s = current-&gt;Get(options, lkey, value, &amp;stats);</span><br><span class="line">      have_stat_update = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mutex_.Lock();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (have_stat_update &amp;&amp; current-&gt;UpdateStats(stats)) &#123;</span><br><span class="line">    MaybeScheduleCompaction();</span><br><span class="line">  &#125;</span><br><span class="line">  mem-&gt;Unref();</span><br><span class="line">  <span class="keyword">if</span> (imm != <span class="literal">NULL</span>) imm-&gt;Unref();</span><br><span class="line">  current-&gt;Unref();</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LookupKey::LookupKey(<span class="keyword">const</span> Slice&amp; user_key, SequenceNumber s) &#123;</span><br><span class="line">  <span class="keyword">size_t</span> usize = user_key.size();</span><br><span class="line">  <span class="keyword">size_t</span> needed = usize + <span class="number">13</span>;  <span class="comment">// A conservative estimate</span></span><br><span class="line">  <span class="keyword">char</span>* dst;</span><br><span class="line">  <span class="keyword">if</span> (needed &lt;= <span class="keyword">sizeof</span>(space_)) &#123;</span><br><span class="line">    dst = space_;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dst = <span class="keyword">new</span> <span class="keyword">char</span>[needed];</span><br><span class="line">  &#125;</span><br><span class="line">  start_ = dst;</span><br><span class="line">  <span class="comment">/* encode lenght of user_key into dst */</span></span><br><span class="line">  dst = EncodeVarint32(dst, usize + <span class="number">8</span>);</span><br><span class="line">  kstart_ = dst;</span><br><span class="line">  <span class="comment">/* copy content of user_key into dst */</span></span><br><span class="line">  <span class="built_in">memcpy</span>(dst, user_key.data(), usize);</span><br><span class="line">  dst += usize;</span><br><span class="line">  <span class="comment">/* Packse...&#123; (s &lt;&lt; 8) | kValueTypeForSeek &#125; </span></span><br><span class="line"><span class="comment">   * encode sequenceNumber into dst</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  EncodeFixed64(dst, PackSequenceAndType(s, kValueTypeForSeek));</span><br><span class="line">  dst += <span class="number">8</span>;</span><br><span class="line">  end_ = dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MemTable-Get"><a href="#MemTable-Get" class="headerlink" title="MemTable::Get"></a>MemTable::Get</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MemTable::Get</span><span class="params">(<span class="keyword">const</span> LookupKey&amp; key, <span class="built_in">std</span>::<span class="built_in">string</span>* value, Status* s)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* get key in format as </span></span><br><span class="line"><span class="comment">   * klength  varint32               &lt;-- start_</span></span><br><span class="line"><span class="comment">   * userkey  char[klength]          &lt;-- kstart_</span></span><br><span class="line"><span class="comment">   * tag      uint64</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Slice memkey = key.memtable_key();</span><br><span class="line">  <span class="comment">/* SkipList table_*/</span></span><br><span class="line">  <span class="function">Table::Iterator <span class="title">iter</span><span class="params">(&amp;table_)</span></span>;</span><br><span class="line">  iter.Seek(memkey.data());</span><br><span class="line">  <span class="keyword">if</span> (iter.Valid()) &#123;</span><br><span class="line">    <span class="comment">// entry format is:</span></span><br><span class="line">    <span class="comment">//    klength  varint32</span></span><br><span class="line">    <span class="comment">//    userkey  char[klength]</span></span><br><span class="line">    <span class="comment">//    tag      uint64</span></span><br><span class="line">    <span class="comment">//    vlength  varint32</span></span><br><span class="line">    <span class="comment">//    value    char[vlength]</span></span><br><span class="line">    <span class="comment">// Check that it belongs to same user key.  We do not check the</span></span><br><span class="line">    <span class="comment">// sequence number since the Seek() call above should have skipped</span></span><br><span class="line">    <span class="comment">// all entries with overly large sequence numbers.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* entry = iter.key();</span><br><span class="line">    <span class="keyword">uint32_t</span> key_length;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key_ptr = GetVarint32Ptr(entry, entry+<span class="number">5</span>, &amp;key_length);</span><br><span class="line">    <span class="keyword">if</span> (comparator_.comparator.user_comparator()-&gt;Compare(</span><br><span class="line">            Slice(key_ptr, key_length - <span class="number">8</span>),</span><br><span class="line">            key.user_key()) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Correct user key</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">uint64_t</span> tag = DecodeFixed64(key_ptr + key_length - <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">static_cast</span>&lt;ValueType&gt;(tag &amp; <span class="number">0xff</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> kTypeValue: &#123;</span><br><span class="line">          Slice v = GetLengthPrefixedSlice(key_ptr + key_length);</span><br><span class="line">          value-&gt;assign(v.data(), v.size());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> kTypeDeletion:</span><br><span class="line">          *s = Status::NotFound(Slice());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Version-Get"><a href="#Version-Get" class="headerlink" title="Version::Get()"></a>Version::Get()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Version::Get</span><span class="params">(<span class="keyword">const</span> ReadOptions&amp; options,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> LookupKey&amp; k,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="built_in">std</span>::<span class="built_in">string</span>* value,</span></span></span><br><span class="line"><span class="function"><span class="params">                    GetStats* stats)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* klength, userkey, tag(snapshot sequence) */</span></span><br><span class="line">  Slice ikey = k.internal_key();</span><br><span class="line">  <span class="comment">/* klength, userkey */</span></span><br><span class="line">  Slice user_key = k.user_key();</span><br><span class="line">  <span class="comment">/* generally, it is a comparator which comparator byte by byte */</span></span><br><span class="line">  <span class="keyword">const</span> Comparator* ucmp = vset_-&gt;icmp_.user_comparator();</span><br><span class="line">  Status s;</span><br><span class="line"></span><br><span class="line">  stats-&gt;seek_file = <span class="literal">NULL</span>;</span><br><span class="line">  stats-&gt;seek_file_level = <span class="number">-1</span>;</span><br><span class="line">  FileMetaData* last_file_read = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">int</span> last_file_read_level = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We can search level-by-level since entries never hop across</span></span><br><span class="line">  <span class="comment">// levels.  Therefore we are guaranteed that if we find data</span></span><br><span class="line">  <span class="comment">// in an smaller level, later levels are irrelevant.</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;FileMetaData*&gt; tmp;</span><br><span class="line">  FileMetaData* tmp2;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> level = <span class="number">0</span>; level &lt; config::kNumLevels; level++) &#123;</span><br><span class="line">    <span class="keyword">size_t</span> num_files = files_[level].size();</span><br><span class="line">    <span class="keyword">if</span> (num_files == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the list of files to search in this level</span></span><br><span class="line">    FileMetaData* <span class="keyword">const</span>* files = &amp;files_[level][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (level == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Level-0 files may overlap each other.  Find all files that</span></span><br><span class="line">      <span class="comment">// overlap user_key and process them in order from newest to oldest.</span></span><br><span class="line">      tmp.reserve(num_files);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; num_files; i++) &#123;</span><br><span class="line">        FileMetaData* f = files[i];</span><br><span class="line">        <span class="keyword">if</span> (ucmp-&gt;Compare(user_key, f-&gt;smallest.user_key()) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            ucmp-&gt;Compare(user_key, f-&gt;largest.user_key()) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          tmp.push_back(f);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tmp.empty()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">std</span>::sort(tmp.begin(), tmp.end(), NewestFirst);</span><br><span class="line">      files = &amp;tmp[<span class="number">0</span>];</span><br><span class="line">      num_files = tmp.size();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Binary search to find earliest index whose largest key &gt;= ikey.</span></span><br><span class="line">      <span class="keyword">uint32_t</span> index = FindFile(vset_-&gt;icmp_, files_[level], ikey);</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= num_files) &#123;</span><br><span class="line">        files = <span class="literal">NULL</span>;</span><br><span class="line">        num_files = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tmp2 = files[index];</span><br><span class="line">        <span class="keyword">if</span> (ucmp-&gt;Compare(user_key, tmp2-&gt;smallest.user_key()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// All of "tmp2" is past any data for user_key</span></span><br><span class="line">          files = <span class="literal">NULL</span>;</span><br><span class="line">          num_files = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          files = &amp;tmp2;</span><br><span class="line">          num_files = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; num_files; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (last_file_read != <span class="literal">NULL</span> &amp;&amp; stats-&gt;seek_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// We have had more than one seek for this read.  Charge the 1st file.</span></span><br><span class="line">        stats-&gt;seek_file = last_file_read;</span><br><span class="line">        stats-&gt;seek_file_level = last_file_read_level;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      FileMetaData* f = files[i];</span><br><span class="line">      last_file_read = f;</span><br><span class="line">      last_file_read_level = level;</span><br><span class="line"></span><br><span class="line">      Saver saver;</span><br><span class="line">      saver.state = kNotFound;</span><br><span class="line">      saver.ucmp = ucmp;</span><br><span class="line">      saver.user_key = user_key;</span><br><span class="line">      saver.value = value;</span><br><span class="line">      s = vset_-&gt;table_cache_-&gt;Get(options, f-&gt;number, f-&gt;file_size,</span><br><span class="line">                                   ikey, &amp;saver, SaveValue);</span><br><span class="line">      <span class="keyword">if</span> (!s.ok()) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span> (saver.state) &#123;</span><br><span class="line">        <span class="keyword">case</span> kNotFound:</span><br><span class="line">          <span class="keyword">break</span>;      <span class="comment">// Keep searching in other files</span></span><br><span class="line">        <span class="keyword">case</span> kFound:</span><br><span class="line">          <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">case</span> kDeleted:</span><br><span class="line">          s = Status::NotFound(Slice());  <span class="comment">// Use empty error message for speed</span></span><br><span class="line">          <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">case</span> kCorrupt:</span><br><span class="line">          s = Status::Corruption(<span class="string">"corrupted key for "</span>, user_key);</span><br><span class="line">          <span class="keyword">return</span> s;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Status::NotFound(Slice());  <span class="comment">// Use an empty error message for speed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LevelDB </tag>
            
            <tag> SourceCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LevelDB Source Code Review---Compact</title>
      <link href="/2017/05/31/LevelDB-Source-Code-Review-Compact/"/>
      <url>/2017/05/31/LevelDB-Source-Code-Review-Compact/</url>
      
        <content type="html"><![CDATA[<h3 id="DBImpl-MakeRoomForWrite"><a href="#DBImpl-MakeRoomForWrite" class="headerlink" title="DBImpl::MakeRoomForWrite()"></a>DBImpl::MakeRoomForWrite()</h3><blockquote><ol><li><a href="https://github.com/google/leveldb/blob/master/db/db_impl.cc" target="_blank" rel="noopener">db/db_impl.cc</a></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REQUIRES: mutex_ is held</span></span><br><span class="line"><span class="comment">// REQUIRES: this thread is currently at the front of the writer queue</span></span><br><span class="line"><span class="function">Status <span class="title">DBImpl::MakeRoomForWrite</span><span class="params">(<span class="keyword">bool</span> force)</span> </span>&#123;</span><br><span class="line">  mutex_.AssertHeld();</span><br><span class="line">  assert(!writers_.empty());</span><br><span class="line">  <span class="keyword">bool</span> allow_delay = !force;</span><br><span class="line">  Status s;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Watch out! We went into a while loop */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">/* ??? */</span></span><br><span class="line">    <span class="keyword">if</span> (!bg_error_.ok()) &#123;</span><br><span class="line">      <span class="comment">// Yield previous error</span></span><br><span class="line">      s = bg_error_;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        allow_delay &amp;&amp;</span><br><span class="line">        versions_-&gt;NumLevelFiles(<span class="number">0</span>) &gt;= config::kL0_SlowdownWritesTrigger) &#123;</span><br><span class="line">      <span class="comment">/* Just as official comment said, number of table </span></span><br><span class="line"><span class="comment">       * files level0 hit the limit</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// We are getting close to hitting a hard limit on the number of</span></span><br><span class="line">      <span class="comment">// L0 files.  Rather than delaying a single write by several</span></span><br><span class="line">      <span class="comment">// seconds when we hit the hard limit, start delaying each</span></span><br><span class="line">      <span class="comment">// individual write by 1ms to reduce latency variance.  Also,</span></span><br><span class="line">      <span class="comment">// this delay hands over some CPU to the compaction thread in</span></span><br><span class="line">      <span class="comment">// case it is sharing the same core as the writer.</span></span><br><span class="line">      mutex_.Unlock();</span><br><span class="line">      env_-&gt;SleepForMicroseconds(<span class="number">1000</span>);</span><br><span class="line">      allow_delay = <span class="literal">false</span>;  <span class="comment">// Do not delay a single write more than once</span></span><br><span class="line">      mutex_.Lock();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!force &amp;&amp;</span><br><span class="line">               (mem_-&gt;ApproximateMemoryUsage() &lt;= options_.write_buffer_size)) &#123;</span><br><span class="line">      <span class="comment">/* we need space, we have space. Sound good</span></span><br><span class="line"><span class="comment">       * At the same time, !force == true means we do </span></span><br><span class="line"><span class="comment">       * have to compact files, just return</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// There is room in current memtable</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imm_ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// We have filled up the current memtable, but the previous</span></span><br><span class="line">      <span class="comment">// one is still being compacted, so we wait.</span></span><br><span class="line">      <span class="comment">/* We can conduct deduce that imm_ == NULL when compacting </span></span><br><span class="line"><span class="comment">       * memtable</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      Log(options_.info_log, <span class="string">"Current memtable full; waiting...\n"</span>);</span><br><span class="line">      bg_cv_.Wait();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (versions_-&gt;NumLevelFiles(<span class="number">0</span>) &gt;= config::kL0_StopWritesTrigger) &#123;</span><br><span class="line">      <span class="comment">// There are too many level-0 files.</span></span><br><span class="line">      <span class="comment">/* Who gonna handl this ? */</span></span><br><span class="line">      Log(options_.info_log, <span class="string">"Too many L0 files; waiting...\n"</span>);</span><br><span class="line">      bg_cv_.Wait();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Attempt to switch to a new memtable and trigger compaction of old</span></span><br><span class="line">      assert(versions_-&gt;PrevLogNumber() == <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">uint64_t</span> new_log_number = versions_-&gt;NewFileNumber();</span><br><span class="line">      WritableFile* lfile = <span class="literal">NULL</span>;</span><br><span class="line">      s = env_-&gt;NewWritableFile(LogFileName(dbname_, new_log_number), &amp;lfile);</span><br><span class="line">      <span class="keyword">if</span> (!s.ok()) &#123;</span><br><span class="line">        <span class="comment">// Avoid chewing through file number space in a tight loop.</span></span><br><span class="line">        versions_-&gt;ReuseFileNumber(new_log_number);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> log_;</span><br><span class="line">      <span class="keyword">delete</span> logfile_;</span><br><span class="line">      logfile_ = lfile;</span><br><span class="line">      logfile_number_ = new_log_number;</span><br><span class="line">      log_ = <span class="keyword">new</span> <span class="built_in">log</span>::Writer(lfile);</span><br><span class="line">      imm_ = mem_;</span><br><span class="line">      has_imm_.Release_Store(imm_);</span><br><span class="line">      mem_ = <span class="keyword">new</span> MemTable(internal_comparator_);</span><br><span class="line">      mem_-&gt;Ref();</span><br><span class="line">      force = <span class="literal">false</span>;   <span class="comment">// Do not force another compaction if have room</span></span><br><span class="line">      MaybeScheduleCompaction();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DBImpl-MaybeScheduleCompaction"><a href="#DBImpl-MaybeScheduleCompaction" class="headerlink" title="DBImpl::MaybeScheduleCompaction()"></a>DBImpl::MaybeScheduleCompaction()</h4><blockquote><ol><li><a href="https://github.com/google/leveldb/blob/master/db/db_impl.cc" target="_blank" rel="noopener">db/db_impl.cc</a>  </li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBImpl::MaybeScheduleCompaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mutex_.AssertHeld();</span><br><span class="line">  <span class="keyword">if</span> (bg_compaction_scheduled_) &#123;</span><br><span class="line">    <span class="comment">// Already scheduled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shutting_down_.Acquire_Load()) &#123;</span><br><span class="line">    <span class="comment">// DB is being deleted; no more background compactions</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!bg_error_.ok()) &#123;</span><br><span class="line">    <span class="comment">// Already got an error; no more changes</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imm_ == <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">             manual_compaction_ == <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">             !versions_-&gt;NeedsCompaction()) &#123;</span><br><span class="line">    <span class="comment">// No work to be done</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bg_compaction_scheduled_ = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/* levelDB embeded coruntime */</span></span><br><span class="line">    env_-&gt;Schedule(&amp;DBImpl::BGWork, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DBImpl-BGWork"><a href="#DBImpl-BGWork" class="headerlink" title="DBImpl::BGWork()"></a>DBImpl::BGWork()</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBImpl::BGWork</span><span class="params">(<span class="keyword">void</span>* db)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">reinterpret_cast</span>&lt;DBImpl*&gt;(db)-&gt;BackgroundCall();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBImpl::BackgroundCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">MutexLock <span class="title">l</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">  assert(bg_compaction_scheduled_);</span><br><span class="line">  <span class="keyword">if</span> (shutting_down_.Acquire_Load()) &#123;</span><br><span class="line">    <span class="comment">// No more background work when shutting down.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!bg_error_.ok()) &#123;</span><br><span class="line">    <span class="comment">// No more background work after a background error.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    BackgroundCompaction();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bg_compaction_scheduled_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Previous compaction may have produced too many files in a level,</span></span><br><span class="line">  <span class="comment">// so reschedule another compaction if needed.</span></span><br><span class="line">  MaybeScheduleCompaction();</span><br><span class="line">  bg_cv_.SignalAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###### </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBImpl::BackgroundCompaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mutex_.AssertHeld();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (imm_ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    CompactMemTable();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Compaction* c;</span><br><span class="line">  <span class="keyword">bool</span> is_manual = (manual_compaction_ != <span class="literal">NULL</span>);</span><br><span class="line">  InternalKey manual_end;</span><br><span class="line">  <span class="keyword">if</span> (is_manual) &#123;</span><br><span class="line">    ManualCompaction* m = manual_compaction_;</span><br><span class="line">    c = versions_-&gt;CompactRange(m-&gt;level, m-&gt;begin, m-&gt;end);</span><br><span class="line">    m-&gt;done = (c == <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      manual_end = c-&gt;input(<span class="number">0</span>, c-&gt;num_input_files(<span class="number">0</span>) - <span class="number">1</span>)-&gt;largest;</span><br><span class="line">    &#125;</span><br><span class="line">    Log(options_.info_log,</span><br><span class="line">        <span class="string">"Manual compaction at level-%d from %s .. %s; will stop at %s\n"</span>,</span><br><span class="line">        m-&gt;level,</span><br><span class="line">        (m-&gt;begin ? m-&gt;begin-&gt;DebugString().c_str() : <span class="string">"(begin)"</span>),</span><br><span class="line">        (m-&gt;end ? m-&gt;end-&gt;DebugString().c_str() : <span class="string">"(end)"</span>),</span><br><span class="line">        (m-&gt;done ? <span class="string">"(end)"</span> : manual_end.DebugString().c_str()));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    c = versions_-&gt;PickCompaction();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Status status;</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// Nothing to do</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!is_manual &amp;&amp; c-&gt;IsTrivialMove()) &#123;</span><br><span class="line">    <span class="comment">// Move file to next level</span></span><br><span class="line">    assert(c-&gt;num_input_files(<span class="number">0</span>) == <span class="number">1</span>);</span><br><span class="line">    FileMetaData* f = c-&gt;input(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    c-&gt;edit()-&gt;DeleteFile(c-&gt;level(), f-&gt;number);</span><br><span class="line">    c-&gt;edit()-&gt;AddFile(c-&gt;level() + <span class="number">1</span>, f-&gt;number, f-&gt;file_size,</span><br><span class="line">                       f-&gt;smallest, f-&gt;largest);</span><br><span class="line">    status = versions_-&gt;LogAndApply(c-&gt;edit(), &amp;mutex_);</span><br><span class="line">    <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">      RecordBackgroundError(status);</span><br><span class="line">    &#125;</span><br><span class="line">    VersionSet::LevelSummaryStorage tmp;</span><br><span class="line">    Log(options_.info_log, <span class="string">"Moved #%lld to level-%d %lld bytes %s: %s\n"</span>,</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt;(f-&gt;number),</span><br><span class="line">        c-&gt;level() + <span class="number">1</span>,</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt;(f-&gt;file_size),</span><br><span class="line">        status.ToString().c_str(),</span><br><span class="line">        versions_-&gt;LevelSummary(&amp;tmp));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    CompactionState* compact = <span class="keyword">new</span> CompactionState(c);</span><br><span class="line">    status = DoCompactionWork(compact);</span><br><span class="line">    <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">      RecordBackgroundError(status);</span><br><span class="line">    &#125;</span><br><span class="line">    CleanupCompaction(compact);</span><br><span class="line">    c-&gt;ReleaseInputs();</span><br><span class="line">    DeleteObsoleteFiles();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status.ok()) &#123;</span><br><span class="line">    <span class="comment">// Done</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shutting_down_.Acquire_Load()) &#123;</span><br><span class="line">    <span class="comment">// Ignore compaction errors found during shutting down</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log(options_.info_log,</span><br><span class="line">        <span class="string">"Compaction error: %s"</span>, status.ToString().c_str());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is_manual) &#123;</span><br><span class="line">    ManualCompaction* m = manual_compaction_;</span><br><span class="line">    <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">      m-&gt;done = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!m-&gt;done) &#123;</span><br><span class="line">      <span class="comment">// We only compacted part of the requested range.  Update *m</span></span><br><span class="line">      <span class="comment">// to the range that is left to be compacted.</span></span><br><span class="line">      m-&gt;tmp_storage = manual_end;</span><br><span class="line">      m-&gt;begin = &amp;m-&gt;tmp_storage;</span><br><span class="line">    &#125;</span><br><span class="line">    manual_compaction_ = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####### DBImpl::CompactMemTable()<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DBImpl::CompactMemTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mutex_.AssertHeld();</span><br><span class="line">  assert(imm_ != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Save the contents of the memtable as a new Table</span></span><br><span class="line">  VersionEdit edit;</span><br><span class="line">  Version* base = versions_-&gt;current();</span><br><span class="line">  base-&gt;Ref();</span><br><span class="line">  Status s = WriteLevel0Table(imm_, &amp;edit, base);</span><br><span class="line">  base-&gt;Unref();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s.ok() &amp;&amp; shutting_down_.Acquire_Load()) &#123;</span><br><span class="line">    s = Status::IOError(<span class="string">"Deleting DB during memtable compaction"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Replace immutable memtable with the generated Table</span></span><br><span class="line">  <span class="keyword">if</span> (s.ok()) &#123;</span><br><span class="line">    edit.SetPrevLogNumber(<span class="number">0</span>);</span><br><span class="line">    edit.SetLogNumber(logfile_number_);  <span class="comment">// Earlier logs no longer needed</span></span><br><span class="line">    s = versions_-&gt;LogAndApply(&amp;edit, &amp;mutex_);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s.ok()) &#123;</span><br><span class="line">    <span class="comment">// Commit to the new state</span></span><br><span class="line">    imm_-&gt;Unref();</span><br><span class="line">    imm_ = <span class="literal">NULL</span>;</span><br><span class="line">    has_imm_.Release_Store(<span class="literal">NULL</span>);</span><br><span class="line">    DeleteObsoleteFiles();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    RecordBackgroundError(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LevelDB </tag>
            
            <tag> SourceCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LevelDB Source Code Review</title>
      <link href="/2017/05/17/LevelDB-Source-Code-Review/"/>
      <url>/2017/05/17/LevelDB-Source-Code-Review/</url>
      
        <content type="html"><![CDATA[<p>Not finish yet.</p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>I write this post to record my thought while reading source code of LevelDB.</p><h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p>Gernerally, I directly write my thought in the source code to help you  understand it.</p><blockquote><ol><li>// comment mark used by LevelDB</li><li>/<em> … </em>/ my personal remark</li></ol></blockquote><h1 id="DB-Put"><a href="#DB-Put" class="headerlink" title="DB::Put"></a>DB::Put</h1><blockquote><ol><li><a href="https://github.com/google/leveldb/blob/master/include/leveldb/db.h" target="_blank" rel="noopener">include/leveldb/db.h</a></li><li><a href="https://github.com/google/leveldb/blob/master/db/db_impl.cc" target="_blank" rel="noopener">db/db_impl.cc</a></li></ol></blockquote><p>This is the <code>LevelDB</code> ‘s interface to user.  </p><p><img src="/images/leveldb_writeflow.png" alt="prove"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">DB::Put</span><span class="params">(<span class="keyword">const</span> WriteOptions&amp; opt, <span class="keyword">const</span> Slice&amp; key, <span class="keyword">const</span> Slice&amp; value)</span> </span>&#123;</span><br><span class="line">  WriteBatch batch;</span><br><span class="line">  ／* check detail in following content</span><br><span class="line">  * Generally, batch contain write/<span class="keyword">delete</span> transactions.</span><br><span class="line">  *／</span><br><span class="line">  batch.Put(key, value);</span><br><span class="line">  <span class="keyword">return</span> Write(opt, &amp;batch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WriteBatch"><a href="#WriteBatch" class="headerlink" title="WriteBatch"></a>WriteBatch</h2><blockquote><ol><li><a href="https://github.com/google/leveldb/blob/master/include/leveldb/write_batch.h" target="_blank" rel="noopener">include/leveldb/write_batch.h</a></li><li><a href="https://github.com/google/leveldb/blob/master/db/write_batch.cc" target="_blank" rel="noopener">db/write_batch.cc</a></li><li><a href="https://github.com/google/leveldb/blob/master/util/coding.cc" target="_blank" rel="noopener">util/coding.cc</a></li></ol></blockquote><p><code>WriteBatch</code> is a data structure used to store multiple transactions for better performance. The data of transactions are encoded in <code>WriteBatch::rep_</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteBatch::Put</span><span class="params">(<span class="keyword">const</span> Slice&amp; key, <span class="keyword">const</span> Slice&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* update count in WriteBatch::rep_ which is a string.</span></span><br><span class="line"><span class="comment">   * WriteBatch::rep_ := &#123;</span></span><br><span class="line"><span class="comment">   * sequence: fixed64</span></span><br><span class="line"><span class="comment">   * count: fixed32</span></span><br><span class="line"><span class="comment">   * data: record[count] // check detail of record in following content</span></span><br><span class="line"><span class="comment">   *  &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  WriteBatchInternal::SetCount(<span class="keyword">this</span>, WriteBatchInternal::Count(<span class="keyword">this</span>) + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/* Data in rep_ wsa organized as</span></span><br><span class="line"><span class="comment">   * DataType                  4bit</span></span><br><span class="line"><span class="comment">   *   enum ValueType &#123;</span></span><br><span class="line"><span class="comment">   *kTypeDeletion = 0x0,</span></span><br><span class="line"><span class="comment">   *kTypeValue = 0x1</span></span><br><span class="line"><span class="comment">   *&#125;;</span></span><br><span class="line"><span class="comment">   * KeyWithLength        length-data</span></span><br><span class="line"><span class="comment">   * ValueWithLength      length-data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  rep_.push_back(<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(kTypeValue));</span><br><span class="line">  PutLengthPrefixedSlice(&amp;rep_, key);</span><br><span class="line">  PutLengthPrefixedSlice(&amp;rep_, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteBatchInternal::SetCount</span><span class="params">(WriteBatch* b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  EncodeFixed32(&amp;b-&gt;rep_[<span class="number">8</span>], n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* file util/coding.cc */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EncodeFixed32</span><span class="params">(<span class="keyword">char</span>* buf, <span class="keyword">uint32_t</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (port::kLittleEndian) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, &amp;value, <span class="keyword">sizeof</span>(value));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    buf[<span class="number">0</span>] = value &amp; <span class="number">0xff</span>;</span><br><span class="line">    buf[<span class="number">1</span>] = (value &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    buf[<span class="number">2</span>] = (value &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    buf[<span class="number">3</span>] = (value &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* file util/coding.cc */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PutLengthPrefixedSlice</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>* dst, <span class="keyword">const</span> Slice&amp; value)</span> </span>&#123;</span><br><span class="line">  PutVarint32(dst, value.size());</span><br><span class="line">  dst-&gt;append(value.data(), value.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DBImpl-Write"><a href="#DBImpl-Write" class="headerlink" title="DBImpl::Write"></a>DBImpl::Write</h2><blockquote><ol><li><a href="https://github.com/google/leveldb/blob/master/db/db_impl.cc" target="_blank" rel="noopener">db/db_impl.cc</a></li></ol></blockquote><p>After we figured out what does <code>WriteBatch</code> do, let us move on <code>DBImpl::Write</code><br>We get bunch of codes. Let us read it line by line.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* brief flow:</span></span><br><span class="line"><span class="comment"> * write my_batch into log file </span></span><br><span class="line"><span class="comment"> * add my_batch into skiplist in mem_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Status <span class="title">DBImpl::Write</span><span class="params">(<span class="keyword">const</span> WriteOptions&amp; options, WriteBatch* my_batch)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Be aware of DBImpl::Writer is different to log::Writer </span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * struct DBImpl::Writer &#123;</span></span><br><span class="line"><span class="comment">   *   Status status;</span></span><br><span class="line"><span class="comment">   *   WriteBatch* batch;</span></span><br><span class="line"><span class="comment">   *   bool sync;</span></span><br><span class="line"><span class="comment">   *   bool done;</span></span><br><span class="line"><span class="comment">   *   port::CondVar cv;</span></span><br><span class="line"><span class="comment">   *   explicit Writer(port::Mutex* mu) : cv(mu) &#123; &#125;</span></span><br><span class="line"><span class="comment">   * &#125;;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Writer <span class="title">w</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">  w.batch = my_batch;</span><br><span class="line">  w.sync = options.sync;</span><br><span class="line">  w.done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * MutexLock is similar to std::lock_gurad</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">MutexLock <span class="title">l</span><span class="params">(&amp;mutex_)</span></span>;</span><br><span class="line">  <span class="comment">/* std::deque&lt;Writer*&gt; writers_; */</span></span><br><span class="line">  writers_.push_back(&amp;w);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* DBImpl::Write might be called by multiple thread. </span></span><br><span class="line"><span class="comment">   * This writing task might be finished by other thread ( we</span></span><br><span class="line"><span class="comment">   * will explain this in the following content) or waken by </span></span><br><span class="line"><span class="comment">   * other thead when (&amp;w == writers_.front())</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">while</span> (!w.done &amp;&amp; &amp;w != writers_.front()) &#123;</span><br><span class="line">    w.cv.Wait();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* if this finished by other thread, return */</span></span><br><span class="line">  <span class="keyword">if</span> (w.done) &#123;</span><br><span class="line">    <span class="keyword">return</span> w.status;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Program will run to this line only if w is the front</span></span><br><span class="line"><span class="comment">   * of writers_. So the following code used to handle </span></span><br><span class="line"><span class="comment">   * writing task (Writer w)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// May temporarily unlock and wait.</span></span><br><span class="line">  <span class="comment">/* Make space for my_batch in mem_</span></span><br><span class="line"><span class="comment">   * http://yonglife.com/2017/05/31/LevelDB-Source-Code-Review-Compact/   </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Status status = MakeRoomForWrite(my_batch == <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">uint64_t</span> last_sequence = versions_-&gt;LastSequence();</span><br><span class="line">  Writer* last_writer = &amp;w;</span><br><span class="line">  <span class="keyword">if</span> (status.ok() &amp;&amp; my_batch != <span class="literal">NULL</span>) &#123;  <span class="comment">// NULL batch is for compactions</span></span><br><span class="line">    <span class="comment">/* group some small WriteBatchs </span></span><br><span class="line"><span class="comment">     * as a singal writer to optimize performance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WriteBatch* updates = BuildBatchGroup(&amp;last_writer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* sequence used for snapshot */</span></span><br><span class="line">    WriteBatchInternal::SetSequence(updates, last_sequence + <span class="number">1</span>);</span><br><span class="line">    last_sequence += WriteBatchInternal::Count(updates);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add to log and apply to memtable.  We can release the lock</span></span><br><span class="line">    <span class="comment">// during this phase since &amp;w is currently responsible for logging</span></span><br><span class="line">    <span class="comment">// and protects against concurrent loggers and concurrent writes</span></span><br><span class="line">    <span class="comment">// into mem_.</span></span><br><span class="line">    &#123;</span><br><span class="line">      mutex_.Unlock();</span><br><span class="line">      ／* write updates into file.</span><br><span class="line">        * <span class="built_in">log</span>::Writer* log_;</span><br><span class="line">        * WriteBatchInternal::Contents(...) will <span class="keyword">return</span> an object of</span><br><span class="line">        * Slice which contain WriteBatch::rep_</span><br><span class="line">        * Basically, <span class="keyword">this</span> line pass content of updates into log_</span><br><span class="line">        * Checking the detail about log_-&gt;AddRecord in  the </span><br><span class="line">        * next section.</span><br><span class="line">        *／</span><br><span class="line">      status = log_-&gt;AddRecord(WriteBatchInternal::Contents(updates));</span><br><span class="line">      <span class="keyword">bool</span> sync_error = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (status.ok() &amp;&amp; options.sync) &#123;</span><br><span class="line">        <span class="comment">/* directly return Status::OK() -_-|| */</span></span><br><span class="line">        status = logfile_-&gt;Sync();</span><br><span class="line">        <span class="keyword">if</span> (!status.ok()) &#123;</span><br><span class="line">          sync_error = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (status.ok()) &#123;</span><br><span class="line">        <span class="comment">/* Traversing the content of updates. MemTable::Add will</span></span><br><span class="line"><span class="comment">         * be used to append content into mem_-&gt;table_ which is </span></span><br><span class="line"><span class="comment">         * a skiplist.</span></span><br><span class="line"><span class="comment">         * check detail in following content</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        status = WriteBatchInternal::InsertInto(updates, mem_);</span><br><span class="line">      &#125;</span><br><span class="line">      mutex_.Lock();</span><br><span class="line">      <span class="keyword">if</span> (sync_error) &#123;</span><br><span class="line">        <span class="comment">// The state of the log file is indeterminate: the log record we</span></span><br><span class="line">        <span class="comment">// just added may or may not show up when the DB is re-opened.</span></span><br><span class="line">        <span class="comment">// So we force the DB into a mode where all future writes fail.</span></span><br><span class="line">        RecordBackgroundError(status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (updates == tmp_batch_) tmp_batch_-&gt;Clear();</span><br><span class="line"></span><br><span class="line">    versions_-&gt;SetLastSequence(last_sequence);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Since we might have handled multiple WriteBatch,</span></span><br><span class="line"><span class="comment">   * we should signal thoes threads who blocked at line 29 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    Writer* ready = writers_.front();</span><br><span class="line">    writers_.pop_front();</span><br><span class="line">    <span class="keyword">if</span> (ready != &amp;w) &#123;</span><br><span class="line">      ready-&gt;status = status;</span><br><span class="line">      ready-&gt;done = <span class="literal">true</span>;</span><br><span class="line">      ready-&gt;cv.Signal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ready == last_writer) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Notify new head of write queue</span></span><br><span class="line">  <span class="keyword">if</span> (!writers_.empty()) &#123;</span><br><span class="line">    writers_.front()-&gt;cv.Signal();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Writer-AddRecord"><a href="#Writer-AddRecord" class="headerlink" title="Writer::AddRecord()"></a>Writer::AddRecord()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* write slice into file dest_*/</span></span><br><span class="line"><span class="function">Status <span class="title">Writer::AddRecord</span><span class="params">(<span class="keyword">const</span> Slice&amp; slice)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* ptr = slice.data();</span><br><span class="line">  <span class="keyword">size_t</span> left = slice.size();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fragment the record if necessary and emit it.  Note that if slice</span></span><br><span class="line">  <span class="comment">// is empty, we still want to iterate once to emit a single</span></span><br><span class="line">  <span class="comment">// zero-length record</span></span><br><span class="line">  Status s;</span><br><span class="line">  <span class="keyword">bool</span> begin = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> leftover = kBlockSize - block_offset_;</span><br><span class="line">    assert(leftover &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (leftover &lt; kHeaderSize) &#123;</span><br><span class="line">      <span class="comment">// Switch to a new block</span></span><br><span class="line">      <span class="keyword">if</span> (leftover &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Fill the trailer (literal below relies on kHeaderSize being 7)</span></span><br><span class="line">        assert(kHeaderSize == <span class="number">7</span>);</span><br><span class="line">        dest_-&gt;Append(Slice(<span class="string">"\x00\x00\x00\x00\x00\x00"</span>, leftover));</span><br><span class="line">      &#125;</span><br><span class="line">      block_offset_ = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invariant: we never leave &lt; kHeaderSize bytes in a block.</span></span><br><span class="line">    assert(kBlockSize - block_offset_ - kHeaderSize &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> avail = kBlockSize - block_offset_ - kHeaderSize;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> fragment_length = (left &lt; avail) ? left : avail;</span><br><span class="line"></span><br><span class="line">    RecordType type;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> end = (left == fragment_length);</span><br><span class="line">    <span class="keyword">if</span> (begin &amp;&amp; end) &#123;</span><br><span class="line">      type = kFullType;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (begin) &#123;</span><br><span class="line">      type = kFirstType;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (end) &#123;</span><br><span class="line">      type = kLastType;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      type = kMiddleType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s = EmitPhysicalRecord(type, ptr, fragment_length);</span><br><span class="line">    ptr += fragment_length;</span><br><span class="line">    left -= fragment_length;</span><br><span class="line">    begin = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (s.ok() &amp;&amp; left &gt; <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Writer-EmitPhysicalRecord"><a href="#Writer-EmitPhysicalRecord" class="headerlink" title="Writer::EmitPhysicalRecord()"></a>Writer::EmitPhysicalRecord()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Writer::EmitPhysicalRecord</span><span class="params">(RecordType t, <span class="keyword">const</span> <span class="keyword">char</span>* ptr, <span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">  assert(n &lt;= <span class="number">0xffff</span>);  <span class="comment">// Must fit in two bytes</span></span><br><span class="line">  assert(block_offset_ + kHeaderSize + n &lt;= kBlockSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Format the header</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   *  WriteBatch::rep_ := &#123;</span></span><br><span class="line"><span class="comment">   * sequence: fixed64</span></span><br><span class="line"><span class="comment">   * count: fixed32</span></span><br><span class="line"><span class="comment">   * data: record[count] // check detail of record in following content</span></span><br><span class="line"><span class="comment">   *  &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">char</span> buf[kHeaderSize];</span><br><span class="line">  buf[<span class="number">4</span>] = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(n &amp; <span class="number">0xff</span>);</span><br><span class="line">  buf[<span class="number">5</span>] = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(n &gt;&gt; <span class="number">8</span>);</span><br><span class="line">  buf[<span class="number">6</span>] = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>&gt;(t);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compute the crc of the record type and the payload.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> crc = crc32c::Extend(type_crc_[t], ptr, n);</span><br><span class="line">  crc = crc32c::Mask(crc);                 <span class="comment">// Adjust for storage</span></span><br><span class="line">  EncodeFixed32(buf, crc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the header and the payload</span></span><br><span class="line">  <span class="comment">/* WritableFile* dest_;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Status s = dest_-&gt;Append(Slice(buf, kHeaderSize));</span><br><span class="line">  <span class="keyword">if</span> (s.ok()) &#123;</span><br><span class="line">    s = dest_-&gt;Append(Slice(ptr, n));</span><br><span class="line">    <span class="keyword">if</span> (s.ok()) &#123;</span><br><span class="line">      s = dest_-&gt;Flush();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  block_offset_ += kHeaderSize + n;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MemTable-Add"><a href="#MemTable-Add" class="headerlink" title="MemTable::Add()"></a>MemTable::Add()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MemTable::Add</span><span class="params">(SequenceNumber s, ValueType type,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> Slice&amp; key,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">const</span> Slice&amp; value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Format of an entry is concatenation of:</span></span><br><span class="line">  <span class="comment">//  key_size     : varint32 of internal_key.size()</span></span><br><span class="line">  <span class="comment">//  key bytes    : char[internal_key.size()]</span></span><br><span class="line">  <span class="comment">//  value_size   : varint32 of value.size()</span></span><br><span class="line">  <span class="comment">//  value bytes  : char[value.size()]</span></span><br><span class="line">  <span class="keyword">size_t</span> key_size = key.size();</span><br><span class="line">  <span class="keyword">size_t</span> val_size = value.size();</span><br><span class="line">  <span class="keyword">size_t</span> internal_key_size = key_size + <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> encoded_len =</span><br><span class="line">      VarintLength(internal_key_size) + internal_key_size +</span><br><span class="line">      VarintLength(val_size) + val_size;</span><br><span class="line">  <span class="keyword">char</span>* buf = arena_.Allocate(encoded_len);</span><br><span class="line">  <span class="keyword">char</span>* p = EncodeVarint32(buf, internal_key_size);</span><br><span class="line">  <span class="built_in">memcpy</span>(p, key.data(), key_size);</span><br><span class="line">  p += key_size;</span><br><span class="line">  EncodeFixed64(p, (s &lt;&lt; <span class="number">8</span>) | type);</span><br><span class="line">  p += <span class="number">8</span>;</span><br><span class="line">  p = EncodeVarint32(p, val_size);</span><br><span class="line">  <span class="built_in">memcpy</span>(p, value.data(), val_size);</span><br><span class="line">  assert((p + val_size) - buf == encoded_len);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* typedef SkipList&lt;const char*, KeyComparator&gt; Table;</span></span><br><span class="line"><span class="comment">   * Table table_;</span></span><br><span class="line"><span class="comment">   * So we put buff into a skiplist.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  table_.Insert(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> LevelDB </tag>
            
            <tag> SourceCode </tag>
            
            <tag> CodeIsBestExplanation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creational Patterns</title>
      <link href="/2017/05/06/Creational-Patterns/"/>
      <url>/2017/05/06/Creational-Patterns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simple script monitor</title>
      <link href="/2017/05/01/simple-script-monitor/"/>
      <url>/2017/05/01/simple-script-monitor/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Script"><a href="#Python-Script" class="headerlink" title="Python Script"></a>Python Script</h1><p>This script is used to monitor whether switch(game console) is available or not.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line">SOLD_OUT_MAIL = <span class="number">0</span></span><br><span class="line">AVAILABLE_MAIL = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMail</span><span class="params">( FROM, TO, SUBJECT, TEXT)</span>:</span></span><br><span class="line"></span><br><span class="line">    message = textwrap.dedent(<span class="string">"""\</span></span><br><span class="line"><span class="string">                              From: %s</span></span><br><span class="line"><span class="string">                              To: %s</span></span><br><span class="line"><span class="string">                              Subject: %s</span></span><br><span class="line"><span class="string">                              %s</span></span><br><span class="line"><span class="string">                              """</span> % (FROM, <span class="string">", "</span>.join(TO), SUBJECT, TEXT))</span><br><span class="line">    <span class="comment"># Send the message via our own SMTP server, but don't include the</span></span><br><span class="line">    <span class="comment"># envelope header.</span></span><br><span class="line">    s = smtplib.SMTP(<span class="string">'localhost'</span>)</span><br><span class="line">    s.sendmail(FROM, [TO], message)</span><br><span class="line">    s.quit()</span><br><span class="line"></span><br><span class="line">websites = &#123;</span><br><span class="line">    <span class="string">'bestbuy'</span> : &#123;</span><br><span class="line">        <span class="string">'web'</span> : <span class="string">'http://www.bestbuy.com/site/nintendo-switch-32gb-console-gray-joy-con/5670003.p?skuId=5670003'</span>,</span><br><span class="line">        <span class="string">'keyword'</span> : <span class="string">'sold out'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'target'</span>  : &#123;</span><br><span class="line">        <span class="string">'web'</span> : <span class="string">'http://www.target.com/p/nintendo-switch-with-gray-joy-con/-/A-52052007'</span>,</span><br><span class="line">        <span class="string">'keyword'</span> : <span class="string">'product not available'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'toysrus'</span> : &#123;</span><br><span class="line">        <span class="string">'web'</span> : <span class="string">'http://www.toysrus.com/product/index.jsp?productId=119513636&amp;cp=2255974.119659196&amp;parentPage=family'</span>,</span><br><span class="line">        <span class="string">'keyword'</span> : <span class="string">'out of stock'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'gamestop'</span> :  &#123;</span><br><span class="line">        <span class="string">'web'</span> : <span class="string">''</span>,</span><br><span class="line">        <span class="string">'keyword'</span> : <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, content <span class="keyword">in</span> websites.iteritems():</span><br><span class="line">    <span class="comment"># handle empty entry</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> content[<span class="string">'web'</span>]:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># handle network failure</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib2.urlopen(content[<span class="string">'web'</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%-10s %s\n'</span> % (name, e)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    html = response.read().lower()</span><br><span class="line">    <span class="keyword">if</span> html.find(content[<span class="string">'keyword'</span>]) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%-10s sold out\n'</span> % name</span><br><span class="line">        <span class="keyword">if</span> SOLD_OUT_MAIL == <span class="number">1</span>:</span><br><span class="line">            sendMail(<span class="string">'gfxcc@ubuntu.com'</span>, <span class="string">'yong_stevens@outlook.com'</span>, <span class="string">'switch sold out'</span>, name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%-10s accessible\n'</span> % name</span><br><span class="line">            <span class="keyword">if</span> AVAILABLE_MAIL == <span class="number">1</span>:</span><br><span class="line">                sendMail(<span class="string">'gfxcc@ubuntu.com'</span>, <span class="string">'yong_stevens@outlook.com'</span>, <span class="string">'switch might available now'</span>, name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Script </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimum spanning tree</title>
      <link href="/2017/04/24/Minimum-spanning-tree/"/>
      <url>/2017/04/24/Minimum-spanning-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="Update-Minimum-spanning-tree"><a href="#Update-Minimum-spanning-tree" class="headerlink" title="[Update] Minimum spanning tree"></a>[Update] Minimum spanning tree</h1><h2 id="Python-implementation"><a href="#Python-implementation" class="headerlink" title="Python implementation"></a>Python implementation</h2><h3 id="Kruskal’s-algorithm"><a href="#Kruskal’s-algorithm" class="headerlink" title="Kruskal’s algorithm"></a>Kruskal’s algorithm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.uf = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        uf = self.uf</span><br><span class="line">        uf.setdefault(x, x)</span><br><span class="line">        <span class="keyword">if</span> uf[x] != x:</span><br><span class="line">            uf[x] = self.find(uf[x])</span><br><span class="line">        <span class="keyword">return</span> uf[x]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x: int, y: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># x -&gt; y</span></span><br><span class="line">        uf = self.uf</span><br><span class="line">        uf[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal</span><span class="params">(n: int, edges: List[Tuple[int, int, int]])</span> -&gt; int:</span></span><br><span class="line">    uf, ret = UF(), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> sorted(edges, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>]):</span><br><span class="line">        <span class="keyword">if</span> uf.find(u) != uf.find(v):</span><br><span class="line">            ret.append((u, v, w))</span><br><span class="line">            uf.union(u, v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">if</span> len(set(map(uf.find, range(n)))) == <span class="number">1</span> <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">print(kruskal(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]]))</span><br></pre></td></tr></table></figure><h3 id="Prim’s-algorithm"><a href="#Prim’s-algorithm" class="headerlink" title="Prim’s algorithm"></a>Prim’s algorithm</h3><h4 id="E-log-V"><a href="#E-log-V" class="headerlink" title="E * log(V)"></a>E * log(V)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(n: int, edges: List[Tuple[int, int, int]])</span> -&gt; int:</span></span><br><span class="line">    graph = defaultdict(dict)</span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u][v] = w</span><br><span class="line">    </span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    pq, ret, visited = SortedList([(<span class="number">0</span>, start, <span class="literal">None</span>)]), [], set()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pq:</span><br><span class="line">        w, u, p = pq.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        visited.add(u)</span><br><span class="line">        ret.append((p, u, w))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            pq.add((w, v, u))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret[<span class="number">1</span>:] <span class="keyword">if</span> len(visited) == n <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">print(prim(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]]))</span><br></pre></td></tr></table></figure><h4 id="V-log-V"><a href="#V-log-V" class="headerlink" title="V * log(V)"></a>V * log(V)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(n: int, edges: List[Tuple[int, int, int]])</span> -&gt; int:</span></span><br><span class="line">    graph = defaultdict(dict)</span><br><span class="line">    <span class="keyword">for</span> u, v, w <span class="keyword">in</span> edges:</span><br><span class="line">        graph[u][v] = w</span><br><span class="line">    </span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    pq, ret, visited, prev = SortedList([(<span class="number">0</span>, start, <span class="literal">None</span>)]), [], set(), &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pq:</span><br><span class="line">        <span class="keyword">if</span> len(visited) == n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        w, u, p = pq.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        visited.add(u), ret.append((p, u, w))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> prev <span class="keyword">and</span> prev[v][<span class="number">1</span>] &gt;= w:</span><br><span class="line">                pq.remove((prev[v][<span class="number">1</span>], v, prev[v][<span class="number">0</span>]))</span><br><span class="line">            prev[v] = (u, w)</span><br><span class="line">            pq.add((w, v, u))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret[<span class="number">1</span>:] <span class="keyword">if</span> len(visited) == n <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">print(prim(<span class="number">5</span>, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]]))</span><br></pre></td></tr></table></figure><h2 id="Prime"><a href="#Prime" class="headerlink" title="Prime"></a>Prime</h2><blockquote><p>From Wikipedia</p><ol><li><p>Associate with each vertex v of the graph a number C[v] (the cheapest cost of a connection to v) and an edge E[v] (the edge providing that cheapest connection). To initialize these values, set all values of C[v] to +∞ (or to any number larger than the maximum edge weight) and set each E[v] to a special flag value indicating that there is no edge connecting v to earlier vertices.  </p></li><li><p>Initialize an empty forest F and a set Q of vertices that have not yet been included in F (initially, all vertices).  </p></li><li><p>Repeat the following steps until Q is empty:  </p><pre><code>a. Find and remove a vertex v from Q having the minimum possible value of C[v]  b. Add v to F and, if E[v] is not the special flag value, also add E[v] to Fc. Loop over the edges vw connecting v to other vertices w. For each such edge, if w still belongs to Q and vw has smaller weight than C[w], perform the following steps:    1). Set C[w] to the cost of edge vw      2). Set E[w] to point to edge vw</code></pre></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Prim</span><span class="params">(edges: )</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V vertexs, E edges</span></span><br><span class="line"><span class="comment">//Time complexity: E * log(V)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">Prim</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// adjacent list</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt;&gt; mp_adjacent;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; vertexs_original, vertexs_included;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build adjacent list and initialize vertex_original</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : graph) &#123;</span><br><span class="line">            <span class="built_in">string</span> vertex1 = edge.second.first, vertex2 = edge.second.second;</span><br><span class="line">            <span class="keyword">int</span> weight = edge.first;</span><br><span class="line">            </span><br><span class="line">            mp_adjacent[vertex1].push_back(make_pair(vertex2, weight));</span><br><span class="line">            mp_adjacent[vertex2].push_back(make_pair(vertex1, weight));</span><br><span class="line">            </span><br><span class="line">            vertexs_original.insert(edge.second.first);</span><br><span class="line">            vertexs_original.insert(edge.second.second);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// start to build tree, edges used as heap to select minimum edge</span></span><br><span class="line">        <span class="keyword">using</span> MltMap = <span class="built_in">multimap</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;;</span><br><span class="line">        MltMap edges;</span><br><span class="line">        <span class="comment">// map_heap_iter used to index vertex's element in edges</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, MltMap::iterator&gt; mp_heap_iter;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vertex : vertexs_original) &#123;</span><br><span class="line">            mp_heap_iter[vertex] = edges.insert(MltMap::value_type(INT_MAX, make_pair(vertex, vertex)));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// search from start vertex(arbitrarily)</span></span><br><span class="line">        <span class="built_in">string</span> start = *vertexs_original.begin();</span><br><span class="line">        vertexs_included.insert(start);</span><br><span class="line">        edges.erase(mp_heap_iter[start]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : (mp_adjacent[start])) &#123;</span><br><span class="line">            <span class="built_in">string</span> vertex = edge.first;</span><br><span class="line">            <span class="keyword">int</span> weight = edge.second;</span><br><span class="line">            <span class="keyword">if</span> (vertexs_included.count(vertex) == <span class="literal">false</span> &amp;&amp; mp_heap_iter[vertex]-&gt;first &gt; weight) &#123;</span><br><span class="line">                <span class="comment">// update edges;</span></span><br><span class="line">                edges.erase(mp_heap_iter[vertex]);</span><br><span class="line">                mp_heap_iter[vertex] = edges.insert(MltMap::value_type(weight, make_pair(vertex, start)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (vertexs_original.size() != vertexs_included.size()) &#123;</span><br><span class="line">            <span class="comment">// select shortest edge into spanning tree</span></span><br><span class="line">            <span class="keyword">auto</span> edge_selected = edges.begin();</span><br><span class="line">            <span class="keyword">auto</span> vertex1 = edge_selected-&gt;second.first, vertex2 = edge_selected-&gt;second.second;</span><br><span class="line">            <span class="keyword">int</span> weight_selected = edge_selected-&gt;first;</span><br><span class="line">            res.push_back(make_pair(weight_selected, make_pair(vertex1, vertex2)));</span><br><span class="line">            vertexs_included.insert(vertex1);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// remove the edge from edges(heap)</span></span><br><span class="line">            edges.erase(mp_heap_iter[vertex1]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// update edges connected to vertex1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : (mp_adjacent[vertex1])) &#123;</span><br><span class="line">                <span class="built_in">string</span> vertex = edge.first;</span><br><span class="line">                <span class="keyword">int</span> weight = edge.second;</span><br><span class="line">                <span class="keyword">if</span> (vertexs_included.count(vertex) == <span class="literal">false</span> &amp;&amp; mp_heap_iter[vertex]-&gt;first &gt; weight) &#123;</span><br><span class="line">                    edges.erase(mp_heap_iter[vertex]);</span><br><span class="line">                    mp_heap_iter[vertex] = edges.insert(MltMap::value_type(weight, make_pair(vertex, vertex1)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V vertexs, E edges</span></span><br><span class="line"><span class="comment">//Time complexity: E * log(E)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Find</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&amp; union_found, <span class="built_in">string</span> vertex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (vertex != union_found[vertex]) &#123;</span><br><span class="line">            <span class="built_in">string</span> des = union_found[vertex];</span><br><span class="line">            union_found[vertex] = union_found[des];</span><br><span class="line">            vertex = des;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vertex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&amp; union_found, <span class="built_in">string</span>&amp; vertex1, <span class="built_in">string</span>&amp; vertex2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> root1 = Find(union_found, vertex1), root2 = Find(union_found, vertex2);</span><br><span class="line">        <span class="keyword">if</span> (root1 == root2)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        union_found[root1] = root2;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">Kruskal</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        sort(graph.begin(), graph.end(), [](<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&amp; lhs, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&amp; rhs)&#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.first &lt; rhs.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">using</span> MpType = <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">        MpType union_found;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; vertexs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : graph) &#123;</span><br><span class="line">            vertexs.insert(edge.second.first);</span><br><span class="line">            vertexs.insert(edge.second.second);</span><br><span class="line">            <span class="keyword">if</span> (union_found.find(edge.second.first) == union_found.end())</span><br><span class="line">                union_found.insert(MpType::value_type(edge.second.first, edge.second.first));</span><br><span class="line">            <span class="keyword">if</span> (union_found.find(edge.second.second) == union_found.end())</span><br><span class="line">                union_found.insert(MpType::value_type(edge.second.second, edge.second.second));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt;&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// start to build spinning tree</span></span><br><span class="line">        <span class="built_in">string</span> start = *vertexs.begin();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : graph) &#123;</span><br><span class="line">            <span class="built_in">string</span> vertex1 = edge.second.first, vertex2 = edge.second.second;</span><br><span class="line">            <span class="keyword">if</span> (Find(union_found, vertex1) == Find(union_found, vertex2))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            res.push_back(edge);</span><br><span class="line">            Union(union_found, vertex1, vertex2);</span><br><span class="line">            <span class="keyword">if</span> (res.size() + <span class="number">1</span> &gt;= vertexs.size())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Tree </tag>
            
            <tag> Graph </tag>
            
            <tag> MST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codility [PrisonEscape]</title>
      <link href="/2017/04/20/Codility-PrisonEscape/"/>
      <url>/2017/04/20/Codility-PrisonEscape/</url>
      
        <content type="html"><![CDATA[<h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p><a href="https://codility.com/programmers/challenges/phosphorus2014/" target="_blank" rel="noopener">challenge from Codility</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Inspired by <a href="http://zh-wang.github.io/blog/2014/08/14/codility-phosphorus-2014/" target="_blank" rel="noopener">reference.1</a></p><p>Since<code>There are N+1 intersections in a prison, connected by N corridors</code>, this graph is a tree(no circle) as well. We can assign arbitrary node as root. </p><p>For each node, we need to know two critical information.  </p><blockquote><ol><li>How many path prisoner can escape?  </li><li>How many path prisoner can come from?</li><li>Does this node have prison?</li></ol></blockquote><p>We can use dfs to get thoes information automatically.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node(<span class="keyword">int</span> i) : index(i), parent_index(<span class="number">-1</span>), is_prisoner(<span class="literal">false</span>), has_escape_leaf(<span class="literal">true</span>), has_escape_root(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> index, parent_index;</span><br><span class="line">    <span class="keyword">bool</span> is_prisoner, has_escape_leaf, has_escape_root;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; neis;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> MapType = <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, Node*&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(MapType&amp; graph, <span class="keyword">int</span> root, <span class="keyword">int</span>&amp; res, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">    visited[root] = <span class="literal">true</span>;</span><br><span class="line">    Node* cur = graph[root];</span><br><span class="line">    for_each(cur-&gt;neis.begin(), cur-&gt;neis.end(), [&amp;graph, &amp;visited, &amp;res, root](<span class="keyword">int</span> nei)&#123;</span><br><span class="line">        <span class="keyword">if</span> (visited.find(nei) == visited.end()) &#123;</span><br><span class="line">            graph[nei]-&gt;parent_index = root;</span><br><span class="line">            dfs(graph, nei, res, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return if cur is leaf nodes</span></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;parent_index != <span class="number">-1</span> &amp;&amp; cur-&gt;neis.size() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// calculate information from subtrees</span></span><br><span class="line">    <span class="keyword">int</span> subtree_num = <span class="number">0</span>, escape_leaf = <span class="number">0</span>, escape_root = <span class="number">0</span>;</span><br><span class="line">    for_each(cur-&gt;neis.begin(), cur-&gt;neis.end(), [&amp;](<span class="keyword">int</span> nei)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nei == cur-&gt;parent_index)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        subtree_num++;</span><br><span class="line">        <span class="keyword">if</span> (graph[nei]-&gt;has_escape_leaf)</span><br><span class="line">            escape_leaf++;</span><br><span class="line">        <span class="keyword">if</span> (graph[nei]-&gt;has_escape_root)</span><br><span class="line">            escape_root++;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reset value</span></span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;is_prisoner) &#123;</span><br><span class="line">        res += escape_leaf; <span class="comment">// set escape_leaf guard</span></span><br><span class="line">        cur-&gt;has_escape_leaf = <span class="literal">false</span>;</span><br><span class="line">        cur-&gt;has_escape_root = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (escape_leaf == subtree_num) &#123;</span><br><span class="line">            <span class="comment">// empty </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (escape_leaf == <span class="number">0</span>) &#123;</span><br><span class="line">            cur-&gt;has_escape_leaf = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (escape_root)</span><br><span class="line">                cur-&gt;has_escape_root = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">          <span class="comment">// has escape_leaf</span></span><br><span class="line">            <span class="keyword">if</span> (escape_root) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                cur-&gt;has_escape_root = <span class="literal">false</span>;</span><br><span class="line">                cur-&gt;has_escape_leaf = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;has_escape_leaf = <span class="literal">true</span>;</span><br><span class="line">                cur-&gt;has_escape_root = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (C.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    MapType graph;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; visited;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(A.size()), m = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(C.size());</span><br><span class="line">    <span class="comment">// build graph</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (graph.find(A[i]) == graph.end())</span><br><span class="line">            graph.insert(MapType::value_type(A[i], <span class="keyword">new</span> Node(A[i])));</span><br><span class="line">        <span class="keyword">if</span> (graph.find(B[i]) == graph.end())</span><br><span class="line">            graph.insert(MapType::value_type(B[i], <span class="keyword">new</span> Node(B[i])));</span><br><span class="line">        graph[A[i]]-&gt;neis.push_back(B[i]);</span><br><span class="line">        graph[B[i]]-&gt;neis.push_back(A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// init prisoner</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> prionser = C[i];</span><br><span class="line">        <span class="keyword">if</span> (graph[prionser]-&gt;neis.size() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        graph[prionser]-&gt;is_prisoner = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// dfs</span></span><br><span class="line">    dfs(graph, <span class="number">0</span>, res, visited);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (graph[<span class="number">0</span>]-&gt;has_escape_root &amp;&amp; graph[<span class="number">0</span>]-&gt;neis.size() == <span class="number">1</span>)</span><br><span class="line">        res++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><blockquote><p>1 <a href="http://zh-wang.github.io/blog/2014/08/14/codility-phosphorus-2014/" target="_blank" rel="noopener">http://zh-wang.github.io/blog/2014/08/14/codility-phosphorus-2014/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Codility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Item 17 in Effective Modern C++ is CONFUSING [Fixed]</title>
      <link href="/2017/04/15/Item-17-in-Effective-Modern-C-is-CONFUSING/"/>
      <url>/2017/04/15/Item-17-in-Effective-Modern-C-is-CONFUSING/</url>
      
        <content type="html"><![CDATA[<h1 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h1><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Item 17: Understand special member function generation.</span><br><span class="line"></span><br><span class="line">1. Move operations are generated only for classed lacking </span><br><span class="line">explicitly declared move operation, copy operations, </span><br><span class="line">or a destructor.</span><br><span class="line"></span><br><span class="line">2. Now, when I refer to a move operation move-constructing</span><br><span class="line"> or move-assigning a data member or base class, there</span><br><span class="line"> is no guarantee that a move will actually take place.</span><br><span class="line"> &quot;Memberwise moves&quot; are, in reality, more like memberwise</span><br><span class="line"> move requests, because types that aren&#39;t move-enabled(...)</span><br><span class="line"> will be &quot;moved&quot; via their copy operations.</span><br></pre></td></tr></table></figure><p>I am not sure those two assertion is guaranteed by C++ Standard or not. But while I testing them, they do varied in my enviroument. </p><h2 id="1-user-declared-destructor-disable-move-operation"><a href="#1-user-declared-destructor-disable-move-operation" class="headerlink" title="1. user-declared destructor disable move operation?"></a>1. user-declared destructor disable move operation?</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiled</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base a, c;</span><br><span class="line">    <span class="function">Base <span class="title">b</span><span class="params">(move(a))</span></span>;</span><br><span class="line">    c = move(b);</span><br><span class="line">    <span class="comment">// explicitly destructor does not disable </span></span><br><span class="line">    <span class="comment">// default move constuctor and move assignment operator</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-moved-via-copy-operation"><a href="#2-moved-via-copy-operation" class="headerlink" title="2. moved via copy operation?"></a>2. moved via copy operation?</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base() &#123;&#125;</span><br><span class="line">    Base(Base&amp; b) &#123;&#125;</span><br><span class="line">    ~Base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Base b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Num a, c;</span><br><span class="line">    c = move(a); <span class="comment">// passed</span></span><br><span class="line">    <span class="function">Num <span class="title">b</span><span class="params">(move(c))</span></span>; <span class="comment">// error</span></span><br><span class="line">    <span class="comment">// explicitly Base::Base(Base&amp; b) disable default move </span></span><br><span class="line">    <span class="comment">// move conctructor. </span></span><br><span class="line">    <span class="comment">// Num's default move constructor can not find any move</span></span><br><span class="line">    <span class="comment">// constructor for member object Base b, which lead to an </span></span><br><span class="line">    <span class="comment">// error. Num's default move constructor does not "moved" </span></span><br><span class="line">    <span class="comment">// Base b via their copy operations which is declared.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h1><p><a href="http://stackoverflow.com/questions/43428503/c-default-move-operation-in-effective-modern-c?answertab=oldest#tab-top" target="_blank" rel="noopener">stackoverflow</a></p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><blockquote><ol><li><a href="http://stackoverflow.com/questions/43428503/c-default-move-operation-in-effective-modern-c?answertab=oldest#tab-top" target="_blank" rel="noopener">http://stackoverflow.com/questions/43428503/c-default-move-operation-in-effective-modern-c?answertab=oldest#tab-top</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Reading Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compiler </tag>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How does Thread Passing Value</title>
      <link href="/2017/04/03/How-does-Thread-Passing-Value/"/>
      <url>/2017/04/03/How-does-Thread-Passing-Value/</url>
      
        <content type="html"><![CDATA[<p>Read the following code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buff[] = <span class="string">"hi"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(f, buff)</span></span>;  <span class="comment">// compiled but unexpected result</span></span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(f, <span class="built_in">string</span>(buff))</span></span>; <span class="comment">// works!</span></span><br></pre></td></tr></table></figure><p>Generally, C++ use rvalue-reference to the pass the value of <code>callable object</code> and <code>parameters</code> into new thread. We can find the detail in the following code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Callable, <span class="keyword">typename</span>... _Args&gt;</span><br><span class="line">    <span class="keyword">explicit</span></span><br><span class="line">thread(_Callable&amp;&amp; __f, _Args&amp;&amp;... __args)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> GTHR_ACTIVE_PROXY</span></span><br><span class="line">    <span class="comment">// Create a reference to pthread_create, not just the gthr weak symbol.</span></span><br><span class="line">    <span class="keyword">auto</span> __depend = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>(*)()&gt;(&amp;pthread_create);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">auto</span> __depend = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    _M_start_thread(_S_make_state(</span><br><span class="line">                __make_invoker(<span class="built_in">std</span>::forward&lt;_Callable&gt;(__f),</span><br><span class="line">                    <span class="built_in">std</span>::forward&lt;_Args&gt;(__args)...)),</span><br><span class="line">            __depend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since <code>thread(_Callable&amp;&amp; __f, _Args&amp;&amp;... __args)</code> is implemented with <code>template</code>, the type of <code>__args</code> can only be deduced by the objects passed into <code>thread</code>.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thread t1(f, buff);  &#x2F;&#x2F; compiled but unexpected result</span><br><span class="line">&#x2F;&#x2F; The type of buff is char *</span><br><span class="line"></span><br><span class="line">thread t2(f, string(buff)); &#x2F;&#x2F; works!</span><br><span class="line">&#x2F;&#x2F; The type of string(buff) is string (rvalue)</span><br></pre></td></tr></table></figure><p>So, the first method will pass <code>char *</code> to new thread. When processor move into sub thread, it will implicit convert <code>char *</code> to <code>const string</code> which is the type of parameter in <code>void f(const string&amp; s)</code>. However, <code>char buff[]</code> might already be released when sub-thread was trying to construct <code>const string</code> from <code>char *</code>. That will lead to undefined behavious.</p><p>For the second method, an rvalue reference will be passsed into sub-thread, which is perfect forward.</p><hr><p>You can find some details of <code>thread</code>‘s implement in the following codes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns a call wrapper that does</span></span><br><span class="line"><span class="comment">// INVOKE(DECAY_COPY(__callable), DECAY_COPY(__args)).</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Callable, <span class="keyword">typename</span>... _Args&gt;</span><br><span class="line">    <span class="keyword">static</span> __invoker_type&lt;_Callable, _Args...&gt;</span><br><span class="line">__make_invoker(_Callable&amp;&amp; __callable, _Args&amp;&amp;... __args)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; &#123;</span><br><span class="line">        <span class="built_in">std</span>::make_tuple(<span class="built_in">std</span>::forward&lt;_Callable&gt;(__callable),</span><br><span class="line">                <span class="built_in">std</span>::forward&lt;_Args&gt;(__args)...)</span><br><span class="line">    &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alias for _Invoker&lt;tuple&lt;DECAY_COPY(_Tp)...&gt;&gt;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span>... _Tp&gt;</span><br><span class="line">      <span class="keyword">using</span> __invoker_type</span><br><span class="line">= _Invoker&lt;<span class="keyword">decltype</span>(<span class="built_in">std</span>::make_tuple(<span class="built_in">std</span>::declval&lt;_Tp&gt;()...))&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A call wrapper that does INVOKE(forwarded tuple elements...)</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tuple&gt;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">Invoker</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line">_Tuple _M_t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span> _Index&gt;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">__tuple_element_t</span>&lt;_Index, _Tuple&gt;&amp;&amp;</span><br><span class="line">  _S_declval();</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">size_t</span>... _Ind&gt;</span><br><span class="line">  <span class="keyword">auto</span></span><br><span class="line">  _M_invoke(_Index_tuple&lt;_Ind...&gt;)</span><br><span class="line">  <span class="keyword">noexcept</span>(<span class="keyword">noexcept</span>(<span class="built_in">std</span>::__invoke(_S_declval&lt;_Ind&gt;()...)))</span><br><span class="line">  -&gt; <span class="keyword">decltype</span>(<span class="built_in">std</span>::__invoke(_S_declval&lt;_Ind&gt;()...))</span><br><span class="line">  &#123; <span class="keyword">return</span> <span class="built_in">std</span>::__invoke(<span class="built_in">std</span>::get&lt;_Ind&gt;(<span class="built_in">std</span>::move(_M_t))...); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> _Indices</span><br><span class="line">  = <span class="keyword">typename</span> _Build_index_tuple&lt;tuple_size&lt;_Tuple&gt;::value&gt;::__type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span></span><br><span class="line"><span class="keyword">operator</span>()()</span><br><span class="line"><span class="keyword">noexcept</span>(<span class="keyword">noexcept</span>(<span class="built_in">std</span>::declval&lt;_Invoker&amp;&gt;()._M_invoke(_Indices())))</span><br><span class="line">-&gt; <span class="keyword">decltype</span>(<span class="built_in">std</span>::declval&lt;_Invoker&amp;&gt;()._M_invoke(_Indices()))</span><br><span class="line">&#123; <span class="keyword">return</span> _M_invoke(_Indices()); &#125;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//using _State_ptr = unique_ptr&lt;_State&gt;;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Callable&gt;</span><br><span class="line">    <span class="keyword">static</span> _State_ptr</span><br><span class="line">_S_make_state(_Callable&amp;&amp; __f)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> _Impl = _State_impl&lt;_Callable&gt;;</span><br><span class="line">    <span class="keyword">return</span> _State_ptr&#123;<span class="keyword">new</span> _Impl&#123;<span class="built_in">std</span>::forward&lt;_Callable&gt;(__f)&#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Callable&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">State_impl</span> :</span> <span class="keyword">public</span> _State</span><br><span class="line">&#123;</span><br><span class="line">    _Callable_M_func;</span><br><span class="line"></span><br><span class="line">    _State_impl(_Callable&amp;&amp; __f) : _M_func(<span class="built_in">std</span>::forward&lt;_Callable&gt;(__f))</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span></span><br><span class="line">        _M_run() &#123; _M_func(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">void</span></span><br><span class="line">thread::_M_start_thread(_State_ptr state, <span class="keyword">void</span> (*)())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> err = __gthread_create(&amp;_M_id._M_thread,</span><br><span class="line">            &amp;execute_native_thread_routine,</span><br><span class="line">            state.get());</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        __throw_system_error(err);</span><br><span class="line">    state.release();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span>*</span><br><span class="line">    execute_native_thread_routine(<span class="keyword">void</span>* __p)</span><br><span class="line">    &#123;</span><br><span class="line">      thread::_State_ptr <span class="keyword">__t</span>&#123; <span class="keyword">static_cast</span>&lt;thread::_State*&gt;(__p) &#125;;</span><br><span class="line"></span><br><span class="line">      __try</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">__t</span>-&gt;_M_run();</span><br><span class="line">&#125;</span><br><span class="line">      __catch(<span class="keyword">const</span> __cxxabiv1::__forced_unwind&amp;)</span><br><span class="line">&#123;</span><br><span class="line">  __throw_exception_again;</span><br><span class="line">&#125;</span><br><span class="line">      __catch(...)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
          <category> Reading Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> Thread </tag>
            
            <tag> STLi </tag>
            
            <tag> C++ Concurrency IN ACTION </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++&#39;s most vexing parse</title>
      <link href="/2017/04/02/Declare-function-in-function/"/>
      <url>/2017/04/02/Declare-function-in-function/</url>
      
        <content type="html"><![CDATA[<h1 id="“C-’s-most-vexing-parse”"><a href="#“C-’s-most-vexing-parse”" class="headerlink" title="“C++’s most vexing parse”"></a>“C++’s most vexing parse”</h1><p>When we try to pass a temporary object to construct an other object, it might lead to some unexpected result.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(Tast())</span></span>; <span class="comment">// We want create a new thread. But ...</span></span><br></pre></td></tr></table></figure><p>As the code presents, we want to create a new thread and pass an temporary object to construct it. <strong>However, it will not do it.</strong>, <code>std::thread my_thread(Tast());</code>  <strong>will be parsed as a function declaration.</strong>  </p><p>WHY!!!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span>(val))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span>())</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f6</span><span class="params">((<span class="keyword">int</span>()))</span> <span class="comment">// !error</span></span></span><br></pre></td></tr></table></figure><p><code>f1</code> ~ <code>f5</code> are legal declaration in C++. Even though parameters in <code>f4</code>, <code>f5</code> will not be used in function’s defination.<br>To avoid C++ parse <code>std::thread my_thread(Tast());</code> as a declaration of a function, we can insert parentheses like <code>f6</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct way</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">((Tast()))</span></span>; <span class="comment">// declare an object rather than a function</span></span><br><span class="line">my_thread.join();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Defining-function-in-function"><a href="#Defining-function-in-function" class="headerlink" title="Defining function in function ?"></a>Defining function in function ?</h1><p>It seems we can define function in function since C++ might parse <code>thread my_thread(Tast())</code> as a declaration of a function.  </p><p>The answer is NO!!!  </p><p>C++ does not allow nested function. If you do need one, you can use <code>lambda expression</code> in C++11.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda expression. Great!</span></span><br><span class="line"><span class="keyword">auto</span> lam = [](<span class="keyword">int</span> val) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lam(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we can not define functions in a funtion, <strong>Why C++ allowed us declare funtions in funtion, which might lead to ambiguous parsing?</strong></p><p>Well, we can delare funtion to notify compiler that thoes funtions were defined in other place.</p><p>Like this,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.cc</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line">f(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.cc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-&gt;<span class="meta"># g++ a.cc b.cc -o test</span></span><br><span class="line">-&gt;# ./test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why priority_queue has different cmp with std::sort</title>
      <link href="/2017/03/31/Why-priority-queue-has-different-cmp-with-std-sort/"/>
      <url>/2017/03/31/Why-priority-queue-has-different-cmp-with-std-sort/</url>
      
        <content type="html"><![CDATA[<p>As I mentioned in the title, <code>priority_queue</code> has different type of <code>cmp</code> with <code>std::sort</code>.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs &lt; rhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cmp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lhs &lt; rhs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, Cmp&gt; pq_1;  <span class="comment">// work</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt;&gt; pq_2;  <span class="comment">// work</span></span><br><span class="line">    <span class="comment">/* will not compile</span></span><br><span class="line"><span class="comment">    priority_queue&lt;int, vector&lt;int&gt;, cmp_f&gt; pq; </span></span><br><span class="line"><span class="comment">    priority_queue&lt;int, vector&lt;int&gt;, Cmp()&gt; pq;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    sort(vec.begin(), vec.end(), Cmp()); <span class="comment">// work</span></span><br><span class="line">    sort(vec.begin(), vec.end(), cmp_f); <span class="comment">// work</span></span><br><span class="line">    sort(vec.begin(), vec.end(), less&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// work</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thing is <code>priority_queue</code> want type while <code>std::sort</code> want object.<br>To figure out why they work in that way, let us read their definition.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Container</span> = <span class="title">vector</span>&lt;_Tp&gt;,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> _<span class="title">Compare</span> = <span class="title">less</span>&lt;typename _Container::value_type&gt; &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> _<span class="title">LIBCPP_TYPE_VIS_ONLY</span> <span class="title">priority_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> _<span class="title">LIBCPP_INLINE_VISIBILITY</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"><span class="title">sort</span>(__<span class="title">wrap_iter</span>&lt;_Tp*&gt; __<span class="title">first</span>, __<span class="title">wrap_iter</span>&lt;_Tp*&gt; __<span class="title">last</span>, _<span class="title">Compare</span> __<span class="title">comp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>There is a difference with std::sort. Sort is a function, and you can let the compiler deduce it’s template arguments so you don’t have to specify them explicitly. The queue is a class template, and template arguments of a class template can not be deduced (not in this context at least).</em></strong> (I directly copy this paragraph from the reference which listed at the end :))</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote><p><a href="http://stackoverflow.com/questions/34850929/why-function-comparator-doesnt-work-in-priority-queue-like-it-does-in-sort" target="_blank" rel="noopener">http://stackoverflow.com/questions/34850929/why-function-comparator-doesnt-work-in-priority-queue-like-it-does-in-sort</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> C++11 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Expression_templates</title>
      <link href="/2017/03/22/Expression-templates/"/>
      <url>/2017/03/22/Expression-templates/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VecExpression</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//E&amp; operator()()       &#123; return static_cast&lt;E&amp;&gt;(*this); &#125;</span></span><br><span class="line">    <span class="comment">//const E&amp; operator()() const &#123; return static_cast&lt;const E&amp;&gt;(*this); &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>[](<span class="keyword">size_t</span> i) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> E&amp;&gt;(*<span class="keyword">this</span>)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> E&amp;&gt;(*<span class="keyword">this</span>).size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vec</span> :</span> <span class="keyword">public</span> VecExpression&lt;Vec&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec) : elements(vec) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>[](<span class="keyword">size_t</span> i) &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> E&gt;</span><br><span class="line">    Vec(<span class="keyword">const</span> VecExpression&lt;E&gt;&amp; vec) : elements(vec.size()) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = vec.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; vec.size(); i++) &#123;</span><br><span class="line">            elements[i] = vec[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elements.size();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; elements;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E1, <span class="keyword">typename</span> E2&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VecSum</span> :</span> <span class="keyword">public</span> VecExpression&lt;VecSum&lt;E1, E2&gt;&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    VecSum(E1&amp; u, E2&amp; v) : _u(u), _v(v) &#123;</span><br><span class="line">        assert(_u.size() == _v.size());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>[](<span class="keyword">size_t</span> i) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _u[i] + _v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _u.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    E1&amp; _u;</span><br><span class="line">    E2&amp; _v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> E1, <span class="keyword">typename</span> E2&gt;</span><br><span class="line"><span class="keyword">const</span> VecSum&lt;E1,E2&gt; <span class="keyword">operator</span>+(E1&amp; u, E2&amp; v) &#123;</span><br><span class="line">    <span class="keyword">return</span> VecSum&lt;E1, E2&gt;(u, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, v2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;, v3 = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Vec m1(v1), m2(v2), m3(v3);</span><br><span class="line">    Vec res = m1 + m2 + m3;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>const_function</title>
      <link href="/2017/03/11/const-function/"/>
      <url>/2017/03/11/const-function/</url>
      
        <content type="html"><![CDATA[<p>Generally, <em>A “const function”, denoted with the keyword const after a function declaration, makes it a compiler error for this class function to change a member variable of the class. However, reading of a class variables is ok inside of the function, but writing inside of this function will generate a compiler error.</em> </p><p>We can see this feature clearly by dump the intermediate language which is C in GCC.</p><p>compile this source code by <code>g++ -fdump-tree-gimple test.cc</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>[] (<span class="keyword">int</span> num) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>[] (<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we can get this  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> D<span class="number">.2339</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Solution</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        Solution::<span class="keyword">operator</span>[] (&amp;s, <span class="number">1</span>);</span><br><span class="line">        D<span class="number">.2339</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> D<span class="number">.2339</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    finally</span><br><span class="line">      &#123;</span><br><span class="line">        s = &#123;CLOBBER&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  D<span class="number">.2339</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> D<span class="number">.2339</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Solution::<span class="keyword">operator</span>[](<span class="keyword">int</span>) (struct Solution * <span class="keyword">const</span> <span class="keyword">this</span>, <span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">bool</span> D<span class="number">.2342</span>;</span><br><span class="line"></span><br><span class="line">  D<span class="number">.2342</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> D<span class="number">.2342</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since we want see the C interface of <code>const function</code>, let us comment the second function and compile it again.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>[] (<span class="keyword">int</span> num) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    bool operator[] (int num) &#123;</span></span><br><span class="line"><span class="comment">        return true;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we can find the difference on <code>this pointer</code> which is <code>const</code>.<br>It means that we can not use this pointer to modify that memory.<br><code>const struct Solution * const this</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> D<span class="number">.2335</span>;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Solution</span> <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">        Solution::<span class="keyword">operator</span>[] (&amp;s, <span class="number">1</span>);</span><br><span class="line">        D<span class="number">.2335</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> D<span class="number">.2335</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    finally</span><br><span class="line">      &#123;</span><br><span class="line">        s = &#123;CLOBBER&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  D<span class="number">.2335</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> D<span class="number">.2335</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Solution::<span class="keyword">operator</span>[](<span class="keyword">int</span>) <span class="keyword">const</span> (<span class="keyword">const</span> struct Solution * <span class="keyword">const</span> <span class="keyword">this</span>, <span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">bool</span> D<span class="number">.2338</span>;</span><br><span class="line"></span><br><span class="line">  D<span class="number">.2338</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> D<span class="number">.2338</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h3><blockquote><p><a href="http://stackoverflow.com/questions/3141087/what-is-meant-with-const-at-end-of-function-declaration" target="_blank" rel="noopener">http://stackoverflow.com/questions/3141087/what-is-meant-with-const-at-end-of-function-declaration</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bit_vector</title>
      <link href="/2017/03/11/bit-vector/"/>
      <url>/2017/03/11/bit-vector/</url>
      
        <content type="html"><![CDATA[<h2 id="C-version"><a href="#C-version" class="headerlink" title="C version"></a>C version</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i &gt;&gt; 5   equal to i / 32</span></span><br><span class="line"><span class="comment">// i &amp; 0x1f equal to i % 32</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BitVector</span> &#123;</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;BITSPERWORD = <span class="number">32</span>, SHIFT = <span class="number">5</span>, MASK = <span class="number">0x1f</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        x[i &gt;&gt; SHIFT] |= (<span class="number">1</span> &lt;&lt; (i &amp; MASK));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        x[i &gt;&gt; SHIFT] &amp;= ~(<span class="number">1</span> &lt;&lt; (i &amp; MASK));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x[i &gt;&gt; SHIFT] &amp; (<span class="number">1</span> &lt;&lt; (i &amp; MASK));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    BitVector(<span class="keyword">int</span> maxelement) &#123;</span><br><span class="line">        x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> + maxelement / BITSPERWORD];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxelement; i++)</span><br><span class="line">            clr(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="C-version-1"><a href="#C-version-1" class="headerlink" title="C++ version"></a>C++ version</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;  // ::std::uint64_t type</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt; // ::std::size_t type</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_bitvector_base</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">bitref</span> &#123;</span> <span class="comment">// Prevent this class from being used anywhere else.</span></span><br><span class="line">            <span class="keyword">public</span>:</span><br><span class="line">                bitref(::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> &amp;an_int, ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> mask)</span><br><span class="line">                    : an_int_(an_int), mask_(mask)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> bitref &amp;<span class="keyword">operator</span> =(<span class="keyword">bool</span> val) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">                        an_int_ |= mask_;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        an_int_ &amp;= ~mask_;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">const</span> bitref &amp;<span class="keyword">operator</span> =(<span class="keyword">const</span> bitref &amp;br) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="keyword">operator</span> =(<span class="keyword">bool</span>(br));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ((an_int_ &amp; mask_) != <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span>:</span><br><span class="line">                ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> &amp;an_int_;</span><br><span class="line">                ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> mask_;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; ::<span class="built_in">std</span>::<span class="keyword">size_t</span> Size &gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_bitvector</span> :</span> <span class="keyword">public</span> my_bitvector_base &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">constexpr</span> ::<span class="built_in">std</span>::<span class="keyword">size_t</span> numints = ((Size + <span class="number">63</span>) / <span class="number">64</span>);</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        my_bitvector() &#123; ::<span class="built_in">std</span>::fill(ints_, ints_ + numints, <span class="number">0</span>);  &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> [](::<span class="built_in">std</span>::<span class="keyword">size_t</span> bitnum) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> ::<span class="built_in">std</span>::<span class="keyword">size_t</span> bytenum = bitnum / <span class="number">64</span>;</span><br><span class="line">            bitnum = bitnum % <span class="number">64</span>;</span><br><span class="line">            <span class="keyword">return</span> ((ints_[bytenum] &amp; (::<span class="built_in">std</span>::<span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; bitnum)) != <span class="number">0</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bitref <span class="keyword">operator</span>[](::<span class="built_in">std</span>::<span class="keyword">size_t</span> bitnum) &#123;</span><br><span class="line">            <span class="keyword">const</span> ::<span class="built_in">std</span>::<span class="keyword">size_t</span> bytenum = bitnum / <span class="number">64</span>;</span><br><span class="line">            bitnum = bitnum % <span class="number">64</span>;</span><br><span class="line">            ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> mask = ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; bitnum;</span><br><span class="line">            <span class="keyword">return</span> bitref(ints_[bytenum], mask);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ::<span class="built_in">std</span>::<span class="keyword">uint64_t</span> ints_[numints];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><blockquote><p><a href="http://stackoverflow.com/questions/8565674/bit-vectors-in-c" target="_blank" rel="noopener">http://stackoverflow.com/questions/8565674/bit-vectors-in-c</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Programming Pearl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unittest_GRPC</title>
      <link href="/2017/02/24/Unittest-GRPC/"/>
      <url>/2017/02/24/Unittest-GRPC/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>I tried to merge unittest into my server project which based on GRPC. I use <a href="https://github.com/google/googletest" target="_blank" rel="noopener">Google Test</a> as the unittest library. Hope this article can give you merge Google Test into your exist project.</p><h2 id="Google-Test"><a href="#Google-Test" class="headerlink" title="Google Test"></a>Google Test</h2><ol><li>compile <code>Google Test</code> samples</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;googletest.git</span><br><span class="line">cd googletest&#x2F;googletest</span><br><span class="line">cmake -Dgtest_build_samples&#x3D;ON .&#x2F;</span><br><span class="line">make</span><br><span class="line">ls samples</span><br></pre></td></tr></table></figure><p>You can read samples in <code>googletest/googletest/samples</code> to be familiar with <code>Google Test</code></p><ol><li>Makefile prepared by Google</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd googletest&#x2F;googletest&#x2F;make</span><br><span class="line">vim Makefile</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># A sample Makefile for building Google Test and using it in user</span><br><span class="line"># tests.  Please tweak it to suit your environment and project.  You</span><br><span class="line"># may want to move it to your project&#39;s root directory.</span><br><span class="line">#</span><br><span class="line"># SYNOPSIS:</span><br><span class="line">#</span><br><span class="line">#   make [all]  - makes everything.</span><br><span class="line">#   make TARGET - makes the given target.</span><br><span class="line">#   make clean  - removes all files generated by make.</span><br><span class="line"></span><br><span class="line"># Please tweak the following variable definitions as needed by your</span><br><span class="line"># project, except GTEST_HEADERS, which you can use in your own targets</span><br><span class="line"># but shouldn&#39;t modify.</span><br><span class="line"></span><br><span class="line"># Points to the root of Google Test, relative to where this file is.</span><br><span class="line"># Remember to tweak this if you move this file.</span><br><span class="line">GTEST_DIR &#x3D; ..</span><br><span class="line"></span><br><span class="line"># Where to find user code.</span><br><span class="line">USER_DIR &#x3D; ..&#x2F;samples</span><br><span class="line"></span><br><span class="line"># Flags passed to the preprocessor.</span><br><span class="line"># Set Google Test&#39;s header directory as a system directory, such that</span><br><span class="line"># the compiler doesn&#39;t generate warnings in Google Test headers.</span><br><span class="line">CPPFLAGS +&#x3D; -isystem $(GTEST_DIR)&#x2F;include</span><br><span class="line"></span><br><span class="line"># Flags passed to the C++ compiler.</span><br><span class="line">CXXFLAGS +&#x3D; -g -Wall -Wextra -pthread</span><br><span class="line"></span><br><span class="line"># All tests produced by this Makefile.  Remember to add new tests you</span><br><span class="line"># created to the list.</span><br><span class="line">TESTS &#x3D; sample1_unittest</span><br><span class="line"></span><br><span class="line"># All Google Test headers.  Usually you shouldn&#39;t change this</span><br><span class="line"># definition.</span><br><span class="line">GTEST_HEADERS &#x3D; $(GTEST_DIR)&#x2F;include&#x2F;gtest&#x2F;*.h \</span><br><span class="line">                $(GTEST_DIR)&#x2F;include&#x2F;gtest&#x2F;internal&#x2F;*.h</span><br><span class="line"></span><br><span class="line"># House-keeping build targets.</span><br><span class="line"></span><br><span class="line">all : $(TESTS)</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">rm -f $(TESTS) gtest.a gtest_main.a *.o</span><br><span class="line"></span><br><span class="line"># Builds gtest.a and gtest_main.a.</span><br><span class="line"></span><br><span class="line"># Usually you shouldn&#39;t tweak such internal variables, indicated by a</span><br><span class="line"># trailing _.</span><br><span class="line">GTEST_SRCS_ &#x3D; $(GTEST_DIR)&#x2F;src&#x2F;*.cc $(GTEST_DIR)&#x2F;src&#x2F;*.h $(GTEST_HEADERS)</span><br><span class="line"></span><br><span class="line"># For simplicity and to avoid depending on Google Test&#39;s</span><br><span class="line"># implementation details, the dependencies specified below are</span><br><span class="line"># conservative and not optimized.  This is fine as Google Test</span><br><span class="line"># compiles fast and for ordinary users its source rarely changes.</span><br><span class="line">gtest-all.o : $(GTEST_SRCS_)</span><br><span class="line">$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \</span><br><span class="line">            $(GTEST_DIR)&#x2F;src&#x2F;gtest-all.cc</span><br><span class="line"></span><br><span class="line">gtest_main.o : $(GTEST_SRCS_)</span><br><span class="line">$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \</span><br><span class="line">            $(GTEST_DIR)&#x2F;src&#x2F;gtest_main.cc</span><br><span class="line"></span><br><span class="line">gtest.a : gtest-all.o</span><br><span class="line">$(AR) $(ARFLAGS) $@ $^</span><br><span class="line"></span><br><span class="line">gtest_main.a : gtest-all.o gtest_main.o</span><br><span class="line">$(AR) $(ARFLAGS) $@ $^</span><br><span class="line"></span><br><span class="line"># Builds a sample test.  A test should link with either gtest.a or</span><br><span class="line"># gtest_main.a, depending on whether it defines its own main()</span><br><span class="line"># function.</span><br><span class="line"></span><br><span class="line">sample1.o : $(USER_DIR)&#x2F;sample1.cc $(USER_DIR)&#x2F;sample1.h $(GTEST_HEADERS)</span><br><span class="line">$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)&#x2F;sample1.cc</span><br><span class="line"></span><br><span class="line">sample1_unittest.o : $(USER_DIR)&#x2F;sample1_unittest.cc \</span><br><span class="line">                     $(USER_DIR)&#x2F;sample1.h $(GTEST_HEADERS)</span><br><span class="line">$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)&#x2F;sample1_unittest.cc</span><br><span class="line"></span><br><span class="line">sample1_unittest : sample1.o sample1_unittest.o gtest_main.a</span><br><span class="line">$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@</span><br></pre></td></tr></table></figure><p>This <code>Makefile</code> can be used to compile <code>sample1_unittest.cc</code>.<br>Our new <code>Makefile</code> for unittest can be based on this prepared <code>Makefile</code>.  </p><h2 id="Write-Test-Class"><a href="#Write-Test-Class" class="headerlink" title="Write Test Class"></a>Write Test Class</h2><p>To test our server, we need write a simple client to visit the server.<br>First of all, we can learning write a simple client from <a href="http://www.grpc.io/docs/tutorials/basic/c.html" target="_blank" rel="noopener">google’s document</a>.  </p><p>This is part of my <code>test client</code>. Generally, it define a class which can connect our server.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; user.h</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;grpc++&#x2F;grpc++.h&gt;</span><br><span class="line">#include &lt;grpc&#x2F;grpc.h&gt;</span><br><span class="line">#include &lt;grpc++&#x2F;channel.h&gt;</span><br><span class="line">#include &lt;grpc++&#x2F;client_context.h&gt;</span><br><span class="line">#include &lt;grpc++&#x2F;create_channel.h&gt;</span><br><span class="line">#include &lt;grpc++&#x2F;security&#x2F;credentials.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &quot;..&#x2F;..&#x2F;iShare_source&#x2F;iShare.grpc.pb.h&quot;</span><br><span class="line"></span><br><span class="line">using grpc::Channel;</span><br><span class="line">using grpc::ClientContext;</span><br><span class="line">using grpc::Status;</span><br><span class="line">using grpc::ClientReader;</span><br><span class="line">using helloworld::Inf;</span><br><span class="line">using helloworld::Greeter;</span><br><span class="line">using helloworld::User_detail;</span><br><span class="line">using helloworld::Reply_inf;</span><br><span class="line">using helloworld::Repeated_string;</span><br><span class="line">using helloworld::Search_result;</span><br><span class="line">using helloworld::Login_m;</span><br><span class="line">using helloworld::Sign_m;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class GreeterClient &#123;</span><br><span class="line"> public:</span><br><span class="line">  GreeterClient(std::shared_ptr&lt;Channel&gt; channel)</span><br><span class="line">      : stub_(Greeter::NewStub(channel)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Assambles the client&#39;s payload, sends it and presents the response back</span><br><span class="line">  &#x2F;&#x2F; from the server.</span><br><span class="line">    User_detail Test_User_inf(Inf request);</span><br><span class="line">    Reply_inf Test_Login(Login_m request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">  std::unique_ptr&lt;Greeter::Stub&gt; stub_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">User_detail GreeterClient::Test_User_inf(Inf request) &#123;</span><br><span class="line">    ClientContext context;</span><br><span class="line">    User_detail reply;</span><br><span class="line">    Status status &#x3D; stub_-&gt;User_inf(&amp;context, request, &amp;reply);</span><br><span class="line">    return reply;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Reply_inf GreeterClient::Test_Login(Login_m request) &#123;</span><br><span class="line">    ClientContext context;</span><br><span class="line">    Reply_inf reply;</span><br><span class="line">    Status status &#x3D; stub_-&gt;Login(&amp;context, request, &amp;reply);</span><br><span class="line">    return reply;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Write-Unittest-File"><a href="#Write-Unittest-File" class="headerlink" title="Write Unittest File"></a>Write Unittest File</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#include &quot;user.h&quot;</span><br><span class="line">#include &quot;gtest&#x2F;gtest.h&quot;</span><br><span class="line"></span><br><span class="line">TEST(iShare_user_unittest, user_inf) &#123;</span><br><span class="line">    GreeterClient greeter(grpc::CreateChannel(</span><br><span class="line">                &quot;localhost:50056&quot;, grpc::InsecureChannelCredentials()));</span><br><span class="line">    Inf request;</span><br><span class="line">    request.set_information(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">    User_detail reply &#x3D; greeter.Test_User_inf(request);</span><br><span class="line"></span><br><span class="line">    EXPECT_EQ(5, reply.friends_id_size());</span><br><span class="line">    EXPECT_EQ(5, reply.friends_name_size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Makefile-1"><a href="#Makefile-1" class="headerlink" title="Makefile"></a>Makefile</h2><p>After we finished those files, we can start to modify the <code>Makfile</code> for unittest.<br>Compare this modified <code>Makefile</code> with original <code>Makefile</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># Points to the root of Google Test, relative to where this file is.</span><br><span class="line"># Remember to tweak this if you move this file.</span><br><span class="line">GTEST_DIR &#x3D; &#x2F;home&#x2F;ubuntu&#x2F;Program&#x2F;third_part_library&#x2F;googletest&#x2F;googletest</span><br><span class="line"></span><br><span class="line"># Where to find user code.</span><br><span class="line">USER_DIR &#x3D; .</span><br><span class="line"></span><br><span class="line"># Flags passed to the preprocessor.</span><br><span class="line"># Set Google Test&#39;s header directory as a system directory, such that</span><br><span class="line"># the compiler doesn&#39;t generate warnings in Google Test headers.</span><br><span class="line">CPPFLAGS +&#x3D; -isystem $(GTEST_DIR)&#x2F;include</span><br><span class="line"></span><br><span class="line"># Flags passed to the C++ compiler.</span><br><span class="line">CXXFLAGS +&#x3D; -std&#x3D;c++11 -g -Wall -Wextra -pthread</span><br><span class="line"></span><br><span class="line"># All tests produced by this Makefile.  Remember to add new tests you</span><br><span class="line"># created to the list.</span><br><span class="line">TESTS &#x3D; user_unittest</span><br><span class="line"></span><br><span class="line"># All Google Test headers.  Usually you shouldn&#39;t change this</span><br><span class="line"># definition.</span><br><span class="line">GTEST_HEADERS &#x3D; $(GTEST_DIR)&#x2F;include&#x2F;gtest&#x2F;*.h \</span><br><span class="line">                $(GTEST_DIR)&#x2F;include&#x2F;gtest&#x2F;internal&#x2F;*.h</span><br><span class="line"></span><br><span class="line"># House-keeping build targets.</span><br><span class="line"></span><br><span class="line">all : $(TESTS)</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">rm -f $(TESTS) gtest.a gtest_main.a *.o</span><br><span class="line"></span><br><span class="line"># Builds gtest.a and gtest_main.a.</span><br><span class="line"></span><br><span class="line"># Usually you shouldn&#39;t tweak such internal variables, indicated by a</span><br><span class="line"># trailing _.</span><br><span class="line">GTEST_SRCS_ &#x3D; $(GTEST_DIR)&#x2F;src&#x2F;*.cc $(GTEST_DIR)&#x2F;src&#x2F;*.h $(GTEST_HEADERS)</span><br><span class="line"></span><br><span class="line"># For simplicity and to avoid depending on Google Test&#39;s</span><br><span class="line"># implementation details, the dependencies specified below are</span><br><span class="line"># conservative and not optimized.  This is fine as Google Test</span><br><span class="line"># compiles fast and for ordinary users its source rarely changes.</span><br><span class="line">gtest-all.o : $(GTEST_SRCS_)</span><br><span class="line">$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \</span><br><span class="line">            $(GTEST_DIR)&#x2F;src&#x2F;gtest-all.cc</span><br><span class="line"></span><br><span class="line">gtest_main.o : $(GTEST_SRCS_)</span><br><span class="line">$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \</span><br><span class="line">            $(GTEST_DIR)&#x2F;src&#x2F;gtest_main.cc</span><br><span class="line"></span><br><span class="line">gtest.a : gtest-all.o</span><br><span class="line">$(AR) $(ARFLAGS) $@ $^</span><br><span class="line"></span><br><span class="line">gtest_main.a : gtest-all.o gtest_main.o</span><br><span class="line">$(AR) $(ARFLAGS) $@ $^</span><br><span class="line"></span><br><span class="line"># Builds a sample test.  A test should link with either gtest.a or</span><br><span class="line"># gtest_main.a, depending on whether it defines its own main()</span><br><span class="line"># function.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_unittest.o : $(USER_DIR)&#x2F;user_unittest.cc \</span><br><span class="line">                    $(GTEST_HEADERS)</span><br><span class="line">$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)&#x2F;user_unittest.cc</span><br><span class="line"></span><br><span class="line">user_unittest : user_unittest.o gtest_main.a ..&#x2F;..&#x2F;iShare_source&#x2F;iShare.pb.o ..&#x2F;..&#x2F;iShare_source&#x2F;iShare.grpc.pb.o</span><br><span class="line">$(CXX) $(CPPFLAGS) $(CXXFLAGS) -L&#x2F;usr&#x2F;local&#x2F;lib &#96;pkg-config --libs grpc++ grpc&#96; -Wl,\</span><br><span class="line">--no-as-needed -lgrpc++_reflection -Wl,--as-needed -lprotobuf -lpthread -ldl $^ -o $@</span><br></pre></td></tr></table></figure><h2 id="Sample-Project"><a href="#Sample-Project" class="headerlink" title="Sample Project"></a>Sample Project</h2><p>You can find my unittest project <a href="https://github.com/gfxcc/iShareServer/tree/alpha/iShare_unitTest" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic_Programming</title>
      <link href="/2017/02/22/Dynamic-Programming/"/>
      <url>/2017/02/22/Dynamic-Programming/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get-Kth-Smallest-Element-of-BST-by-MorrisTraversal</title>
      <link href="/2017/02/13/Get-Kth-Smallest-Element-of-BST-by-MorrisTraversal/"/>
      <url>/2017/02/13/Get-Kth-Smallest-Element-of-BST-by-MorrisTraversal/</url>
      
        <content type="html"><![CDATA[<p>Recursive solution can solve this question in <code>O(n)</code> time complexity and <code>O(n)</code> space complexity at worst case.<br>With <a href="http://yonglife.com/2017/01/28/Morris-Traversal/">MorrisTraversal</a>, we can optimize space complexity to <code>O(1)</code> without increasing time complexity.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        TreeNode* cur = root, *tmp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--k == <span class="number">0</span>)</span><br><span class="line">                    res = cur-&gt;val;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = cur-&gt;left;</span><br><span class="line">                <span class="keyword">while</span> (tmp-&gt;right &amp;&amp; tmp-&gt;right != cur)</span><br><span class="line">                    tmp = tmp-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (tmp-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    tmp-&gt;right = cur;</span><br><span class="line">                    cur = cur-&gt;left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">                    <span class="keyword">if</span> (--k == <span class="number">0</span>)</span><br><span class="line">                        res =  cur-&gt;val;</span><br><span class="line">                    cur = cur-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><blockquote><p><a href="http://yonglife.com/2017/02/06/Get-Height-of-Binary-Tree-by-MorrisTraversal/">http://yonglife.com/2017/02/06/Get-Height-of-Binary-Tree-by-MorrisTraversal/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> MorrisTraversal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart_Pointers</title>
      <link href="/2017/02/09/Smart-Pointers/"/>
      <url>/2017/02/09/Smart-Pointers/</url>
      
        <content type="html"><![CDATA[<h1 id="Shared-ptr"><a href="#Shared-ptr" class="headerlink" title="Shared_ptr"></a>Shared_ptr</h1><p><code>shared_ptr</code> use <strong>reference count</strong> to manage memory automatically. The <strong>reference count</strong> start from <code>1</code>, once <code>shared_ptr</code> be assigned new memory(none other <code>shared_ptr</code> point to the same address). If a new <code>shared_ptr</code> point to the same memory, it will increase <strong>reference count</strong> from <code>1 to 2</code>. Destructing <code>shared_ptr</code> will reduce the <strong>reference count</strong>. The memory will be free if <strong>reference count</strong> become <code>0</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// point to int with value 42, reference count 1</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Both reference count of p and q are 2</span></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; q = p; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reference count of p become 1 again, since q was destructed</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reference count of p become 0, delete memory</span></span><br></pre></td></tr></table></figure><h2 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h2><p>The source code of <code>shared_ptr</code> from gcc</p><h3 id="Construct"><a href="#Construct" class="headerlink" title="Construct"></a>Construct</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">shared_ptr</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> __shared_ptr&lt;_Tp&gt;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>()</span><br><span class="line">    : __shared_ptr&lt;_Tp&gt;() &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * many many functions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, _Lock_policy _Lp&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> __<span class="title">shared_ptr</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp1&gt;</span><br><span class="line">        <span class="keyword">explicit</span></span><br><span class="line">        __shared_ptr(_Tp1* __p)</span><br><span class="line">: _M_ptr(__p), _M_refcount(__p)</span><br><span class="line">        &#123;</span><br><span class="line">  __glibcxx_function_requires(_ConvertibleConcept&lt;_Tp1*, _Tp*&gt;)</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span> _IsComplete[<span class="keyword">sizeof</span>(_Tp1)];</span><br><span class="line">  __enable_shared_from_this_helper(_M_refcount, __p, __p);</span><br><span class="line">&#125;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      *  many many functions</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      _Tp*            _M_ptr;         <span class="comment">// Contained pointer.</span></span><br><span class="line">      __shared_count&lt;_Lp&gt;  _M_refcount;    <span class="comment">// Reference counter.</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>class <code>__shared_count</code> has a pinter <code>_M_ptr</code> (You can find the definition of this class just below this part) which contain a pointer pointed to the memory managed by <code>shared_ptr</code>. In this way, <code>__shared_count</code> can free the memory once <strong>reference count</strong> become <code>0</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">template</span>&lt;_Lock_policy _Lp = __default_lock_policy&gt;</span><br><span class="line">   class __shared_count</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     __shared_count()</span><br><span class="line">     : _M_pi(<span class="number">0</span>) <span class="comment">// nothrow</span></span><br><span class="line">     &#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Ptr&gt;</span><br><span class="line">       __shared_count(_Ptr __p) : _M_pi(<span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">  __try</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::tr1::remove_pointer&lt;_Ptr&gt;::type _Tp;</span><br><span class="line">      _M_pi = <span class="keyword">new</span> _Sp_counted_base_impl&lt;_Ptr, _Sp_deleter&lt;_Tp&gt;, _Lp&gt;(</span><br><span class="line">          __p, _Sp_deleter&lt;_Tp&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">  __catch(...)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> __p;</span><br><span class="line">      __throw_exception_again;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * many many functions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">     <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> __<span class="title">weak_count</span>&lt;_Lp&gt;;</span></span><br><span class="line">     _Sp_counted_base&lt;_Lp&gt;*  _M_pi;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>definition of class <code>smart point count</code>. This class might be used by both <code>shared_ptr</code> and <code>weak_ptr</code>. Both <code>_M_use_count</code> and <code>_M_weak_count</code> will be initialize to <code>1</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">template</span>&lt;_Lock_policy _Lp = __default_lock_policy&gt;</span><br><span class="line">  class _Sp_counted_base</span><br><span class="line">  : <span class="keyword">public</span> _Mutex_base&lt;_Lp&gt;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    _Sp_counted_base()</span><br><span class="line">    : _M_use_count(<span class="number">1</span>), _M_weak_count(<span class="number">1</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * many many functions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    _Sp_counted_base(_Sp_counted_base <span class="keyword">const</span>&amp;);</span><br><span class="line">    _Sp_counted_base&amp; <span class="keyword">operator</span>=(_Sp_counted_base <span class="keyword">const</span>&amp;);</span><br><span class="line"></span><br><span class="line">    _Atomic_word  _M_use_count;     <span class="comment">// #shared</span></span><br><span class="line">    _Atomic_word  _M_weak_count;    <span class="comment">// #weak + (#shared != 0)</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Ptr, <span class="keyword">typename</span> _Deleter, _Lock_policy _Lp&gt;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> _<span class="title">Sp_counted_base_impl</span></span></span><br><span class="line"><span class="class">   :</span> <span class="keyword">public</span> _Sp_counted_base&lt;_Lp&gt;</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">// Precondition: __d(__p) must not throw.</span></span><br><span class="line">     _Sp_counted_base_impl(_Ptr __p, _Deleter __d)</span><br><span class="line">     : _M_ptr(__p), _M_del(__d) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * many functions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">     _Sp_counted_base_impl(<span class="keyword">const</span> _Sp_counted_base_impl&amp;);</span><br><span class="line">     _Sp_counted_base_impl&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> _Sp_counted_base_impl&amp;);</span><br><span class="line"></span><br><span class="line">     _Ptr      _M_ptr;  <span class="comment">// copy constructor must not throw</span></span><br><span class="line">     _Deleter  _M_del;  <span class="comment">// copy constructor must not throw</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><h3 id="Destruct"><a href="#Destruct" class="headerlink" title="Destruct"></a>Destruct</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         ~__shared_count() <span class="comment">// nothrow</span></span><br><span class="line">     &#123;</span><br><span class="line"><span class="keyword">if</span> (_M_pi != <span class="number">0</span>)</span><br><span class="line">  _M_pi-&gt;_M_release();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>Checking <code>_M_use_count</code>. If it equals to <code>1</code>, free memory.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">         <span class="keyword">void</span></span><br><span class="line">     _M_release() <span class="comment">// nothrow</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// Be race-detector-friendly.  For more info see bits/c++config.</span></span><br><span class="line">       _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_use_count);</span><br><span class="line"><span class="keyword">if</span> (__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count, <span class="number">-1</span>) == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">           _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_use_count);</span><br><span class="line">    _M_dispose();</span><br><span class="line">    <span class="comment">// There must be a memory barrier between dispose() and destroy()</span></span><br><span class="line">    <span class="comment">// to ensure that the effects of dispose() are observed in the</span></span><br><span class="line">    <span class="comment">// thread that runs destroy().</span></span><br><span class="line">    <span class="comment">// See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html</span></span><br><span class="line">    <span class="keyword">if</span> (_Mutex_base&lt;_Lp&gt;::_S_need_barriers)</span><br><span class="line">      &#123;</span><br><span class="line">__atomic_thread_fence (__ATOMIC_ACQ_REL);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Be race-detector-friendly.  For more info see bits/c++config.</span></span><br><span class="line">           _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);</span><br><span class="line">    <span class="keyword">if</span> (__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_weak_count,</span><br><span class="line">       <span class="number">-1</span>) == <span class="number">1</span>)</span><br><span class="line">             &#123;</span><br><span class="line">               _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);</span><br><span class="line">        _M_destroy();</span><br><span class="line">             &#125;</span><br><span class="line">  &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>free point here by <code>_M_del</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> <span class="keyword">void</span></span><br><span class="line">    _M_dispose() <span class="comment">// nothrow</span></span><br><span class="line">    &#123; _M_del(_M_ptr); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Sp_deleter</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span> result_type;</span><br><span class="line">    <span class="keyword">typedef</span> _Tp* argument_type;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Tp* __p)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">delete</span> __p; &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">virtual</span> <span class="keyword">void</span></span><br><span class="line">_M_destroy() <span class="comment">// nothrow</span></span><br><span class="line">&#123; <span class="keyword">delete</span> <span class="keyword">this</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compiler </tag>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>producer_consumer_based_on_C++11</title>
      <link href="/2017/02/06/producer-consumer-based-on-C-11/"/>
      <url>/2017/02/06/producer-consumer-based-on-C-11/</url>
      
        <content type="html"><![CDATA[<h1 id="Producer-Consumer"><a href="#Producer-Consumer" class="headerlink" title="Producer-Consumer"></a>Producer-Consumer</h1><p>I failed to find a good producer-consumer model implemented by C++11. Tried to get used to multithread on C++11.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="function">unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">            cond.wait(locker, [<span class="keyword">this</span>]()&#123;<span class="keyword">return</span> _buffer.size() &lt; _size;&#125;);</span><br><span class="line">            _buffer.push_back(num);</span><br><span class="line">            locker.unlock();</span><br><span class="line">            cond.notify_all();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">            cond.wait(locker, [<span class="keyword">this</span>]()&#123;<span class="keyword">return</span> _buffer.size() &gt; <span class="number">0</span>;&#125;);</span><br><span class="line">            <span class="keyword">int</span> back = _buffer.back();</span><br><span class="line">            _buffer.pop_back();</span><br><span class="line">            locker.unlock();</span><br><span class="line">            cond.notify_all();</span><br><span class="line">            <span class="keyword">return</span> back;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Buffer() &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Add them as member variables here</span></span><br><span class="line">    mutex mu;</span><br><span class="line">    condition_variable cond;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Your normal variables here</span></span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; _buffer;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _size = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Producer(Buffer&amp; buffer, <span class="built_in">std</span>::mutex&amp; mu_output) : _buffer(buffer), _mu_output(mu_output) &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="built_in">std</span>::rand() % <span class="number">100</span>;</span><br><span class="line">            _buffer.add(num);</span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_mu_output)</span></span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Produced: "</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">50</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex&amp; _mu_output;</span><br><span class="line">    Buffer&amp; _buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Consumer(Buffer&amp; buffer, <span class="built_in">std</span>::mutex&amp; mu_output) : _buffer(buffer), _mu_output(mu_output) &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = _buffer.remove();</span><br><span class="line">            <span class="function">unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(_mu_output)</span></span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Consumed: "</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex&amp; _mu_output;</span><br><span class="line">    Buffer&amp; _buffer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Buffer buff;</span><br><span class="line">    mutex mu_output;</span><br><span class="line">    <span class="function">Producer <span class="title">p</span><span class="params">(buff, mu_output)</span></span>;</span><br><span class="line">    <span class="function">Consumer <span class="title">c</span><span class="params">(buff, mu_output)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">producer_thread</span><span class="params">(&amp;Producer::run, &amp;p)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::thread <span class="title">consumer_thread</span><span class="params">(&amp;Consumer::run, &amp;c)</span></span>;</span><br><span class="line">    </span><br><span class="line">    producer_thread.join();</span><br><span class="line">    consumer_thread.join();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="discussion"><a href="#discussion" class="headerlink" title="discussion"></a>discussion</h1><h3 id="Thread-safe-about-cout"><a href="#Thread-safe-about-cout" class="headerlink" title="Thread safe about cout"></a>Thread safe about <code>cout</code></h3><p>In C++11, we do have some guarantees. </p><blockquote><p>Concurrent access to a synchronized (§27.5.3.4) standard iostream object’s formatted and unformatted input (§27.7.2.1) and output (§27.7.3.1) functions or a standard C stream by multiple threads shall not result in a data race (§1.10). [ Note: Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. — end note ]</p></blockquote><p>So we still need lock to avoid interleaved characters.</p><h3 id="lock-guard-vs-unique-lock"><a href="#lock-guard-vs-unique-lock" class="headerlink" title="lock_guard vs unique_lock"></a>lock_guard vs unique_lock</h3><p>if you implement producer or consumer in this way</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Consumer(Buffer&amp; buffer, <span class="built_in">std</span>::mutex&amp; mu_output) : _buffer(buffer), _mu_output(mu_output) &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = _buffer.remove();</span><br><span class="line">            <span class="comment">// use lock_gurad instead of unique_lock</span></span><br><span class="line">            <span class="function">lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(_mu_output)</span></span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Consumed: "</span> &lt;&lt; num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            this_thread::sleep_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex&amp; _mu_output;</span><br><span class="line">    Buffer&amp; _buffer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It might lead to consumer and producer running in turn. Since they will hold the lock during <code>sleep</code> process.</p><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h3><blockquote><p><a href="http://codereview.stackexchange.com/questions/84109/a-multi-threaded-producer-consumer-with-c11" target="_blank" rel="noopener">http://codereview.stackexchange.com/questions/84109/a-multi-threaded-producer-consumer-with-c11</a><br><a href="http://blog.poxiao.me/p/multi-threading-in-cpp11-part-2-mutex-and-lock/" target="_blank" rel="noopener">http://blog.poxiao.me/p/multi-threading-in-cpp11-part-2-mutex-and-lock/</a><br><a href="http://stackoverflow.com/questions/6374264/is-cout-synchronized-thread-safe" target="_blank" rel="noopener">http://stackoverflow.com/questions/6374264/is-cout-synchronized-thread-safe</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get_Height_of_Binary_Tree_by_MorrisTraversal</title>
      <link href="/2017/02/06/Get-Height-of-Binary-Tree-by-MorrisTraversal/"/>
      <url>/2017/02/06/Get-Height-of-Binary-Tree-by-MorrisTraversal/</url>
      
        <content type="html"><![CDATA[<p>I noticed a qestion from an interview. Calculating height of a binary tree without recursion.<br>The simplest solution should be iterating the whole tree with <code>stack</code>. Using another <code>stack</code> to store height while we store parent nodes.<br>But this algorithm takes <code>O(n)</code> space at worst case which the tree looks like a linked list.<br>To optimize this space complexity, we can use <a href="http://yonglife.com/2017/01/28/Morris-Traversal/">Morris-Traversal</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetHeightByMorrisTraversal</span> <span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        TreeNode* cur = root, *prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> deep = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                res = max(res, deep);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span> &lt;&lt; deep &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">                deep++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = cur-&gt;left;</span><br><span class="line">                <span class="keyword">int</span> move = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (prev-&gt;right &amp;&amp; prev-&gt;right != cur) &#123;</span><br><span class="line">                    prev = prev-&gt;right;</span><br><span class="line">                    move++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (prev-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    prev-&gt;right = cur;</span><br><span class="line">                    cur = cur-&gt;left;</span><br><span class="line">                    deep++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// back to parent node, remove connection</span></span><br><span class="line">                    prev-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">                    deep -= move + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span> &lt;&lt; deep &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    cur = cur-&gt;right;</span><br><span class="line">                    deep++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> MorrisTraversal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website_for_SQL</title>
      <link href="/2017/02/06/Website-for-SQL/"/>
      <url>/2017/02/06/Website-for-SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Practise-Sql"><a href="#Practise-Sql" class="headerlink" title="Practise Sql"></a>Practise Sql</h2><p><a href="http://pgexercises.com/questions/joins/" target="_blank" rel="noopener">Sql pracise website</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>two_points</title>
      <link href="/2017/02/04/two-points/"/>
      <url>/2017/02/04/two-points/</url>
      
        <content type="html"><![CDATA[<p>I thinks <code>two_points</code> is a weird algorithm. It solves question efficiently (always in <code>O(n)</code>) without using advanced data structure or amazing math trick. It is seems dark magic to me at the very begin. I want this post can help you understand this kind of thinking.</p><ol><li>Move one side</li><li>Restricted search<ol><li>single restrain</li><li>multiple restrain</li></ol></li><li>Mark zone</li><li>In LinkedList<ol><li>tail node</li><li>fast and slow node</li></ol></li></ol><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>I know it is pretty easy. But it is a good example to introduce the concept.<code>two points</code></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">ReverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = s.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">swap(s[l++], s[r--]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h2 id="Move-One-Side"><a href="#Move-One-Side" class="headerlink" title="Move One Side"></a>Move One Side</h2><p>Sometimes, we can guarantee that only moving left(right) point can approach target value.</p><h3 id="Determine-two-sum-in-sorted-array"><a href="#Determine-two-sum-in-sorted-array" class="headerlink" title="Determine two sum in sorted array"></a>Determine two sum in sorted array</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ExistTwoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = vec.size(), l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> val = vec[l] + vec[r];</span><br><span class="line"><span class="keyword">if</span> (val == target)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (val &gt; target)</span><br><span class="line">r--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>val = vec[l] + vec[r]</code> less than target, the possible rusult can only be found by <code>l++</code>. Same thing when <code>val &gt; target</code>.<br>This is what I said <strong>we can guarantee that only moving left(right) point can approach target value.</strong>.<br>Based on this thought, we can solve some tough question.</p><h3 id="Container-With-Most-Water"><a href="#Container-With-Most-Water" class="headerlink" title="Container With Most Water"></a>Container With Most Water</h3><p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = height.size(), l = <span class="number">0</span>, r = n - <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        res = max(res, (r - l) * min(height[l], height[r]));</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r])</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The thought is similar. Under all conditions, we should move the point with small height to approach the potential greater value.</p><p><strong>explain</strong><br>l = 3, r = 9, height[3] = 4, height[9] = 10;<br>Under this condition, if we move right point(<code>--r</code>), it can only reduce the val (<code>val = (r - l) * min(H[l], H[r])</code>), since <code>r - l</code> will decrease and <code>min(H[l], H[r])</code> can only decrease too.</p><h3 id="Trapping-Rain-Wate"><a href="#Trapping-Rain-Wate" class="headerlink" title="Trapping Rain Wate"></a>Trapping Rain Wate</h3><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p>For example,<br>Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.<br><img src="/images/two_points_trapping_water.png" alt="image">  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = height.size(), l = <span class="number">0</span>, r = n - <span class="number">1</span>, res = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[l] &gt; left)</span><br><span class="line">                left = height[l++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res += left - height[l++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[r] &gt; right)</span><br><span class="line">                right = height[r--];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res += right - height[r--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar thought with previous question. Under all condtions, we can only find the target value by moving the small point.</p><hr><h2 id="Restricted-Search"><a href="#Restricted-Search" class="headerlink" title="Restricted Search"></a>Restricted Search</h2><p>Searching for target result which have some restricted condition.</p><h3 id="Longest-Substring-with-At-Most-Two-Distinct-Characters"><a href="#Longest-Substring-with-At-Most-Two-Distinct-Characters" class="headerlink" title="Longest Substring with At Most Two Distinct Characters"></a>Longest Substring with At Most Two Distinct Characters</h3><p>Given a string, find the length of the longest substring T that contains at most 2 distinct characters.</p><p>For example, Given s = “eceba”,</p><p>T is “ece” which its length is 3.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size(), l = <span class="number">0</span>, r = <span class="number">0</span>, res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[s[r++]]++ == <span class="number">0</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt;= <span class="number">2</span>)</span><br><span class="line">                res = max(res, r - l);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[s[l++]]-- == <span class="number">1</span>)</span><br><span class="line">                cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h3><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Examples:</p><p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p><p>Given “bbbbb”, the answer is “b”, with the length of 1.</p><p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size(), l = <span class="number">0</span>, r = <span class="number">0</span>, res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[s[r]] == <span class="number">0</span>) &#123;</span><br><span class="line">            mp[s[r++]]++;</span><br><span class="line">            res = max(res, r - l);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mp[s[l++]]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Mark-Zone"><a href="#Mark-Zone" class="headerlink" title="Mark Zone"></a>Mark Zone</h2><p>We can also use point to mark different zone like <code>0~l</code>, <code>r~(n-1)</code>. </p><h3 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h3><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p><p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p><p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, n = nums.size(), tmp;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; n &amp;&amp; r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[l]) &#123;</span><br><span class="line">            l++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = max(l + <span class="number">1</span>, r);</span><br><span class="line">            <span class="keyword">while</span> (r &lt; n &amp;&amp; nums[r] == <span class="number">0</span>)</span><br><span class="line">                r++;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">                swap(nums[l], nums[r]);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This program use point <code>l</code> to mark zone <code>0~(l-1)</code> which store non-zone element.</p><h3 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h3><p>Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p><p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size(), l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            swap(nums[i], nums[l++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            swap(nums[i--], nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This prgoram use <code>0~(l-1)</code> store <code>integers 1</code>, <code>(r + 1)~(n - 1)</code></p><hr><h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><p>I think <code>two points</code> is an elegent algorithm dealing with LinkedList question.  </p><h2 id="Tail-Node"><a href="#Tail-Node" class="headerlink" title="Tail Node"></a>Tail Node</h2><p>We can use tail node to find the <code>nth element</code> count from the end of the linked list easily.</p><p>p—–p———-<br>———-p—–p</p><h3 id="Rotate-List"><a href="#Rotate-List" class="headerlink" title="Rotate List"></a>Rotate List</h3><p>Given a list, rotate the list to the right by k places, where k is non-negative. k &lt; size of list.</p><p>For example:<br>Given <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code> and k = 2,<br>return <code>4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    ListNode *cur = head, *tail = head, *tmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!k)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (tail-&gt;next) &#123;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = cur-&gt;next;</span><br><span class="line">    tail-&gt;next = head;</span><br><span class="line">    cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The key point is find the <code>kth-element</code> count from the tail of the linked list.</p><h2 id="Fast-and-Slow-Nodes"><a href="#Fast-and-Slow-Nodes" class="headerlink" title="Fast and Slow Nodes"></a>Fast and Slow Nodes</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fast = fast-&gt;next-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br></pre></td></tr></table></figure><p>In this way, we can get the middle point of a linked list without count the size of it.<br>At the same time, we can determine if a linked list have cycle in it.</p><h3 id="Palindrome-Linked-List"><a href="#Palindrome-Linked-List" class="headerlink" title="Palindrome Linked List"></a>Palindrome Linked List</h3><p>Given a singly linked list, determine if it is a palindrome.  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* next = head, *prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (next) &#123;</span><br><span class="line">            ListNode* tmp = next-&gt;next;</span><br><span class="line">            next-&gt;next = prev;</span><br><span class="line">            prev = next;</span><br><span class="line">            next = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        ListNode* fast = head, *slow = head, *half = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        half = reverseList(slow-&gt;next);</span><br><span class="line">        <span class="keyword">while</span> (half) &#123;</span><br><span class="line">            <span class="keyword">if</span> (half-&gt;val != head-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            half = half-&gt;next;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Linked-List-Cycle"><a href="#Linked-List-Cycle" class="headerlink" title="Linked List Cycle"></a>Linked List Cycle</h3><p>Given a linked list, determine if it has a cycle in it.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    ListNode* slow = head, *fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nth_element-Introselect</title>
      <link href="/2017/02/02/nth-element-Introselect/"/>
      <url>/2017/02/02/nth-element-Introselect/</url>
      
        <content type="html"><![CDATA[<h1 id="quickselect"><a href="#quickselect" class="headerlink" title="quickselect"></a>quickselect</h1><p>Time complexity of <code>nth_element</code> in average is <code>O(n)</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Iter</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">nth_element</span>(<span class="title">Iter</span> <span class="title">first</span>, <span class="title">Iter</span> <span class="title">nth</span>, <span class="title">Iter</span> <span class="title">last</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (last - first &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    Iter cut =</span><br><span class="line">      unguarded_partition(first, last,</span><br><span class="line">                          T(median(*first,</span><br><span class="line">                                   *(first + (last - first)/<span class="number">2</span>),</span><br><span class="line">                                   *(last - <span class="number">1</span>))));</span><br><span class="line">    <span class="keyword">if</span> (cut &lt;= nth)</span><br><span class="line">      first = cut;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      last = cut;</span><br><span class="line">  &#125;</span><br><span class="line">  insertion_sort(first, last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is an implement base on <a href="https://en.wikipedia.org/wiki/Quickselect" target="_blank" rel="noopener"><code>QuickSelect</code></a>. The thought is simple. Try to find the mediant(not guarantee), and move elements smaller to the left, bigger to the right. Do this recursively. </p><p>The time complexity should be <code>n + n/2 + n/4 + ... = 2n</code> which is <code>O(n)</code> in average. Worst-case <code>O(n^2)</code></p><h1 id="introselect"><a href="#introselect" class="headerlink" title="introselect"></a>introselect</h1><p>With <a href="https://en.wikipedia.org/wiki/Introselect" target="_blank" rel="noopener">introselect</a> which combine quickselect and linear-time selection algorithm(the Blum-Floyd-Pratt-Rivest-Tarjan median of medians algorithm), we can implement nth_element in <code>O(n)</code> even at worst-case.</p><p>However, bellow code from <a href="https://github.com/gcc-mirror/gcc" target="_blank" rel="noopener">stdlibc++</a> did not implement a typical introselect algorithm. It uses heapselect which falls back to <code>O(n * log(n))</code> not <code>O(n)</code>. Detail discuss about this can be found <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=35968" target="_blank" rel="noopener">here</a>. Generally it because <code>C++ standard does _not_ require O(n) worst-case behavior for nth_element.</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,</span><br><span class="line">        _RandomAccessIterator __last)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::__introselect(__first, __nth, __last,</span><br><span class="line">            <span class="built_in">std</span>::__lg(__last - __first) * <span class="number">2</span>,</span><br><span class="line">            __gnu_cxx::__ops::__iter_less_iter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,</span><br><span class="line">        _RandomAccessIterator __last, _Size __depth_limit,</span><br><span class="line">        _Compare __comp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (__last - __first &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (__depth_limit == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::__heap_select(__first, __nth + <span class="number">1</span>, __last, __comp);</span><br><span class="line">            <span class="comment">// Place the nth largest element in its final position.</span></span><br><span class="line">            <span class="built_in">std</span>::iter_swap(__first, __nth);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --__depth_limit;</span><br><span class="line">        _RandomAccessIterator __cut =</span><br><span class="line">            <span class="built_in">std</span>::__unguarded_partition_pivot(__first, __last, __comp);</span><br><span class="line">        <span class="keyword">if</span> (__cut &lt;= __nth)</span><br><span class="line">            __first = __cut;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            __last = __cut;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::__insertion_sort(__first, __last, __comp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nth_element</span></span><br></pre></td></tr></table></figure><p>If We moved too deeply like <code>log2(last - first) * 2)</code> which is twice time as our expection. we will move to <code>heapselect</code>algorithm.</p><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h3><blockquote><p><a href="http://stackoverflow.com/questions/29145520/how-is-nth-element-implemented" target="_blank" rel="noopener">http://stackoverflow.com/questions/29145520/how-is-nth-element-implemented</a><br><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=35968" target="_blank" rel="noopener">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=35968</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heapsort</title>
      <link href="/2017/02/02/Heapsort/"/>
      <url>/2017/02/02/Heapsort/</url>
      
        <content type="html"><![CDATA[<p><strong>For people who like real c++ style code.</strong></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildHeap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> index, <span class="keyword">int</span> range)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = vec[index], child = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &lt; range) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child + <span class="number">1</span> &lt; range &amp;&amp; vec[child] &lt; vec[child + <span class="number">1</span>])</span><br><span class="line">                child++;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; vec[child]) &#123;</span><br><span class="line">                vec[index] = vec[child];</span><br><span class="line">                index = child;</span><br><span class="line">                child = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vec[index] = val;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>)vec.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            BuildHeap(vec, i, n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(vec[<span class="number">0</span>], vec[i]);</span><br><span class="line">            BuildHeap(vec, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    BuildHeap(vec, i, n);</span><br></pre></td></tr></table></figure><p>takes <code>O(n)</code> to initialize original vector which builds a max-heap<br><img src="/images/proveOfHeapsort.jpeg" alt="prove"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    swap(vec[<span class="number">0</span>], vec[i]);</span><br><span class="line">    BuildHeap(vec, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>takes <code>log(n) * n</code></p><p>So, it takes <code>n * log(n)</code> to sort the vector</p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Partical_Sorting</title>
      <link href="/2017/02/02/Partical-Sorting/"/>
      <url>/2017/02/02/Partical-Sorting/</url>
      
        <content type="html"><![CDATA[<h1 id="Heap-based-solution"><a href="#Heap-based-solution" class="headerlink" title="Heap-based solution"></a>Heap-based solution</h1><p>Time Complexity<code>n * log(k)</code> </p><p>Space Complexity<code>k</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">print_queue</span><span class="params">(T&amp; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HeapBasedParticalSorting</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>)vec.size();</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; i &lt; n; i++)</span><br><span class="line">            pq.push(vec[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; i++) &#123;</span><br><span class="line">            pq.push(vec[i]);</span><br><span class="line">            pq.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        print_queue(pq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Solution-by-partitioning-selection"><a href="#Solution-by-partitioning-selection" class="headerlink" title="Solution by partitioning selection"></a>Solution by partitioning selection</h1><p>Combine quickselect and quicksort<br>Time Complexity<code>n + klogk</code></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary_Tree_Traversal</title>
      <link href="/2017/01/28/Binary-Tree-Traversal/"/>
      <url>/2017/01/28/Binary-Tree-Traversal/</url>
      
        <content type="html"><![CDATA[<p>I have always forgetton the Iterator version. Hope this post can help those people who have the same problem with me.<br>Those code are the simplest thought I can found.</p><p><strong>Preorder</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (st.size()) &#123;</span><br><span class="line">            TreeNode* cur = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">                res.push_back(cur-&gt;val);</span><br><span class="line">                st.push(cur-&gt;right);</span><br><span class="line">                st.push(cur-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Inorder</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st; <span class="comment">// used to record the middle node</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span> (st.size() || cur) &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur) &#123; <span class="comment">// keep looking for the most left node</span></span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = st.top(); <span class="comment">// back to the previous level</span></span><br><span class="line">            st.pop();</span><br><span class="line">            res.push_back(cur-&gt;val);</span><br><span class="line">            cur = cur-&gt;right; <span class="comment">// deal with right node</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Postorder</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">while</span>(cur || st.size() )&#123;</span><br><span class="line">            <span class="keyword">while</span> (cur)&#123; <span class="comment">// keep looking for the possible son node. Going to left node first if it is possible.</span></span><br><span class="line">                   st.push(cur);</span><br><span class="line">                   cur = cur-&gt;left ? cur-&gt;left : cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            result.push_back(cur-&gt;val); </span><br><span class="line">            <span class="keyword">if</span>( st.size() &amp;&amp; st.top()-&gt;left == cur)&#123; <span class="comment">// came back from left son</span></span><br><span class="line">                cur = st.top()-&gt;right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// came from right son or deep level</span></span><br><span class="line">                cur = <span class="literal">NULL</span>; <span class="comment">// back to previous level</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Morris_Traversal</title>
      <link href="/2017/01/28/Morris-Traversal/"/>
      <url>/2017/01/28/Morris-Traversal/</url>
      
        <content type="html"><![CDATA[<p>Normal traversal on binary tree takes <code>O(n)</code> Time Complexity and <code>O(n)</code> Space Complexity.</p><p><strong>Morris Traversal</strong> can reduce the <strong>Space Complexity</strong> to <code>O(1)</code> since this algorithm does not need extra space to record parent node.</p><hr><h2 id="inorder"><a href="#inorder" class="headerlink" title="inorder"></a>inorder</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">class <span class="title">TreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode* left, *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> val) : val(val) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MorrisTraversal</span> <span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">TreeNode* cur = root, *prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (cur) &#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">prev = cur-&gt;left;</span><br><span class="line"><span class="keyword">while</span> (prev-&gt;right &amp;&amp; prev-&gt;right != cur)</span><br><span class="line">prev = prev-&gt;right;</span><br><span class="line"><span class="keyword">if</span> (prev-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line">prev-&gt;right = cur;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// back to parent node, remove connection</span></span><br><span class="line">prev-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Preorder"><a href="#Preorder" class="headerlink" title="Preorder"></a>Preorder</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MorrisTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    TreeNode *cur = root, *prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            prev = cur-&gt;left;</span><br><span class="line">            <span class="keyword">while</span> (prev-&gt;right != <span class="literal">NULL</span> &amp;&amp; prev-&gt;right != cur)</span><br><span class="line">                prev = prev-&gt;right;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// </span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; cur-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                prev-&gt;right = cur;</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                prev-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Postorder"><a href="#Postorder" class="headerlink" title="Postorder"></a>Postorder</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(TreeNode *from, TreeNode *to)</span> <span class="comment">// reverse the tree nodes 'from' -&gt; 'to'.</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (from == to)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    TreeNode *x = from, *y = from-&gt;right, *z;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        z = y-&gt;right;</span><br><span class="line">        y-&gt;right = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = z;</span><br><span class="line">        <span class="keyword">if</span> (x == to)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printReverse</span><span class="params">(TreeNode* from, TreeNode *to)</span> <span class="comment">// print the reversed tree nodes 'from' -&gt; 'to'.</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reverse(from, to);</span><br><span class="line">    </span><br><span class="line">    TreeNode *p = to;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (p == from)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = p-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    reverse(to, from);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MorrisTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="function">TreeNode <span class="title">dump</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    dump.left = root;</span><br><span class="line">    TreeNode *cur = &amp;dump, *prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            prev = cur-&gt;left;</span><br><span class="line">            <span class="keyword">while</span> (prev-&gt;right != <span class="literal">NULL</span> &amp;&amp; prev-&gt;right != cur)</span><br><span class="line">                prev = prev-&gt;right;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                prev-&gt;right = cur;</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                printReverse(cur-&gt;left, prev);  <span class="comment">// call print</span></span><br><span class="line">                prev-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h3><blockquote><p><a href="http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html" target="_blank" rel="noopener">http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP Algrothm</title>
      <link href="/2017/01/23/KMP_algrothm/"/>
      <url>/2017/01/23/KMP_algrothm/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KMP</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span> del)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = del.size(), k = <span class="number">-1</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">next</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span> || del[i] == del[k]) &#123;</span><br><span class="line">                k++, i++;</span><br><span class="line">                <span class="keyword">if</span> (del[i] != del[k])</span><br><span class="line">                    next[i] = k;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    next[i] = next[k];</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> del)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size(), m = del.size(), i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = GetNext(del);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == del[j])</span><br><span class="line">                j++, i++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != m)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> i - m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code Is Best Explanation </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2017/01/22/Binary-Search/"/>
      <url>/2017/01/22/Binary-Search/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = vec.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] == target)</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (vec[mid] &gt; target)</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是典型的 二分查找 的C++实现。相信每一个程序员都可以自信的写出来。但是实际算法中，往往需要你寻找上界，下界，有时 <code>vec[mid] == target</code> 要和 <code>&gt;</code> 或者 <code>&lt;</code>合并处理。如果你不能自信完美的实现 <code>lower_bound</code> 和 <code>upper_bound</code>，这边文章可以帮助你更好的理解 二分查找的上界，下界等细节的处理。</p><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>我们需要在 <code>while (l &lt; r)</code> <code>while (l &lt;= r)</code> <code>while (l &lt; r - 1)</code></p><p><code>l = mid + 1</code> <code>l = mid</code> <code>r = mid - 1</code> <code>r = mid</code> </p><p><code>vec[mid] &gt;= target</code> <code>vec[mid] &lt;= target</code></p><p>之间进行选择 </p><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><p>为了避免死循环，以下四种处理都是合法</p><ol><li><code>while (l &lt;= r); l = mid + 1; r = mid - 1;</code></li><li><code>while (l &lt; r); l = mid + 1; r = mid - 1;</code></li><li><code>while (l &lt; r); l = mid + 1; r = mid;</code></li><li><code>while (l &lt; r - 1); l = mid; r = mid;</code></li></ol><hr><ul><li>当<code>l &lt;= r</code> 时， <code>r = mid - 1</code>是合法的，<code>r = mid</code>会陷入死循环</li></ul><p>比如针对数组<code>0,1,2,3,4,5</code>, <code>target = 3</code>以下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123; </span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] &gt;= target)</span><br><span class="line">r = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (vec[mid] &lt; target)</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>l = 3``r = 3</code>时陷入死循环</p><hr><ul><li>当<code>l &lt; r</code>时， <code>r = mid</code>是合法的。 <code>l = mid</code>会陷入死循环</li></ul><p>比如针对数组<code>0,1,2,3,4,5</code>, <code>target = 3</code>以下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (l &lt; r) &#123; </span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] &lt;= target)</span><br><span class="line">l = mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (vec[mid] &lt; target)</span><br><span class="line">r = mid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>l = 3``r = 3</code>时陷入死循环</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写code时往往需要根据需求组合 <code>== &lt; &gt;</code>三种符号</p><p>个人推荐写法：</p><p>通常情况下都可以<code>while (l &lt; r) , l = mid + 1, r = mid</code>组合使用</p><p>当需要使用 <code>l = mid</code>时 <code>while (l &lt; r - 1), l = mid, r = mid</code> 最后再检测 <code>l，r</code>哪个一个为需要的解</p><h3 id="在sorted数组中，返回第一个不小于target的元素的index"><a href="#在sorted数组中，返回第一个不小于target的元素的index" class="headerlink" title="在sorted数组中，返回第一个不小于target的元素的index"></a>在sorted数组中，返回第一个不小于target的元素的index</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = vec.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (target &lt;= vec[mid])</span><br><span class="line">r = mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vec[l] &gt;= target ? l : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>vec[mid] == target</code> -&gt; <code>r = mid</code></li><li><code>vec[mid] &lt; target</code> -&gt; <code>l = mid + 1</code></li><li><code>vec[mid] &gt; target</code> -&gt; <code>r = mid - 1</code></li></ol><p>所以 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vec[mid] &gt;= target)</span><br><span class="line">r = mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="在sorted数组中，返回第一个大于target的元素的index"><a href="#在sorted数组中，返回第一个大于target的元素的index" class="headerlink" title="在sorted数组中，返回第一个大于target的元素的index"></a>在sorted数组中，返回第一个大于target的元素的index</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = vec.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] &lt;= target)</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vec[l] &gt; target ? l : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>vec[mid] == target</code> -&gt; <code>l = mid + 1</code></li><li><code>vec[mid] &lt; target</code> -&gt; <code>l = mid + 1</code></li><li><code>vec[mid] &gt; target</code> -&gt; <code>r = mid</code></li></ol><p>所以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vec[mid] &lt;= target)</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid;</span><br></pre></td></tr></table></figure><h3 id="在sorted数组中，返回第一个target元素的index"><a href="#在sorted数组中，返回第一个target元素的index" class="headerlink" title="在sorted数组中，返回第一个target元素的index"></a>在sorted数组中，返回第一个target元素的index</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = vec.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] &gt;= target)</span><br><span class="line">r = mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vec[l] == target ? l : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>vec[mid] == target</code> -&gt; <code>r = mid</code></li><li><code>vec[mid] &gt; target</code>  -&gt; <code>r = mid - 1</code></li><li><code>vec[mid] &lt; target</code>  -&gt; <code>l = mid + 1</code></li></ol><h3 id="在sorted数组中，返回最后一个target元素的index"><a href="#在sorted数组中，返回最后一个target元素的index" class="headerlink" title="在sorted数组中，返回最后一个target元素的index"></a>在sorted数组中，返回最后一个target元素的index</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = vec.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (vec[mid] &lt;= target)</span><br><span class="line">l = mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vec[r] == target ? r : (vec[l] == target ? l : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>vec[mid] == target</code> -&gt; <code>l = mid</code></li><li><code>vec[mid] &gt; target</code>  -&gt; <code>r = mid - 1</code></li><li><code>vec[mid] &lt; target</code>  -&gt; <code>l = mid + 1</code></li></ol><p>需要注意的是，因为<code>l = mid</code>，所以 <code>while (l &lt; r - 1)</code>以避免死循环</p><hr><h2 id="Binary-Search-in-Rotated-Array"><a href="#Binary-Search-in-Rotated-Array" class="headerlink" title="Binary Search in Rotated Array"></a>Binary Search in Rotated Array</h2><p>I met this question in an interview.<br>Well, you can definitely find a more elegent solution than this one.<br>The thought is simple, find the indent first. Then, you can transfer this question into typical binary search.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> indent = <span class="number">0</span>, n = nums.size(), l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[l] &lt; nums[r]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt;= nums[l]) &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        indent = l;</span><br><span class="line">        l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + (r - l) / <span class="number">2</span> + indent) % n;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                r = l + (r - l) / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                l = l + (r - l) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[(l + indent) % n] == target ? ((l + indent) % n) : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple Push Notification</title>
      <link href="/2016/09/26/material-for-Apple-Push-Notification/"/>
      <url>/2016/09/26/material-for-Apple-Push-Notification/</url>
      
        <content type="html"><![CDATA[<h1 id="Materials-for-APN"><a href="#Materials-for-APN" class="headerlink" title="Materials for APN"></a>Materials for APN</h1><hr><p>To add APN function to iShare, I try to find make a demo on Mac OS 10.10. Follow thoes listed steps, you can test your program<br> Objective-C post program or PHP.</p><blockquote><ul><li><a href="http://blog.diveinedu.net/pushmebaby_apns_notification/" target="_blank" rel="noopener">basic steps for APN in Chinese</a></li><li><a href="http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1" target="_blank" rel="noopener">basic steps for APN in English</a></li><li><a href="https://github.com/stefanhafeneger/PushMeBaby" target="_blank" rel="noopener">pushMeBaby tools for test with OC</a></li><li>PHP program you can find it in second webside</li></ul></blockquote><h1 id="Put-this-test-code-in-your-iOS-program-delegate-file"><a href="#Put-this-test-code-in-your-iOS-program-delegate-file" class="headerlink" title="Put this test code in your iOS program. delegate file"></a>Put this test code in your iOS program. delegate file</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    &#x2F;&#x2F;registerd or not</span><br><span class="line">    if (![application isRegisteredForRemoteNotifications]) &#123;</span><br><span class="line">        UIUserNotificationSettings *uns &#x3D; [UIUserNotificationSettings settingsForTypes:(UIUserNotificationTypeAlert|UIUserNotificationTypeBadge|UIUserNotificationTypeSound) categories:nil];</span><br><span class="line">        [application registerUserNotificationSettings:uns];</span><br><span class="line">        &#x2F;&#x2F;register</span><br><span class="line">        [application registerForRemoteNotifications];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;register success，return deviceToken</span><br><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, deviceToken);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;register fail</span><br><span class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;receive remote message</span><br><span class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;remote: %@&quot;, userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 简明语法参考</title>
      <link href="/2016/05/21/Markdown/"/>
      <url>/2016/05/21/Markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown-概述"><a href="#Markdown-概述" class="headerlink" title="Markdown 概述"></a>Markdown 概述</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。<br>—— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p><p>Markdown 语法是对纯文本格式的强化，能使文本显示得更清晰、有条理。但它依旧算是简单的文本，很容易修改和扩展，常用于快速写作中。</p><p>所见即所得。不少 MD 编辑器有极强的实时预览渲染，可以让写作者及时看到自己写作的内容显示效果并对此做出调整。</p><p>Markdown 格式的简洁特性、兼容扩展性颇佳，使之能快速转换为各种互联网上的常用格式，比如 HTML、Word、PDF 等。目前，越来越多的人开始接受和使用它。</p><h2 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h2><p>常见及常用的 Markdown 编辑器很多，比如：</p><ul><li><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a></li><li><a href="http://typora.io/" target="_blank" rel="noopener">Typora</a>  </li></ul><p>此外还有（收费为主）：</p><ul><li><a href="http://www.literatureandlatte.com/scrivener.php" target="_blank" rel="noopener">Scrivener</a></li><li><a href="http://realmacsoftware.com/typed/" target="_blank" rel="noopener">Typed</a></li><li><a href="https://ia.net/writer/mac/" target="_blank" rel="noopener"></a></li><li><a href="http://bywordapp.com/" target="_blank" rel="noopener">Byword</a></li><li><a href="http://marked2app.com/" target="_blank" rel="noopener">Marked 2</a></li><li><a href="http://www.ulyssesapp.com/" target="_blank" rel="noopener">Ulysses</a></li><li><a href="http://marboo.io/" target="_blank" rel="noopener">Marboo</a> </li><li><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a></li></ul><p>以及支持 Markdown 的优质在线编辑器：</p><ul><li><a href="http://maxiang.info/" target="_blank" rel="noopener">马克飞象</a></li><li><a href="http://dillinger.io/" target="_blank" rel="noopener">Dillinger</a></li><li><a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a></li><li><a href="http://markable.in/editor/" target="_blank" rel="noopener">Markable</a></li></ul><p>入门编辑器推荐第一序列的 MacDown，其它编辑器可以等熟悉 Markdown 之后再自行探索。</p><h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><p>关于 Markdown 的基本语法，这里将逐一说明。对于一些写作中一般不算常用（不好用）的表格及代码展示，不多说明。</p><p>基本所有以下涉及的标点都以在英文输入状态下的为准。不然会导致语法失效。</p><p>先看一个包含了蛮多基本语法的范例。</p><p><img src="http://dreamofbook.qiniudn.com/Markdown-Sample.png" alt="Markdown"></p><p>关于语法，让我们先从在文中起到分清区块、梳理逻辑关系的标题说起：</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题</code></pre><p>显示效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="俺，二级标题"><a href="#俺，二级标题" class="headerlink" title="俺，二级标题"></a>俺，二级标题</h2><h3 id="我是三级标题"><a href="#我是三级标题" class="headerlink" title="我是三级标题"></a>我是三级标题</h3><h4 id="人家只是个四级标题……"><a href="#人家只是个四级标题……" class="headerlink" title="人家只是个四级标题……"></a>人家只是个四级标题……</h4><h5 id="更小的我，五级标题-XD"><a href="#更小的我，五级标题-XD" class="headerlink" title="更小的我，五级标题 XD"></a>更小的我，五级标题 XD</h5><h6 id="Github-支持的最小的可以我（哪里冒出来的）"><a href="#Github-支持的最小的可以我（哪里冒出来的）" class="headerlink" title="Github 支持的最小的可以我（哪里冒出来的）"></a>Github 支持的最小的可以我（哪里冒出来的）</h6><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>Markdown 语法下，换行的方式有：</p><ol><li>隔行换行。连续敲击两下「Return」键，再开始写下一段；</li><li>在行末添加两个空格符，而后「Return」（为了显示清晰），开始写下一段。</li></ol><h2 id="强调标记"><a href="#强调标记" class="headerlink" title="强调标记"></a>强调标记</h2><pre><code>*斜体* 斜体_斜体_**加粗** 加粗__粗体_</code></pre><p>对于强调符号，需要注意的就是，以什么开始，以什么结尾，数量也保持一致，相应的语法才能生效。</p><p>显示效果如下：</p><p>这是 <em>斜体</em></p><p>这是 <strong>强调</strong></p><h2 id="分割线-Partition-Line"><a href="#分割线-Partition-Line" class="headerlink" title="分割线 Partition Line"></a>分割线 Partition Line</h2><pre><code>*** 加分割线* * * 加分割线***** 或者这样？--- 还有另外的方式___ 其实，还可以这样</code></pre><p>以下就是一条分割线：</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表分无序列表合有序列表两类，前者以「*」、「-」、「+」开头，后者以阿拉伯数字「1」开头。</p><p>三个注意点：</p><ol><li>如果前面有内容，在输入字符前，应先空一行；</li><li>符号与内容之间，须隔一个空格符，列表模式才能生效；</li><li>第一行内容输入完成，换行会自动补全下一行的开头符号（有序列表数字递增，无序列表符号不变），接下去只需继续输下一行内容，以此类推；</li><li>多层级列表，为美观也为减少出错考虑，注意同级列表符号的统一和上下对齐。</li></ol><p>无序列表：</p><pre><code>Unordered List:* English* Japanese* Chinese* ……Unordered List:- English- Japanese- Chinese- ……</code></pre><p>显示效果均如下：</p><p>Country List：</p><ul><li>English</li><li>Japanese</li><li>Chinese</li><li>……</li></ul><p>有序列表：</p><pre><code>Ordered List:1. Orange2. Apple3. Banana</code></pre><p>My Favorite Fruit List:</p><ol><li>Orange</li><li>Apple</li><li>Banana</li></ol><p>多层级列表：</p><pre><code>两都名胜- 南京  + 玄武湖  + 中山陵  + 鸡鸣寺- 杭州  + 西湖    * 苏堤    * 湖心亭    * 太子湾  + 九溪  + 灵隐</code></pre><p>注：此处的几个符号作用都是一样的，不同层级符号有所区别只为显示美观。日常使用，请每一级的符号一致。</p><p>显示效果如下：</p><p>两都名胜</p><ul><li>南京<ul><li>玄武湖</li><li>中山陵</li><li>鸡鸣寺</li></ul></li><li>杭州<ul><li>西湖<ul><li>苏堤</li><li>湖心亭</li><li>太子湾</li></ul></li><li>九溪</li><li>灵隐</li></ul></li></ul><hr><h2 id="引用-Quote"><a href="#引用-Quote" class="headerlink" title="引用 Quote"></a>引用 Quote</h2><p>引用。使用「&gt;」，添加在每行的开头。</p><p>两个注意点：</p><ol><li>「&gt;」的上一行，必须为空行；</li><li>「&gt;」与其后紧跟的第一个字之间有无空格符不影响效果（不过建议加一个）。</li></ol><p>显示效果如下：</p><p>詹姆斯·馬奇《馬奇論管理》：</p><blockquote><p>堂吉诃德提醒我们，如果我們只在不被辜負時去信任，只在有所回報時去愛，只在學有所用時去學習，那麼我們就放棄了為人的特征——願意在自我理念的名義下行動，不管結果如何。</p></blockquote><p>或者，你想要引用一首诗、一首歌：</p><pre><code>&gt; 五月天《天使》&gt; 像孩子依赖着肩膀 &gt; 像眼泪依赖着脸庞 &gt; 你就像天使一样 &gt; 给我依赖 给我力量  </code></pre><p>这儿也需要注意换行：每一行最后换行，添加两个空格符，不然内容会挤压在一块，变成一行。或者行与行之间，空一行。以下例子中，歌词部分输入时虽然都分列开，而实际显示时歌词都连成一句了。</p><blockquote><p>五月天《天使》 </p><p>像孩子依赖着肩膀<br>像眼泪依赖着脸庞<br>你就像天使一样<br>给我依赖 给我力量 </p></blockquote><p>每句歌词的行尾空两格之后，效果是这样的：</p><blockquote><p>五月天《天使》 </p><p>像孩子依赖着肩膀<br>像眼泪依赖着脸庞<br>你就像天使一样<br>给我依赖 给我力量   </p></blockquote><p>如果是想嵌套引用，像这样：</p><blockquote><p>浙江  </p><blockquote><p>杭州  </p><blockquote><p>西湖  </p><blockquote><p>湖心亭  </p></blockquote></blockquote></blockquote></blockquote><p>博客默认的 Markdown 工具有点问题，效果如下图：</p><p><img src="http://i1381.photobucket.com/albums/ah234/Azeril_Lapland/Screen%20Shot%202015-08-30%20at%209.26.17%20PM_zpsg0ojze8c.png" alt="嵌套引用"></p><p>语法如下，每行多添加一个「&gt;」符号，再输入文字内容即可（每行行尾记得添两个空格符）：</p><pre><code>&gt; 浙江&gt;&gt; 杭州&gt;&gt;&gt; 西湖&gt;&gt;&gt;&gt; 湖心亭</code></pre><h2 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h2><p>也就是 Blockquotes。</p><p>如果行尾不空格呢有没其它解决方法呢？如果是这样——</p><pre><code>风吹柳絮《麦兜当当伴我心》插曲风吹柳絮 茫茫难聚  随着风吹 飘来飘去  我若能够携你随风去  我愿像一块扣肉  我愿像一块扣肉  我愿像一块扣肉  扣住你梅菜扣住你手  我愿像一块扣肉  我愿像一块扣肉  我是你一块扣肉  你是那梅菜扣住你手  </code></pre><p>这里的方法是首行开头缩进四个空格符，或敲一下 tab 键（制表符键）。</p><p>还有一个方法。连续三个反引号「`」组成的前后两行，将内容包裹起来。</p><p>显示效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是另一个代码区块</span><br></pre></td></tr></table></figure><p>在代码区块中，Markdown 语法不会被转换，这也是为什么前面很多 Markdown 语法的例子能在代码区展示出来的缘故。不然这样一篇以 Markdown 语法解释 Markdown 语法的说明也无从谈起了。</p><p>嗯…嗯？</p><p>反引号的输入：英文输入模式下，点击键盘左上角的「~」键。</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>标记小段代码（文字）。为着重强调的内容添加深色背景框，在内容前后各添一个反引号「`」，将代码段或文字夹在中间即可实现。</p><p>显示效果如下：</p><ol><li>Use the <code>printf()</code> function.</li><li>这是加深背景色框的<code>字符</code>。</li></ol><hr><h2 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>使用「&lt;」、「&gt;」这样的尖角符号，url/email 在 Markdown 下可自动实现可点击链接的效果。</p><pre><code>&lt;http://www.google.com&gt;</code></pre><p>显示效果如下：</p><p><a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a></p><h3 id="网址链接-1"><a href="#网址链接-1" class="headerlink" title="网址链接"></a>网址链接</h3><p>至于网址链接的基本格式，应该是这样：</p><pre><code>[Link Name](Link) </code></pre><p>构成为：</p><ul><li>一个方括号，添加图片的描述文字</li><li>一个括号，添加图片网址</li></ul><p>以下为一个网址的栗子：</p><pre><code>[Welcome to my blog](http://azeril.me)</code></pre><p>显示效果如下：</p><p><a href="http://azeril.me" target="_blank" rel="noopener">Welcome to my blog</a></p><h3 id="索引链接"><a href="#索引链接" class="headerlink" title="索引链接"></a>索引链接</h3><p>内容描述后添加定义链接（以数字/英文/符号为主），在文字段落外关联具体网址，实现可跳转效果。</p><pre><code>[Click Google Search][Tags][Tags]: http://www.google.com &quot;Google&quot;</code></pre><p>显示效果如下：</p><p><a href="http://www.google.com" target="_blank" rel="noopener" title="Google">Click Google Search</a></p><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p>插入图片的语法：</p><pre><code>![Pic name](Pic link)  ![Instagram Pic](http://i.imgur.com/UKhrRrK.jpg)</code></pre><ul><li>一个英文输入下的惊叹号「!」；</li><li>一个方括号，添加图片的描述文字；</li><li>一个括号，添加图片网址。</li></ul><p>相比插入网址链接，多了一个开头的惊叹号。</p><p>显示效果如下：</p><p><img src="http://i.imgur.com/UKhrRrK.jpg" alt="Instagram Pic"></p><h2 id="添加表格"><a href="#添加表格" class="headerlink" title="添加表格"></a>添加表格</h2><pre><code>|Title |Title 1|Title 2|Title 3||---|---:|:---:|---:|| A|B|C|D|</code></pre><p>显示效果如下：</p><table><thead><tr><th>Province</th><th style="text-align:left">ZJ 浙江省</th><th style="text-align:center">FJ 福建省</th><th style="text-align:right">YN 云南省</th></tr></thead><tbody><tr><td>省会</td><td style="text-align:left">杭州</td><td style="text-align:center">厦门</td><td style="text-align:right">昆明</td></tr></tbody></table><p>一般的表格由「|」与「-」两种符号（英文半角字符）构成。第一、三及其后的行都由「|」组成。依数据的列数确定数量（列数据量 +1）。<br>第二行为中间为连续的「-」组成的隔断，数量不限，更多是让文本显得美观（和预览无关）。</p><p>第二行中出现的冒号作用是设定表格内数据的对齐方式，不是必须使用的。具体意义如下：</p><ol><li><code>:–--</code> 冒号在左，左对齐</li><li><code>--–：</code> 冒号在右，右对齐</li><li><code>：--–：</code> 左右两侧都出现冒号，居中对齐</li></ol><h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>如何在 MD 文档中输出被用于转换格式的符号本身？这里就需要转义符，也就是反斜线「\」来协助。</p><p>如果要显示「*」，则可以用如下的方式：</p><pre><code>表示强调的符号这样用： \*Emphasize\*</code></pre><p>显示效果如下：</p><p>表示强调的符号这样用： *Emphasize*</p><p>支持转义的 MD 符号包括：</p><pre><code>\   反斜线`   反引号\*   星号\_   下划线{}  花括号[]  方括号()  圆括号#   井号+   加号-   减号（连字符）.   句点!   感叹号</code></pre><hr><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>基于 Markdown 的 HTML 语言运用。</p><p>HTML 可以契合 MD 语法，而通过利用前者，可以实现一些单纯依靠 MD 语法暂时无法实现的功能和页面显示效果。</p><h3 id="网址链接-2"><a href="#网址链接-2" class="headerlink" title="网址链接"></a>网址链接</h3><p>页面内跳转链接。利用 HTML <img> 语法制作 Markdown 长文的可跳转目录。分两部分，前为具体条目信息，后边则指向内容的位置（代码段放在页面的哪里，点击索引条目后就跳转到哪里）。</p><p>范例语法如下：</p><pre><code>[Line](#A)&lt;a name=&quot;A&quot;&gt;&lt;/a&gt;</code></pre><p><a href="#A">Line</a></p><p><a name="A"></a></p><h2 id="添加图片-进阶版"><a href="#添加图片-进阶版" class="headerlink" title="添加图片(进阶版)"></a>添加图片(进阶版)</h2><p><img src="http://7s1rzi.com1.z0.glb.clouddn.com/Pic_Sample.jpg" alt="Pic_Sample"></p><p>在页面中，要并排插入多张图片（两张或三张并排显示）或将插入图片居中显示，又或者是类似固定显示图片的宽度与高度，目前依靠 Markdown 语法还无法实现。<br>这时，调用 HTML 语法就可以轻松搞定。</p><p>以下，可以仅看添加图床图片的那部分，减少认知负荷。</p><h3 id="图片与图床"><a href="#图片与图床" class="headerlink" title="图片与图床"></a>图片与图床</h3><p>图床是第三方服务托管个人上传图片，并提供图片外链，让我们在写博客文章时使用的方式。</p><p>常用图床： </p><ul><li><a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛云存储</a></li><li><a href="http://imgur.com/" target="_blank" rel="noopener">Imgur</a></li><li><a href="http://s1381.photobucket.com/" target="_blank" rel="noopener">Photobucket</a></li></ul><p>图床在上传图片后会提供一个图片的外链。我们可以利用外链把图片添加到自己的博文中。图片也可以存储在 Github 自己的博客仓库里，不过图片蛮占用空间（Github 项目空间为200 M）。因而最好是选图床托管图片。</p><p>如果是单纯插入来自图床的图片外链：</p><p>单张居中显示：</p><pre><code>&lt;center&gt;    &lt;img src=&quot;http://dreamofbook.qiniudn.com/Zero.png&quot;&gt;&lt;/center&gt;OR&lt;figure&gt;    &lt;img src=&quot;http://xxx.jpg&quot;&gt;&lt;/figure&gt; </code></pre><p>效果如下：</p><figure><br><img src="http://dreamofbook.qiniudn.com/Zero.png"><br></figure> <p>固定图片宽度/高度：</p><pre><code>&lt;img src=&quot;http://xxx.jpg&quot; title=&quot;Logo&quot; width=&quot;100&quot; /&gt;</code></pre><p>宽度是 Width，高度是 High。Title 为图片描述。</p><p>效果如下：</p><p><img src="http://dreamofbook.qiniudn.com/Zero.png" title="Logo" width="100" /></p><p>两张并排显示：</p><pre><code>&lt;figure class=&quot;half&quot;&gt;    &lt;img src=&quot;http://xxx.jpg&quot;&gt;    &lt;img src=&quot;http://yyy.jpg&quot;&gt;&lt;/figure&gt;</code></pre><p>三张并排显示：</p><pre><code>&lt;figure class=&quot;third&quot;&gt;    &lt;img src=&quot;http://xxx.jpg&quot;&gt;    &lt;img src=&quot;http://yyy.jpg&quot;&gt;    &lt;img src=&quot;http://zzz.jpg&quot;&gt;&lt;/figure&gt;</code></pre><p>使用时复制相应的代码粘贴，然后替换 “”(英文输入下的引号) 里的链接，也就是例子中的「<a href="http://xxx.jpg」链接为自己上传图片（一般只有在图床上传的图才有这样的链接）的外链。" target="_blank" rel="noopener">http://xxx.jpg」链接为自己上传图片（一般只有在图床上传的图才有这样的链接）的外链。</a></p><p>Tips: 关于 jpg/png 都是常用文件格式，jpg 格式压缩效率高，相对文件质量小一点，占用网络空间少，在页面里显示时加载会快一些。png 格式的图片更清晰。</p><h3 id="添加-Github-图片"><a href="#添加-Github-图片" class="headerlink" title="添加 Github 图片"></a>添加 Github 图片</h3><p>如果是利用在 Github 项目文件夹里的图片，基本的语法不变，只是将前面提到 “” 里的图片外链（网址）替换为：</p><pre><code>「自定义的域名 + 图片在 Github 项目的位置」</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; site.url &#125;&#125;&#x2F;images&#x2F;xxx.jpg</span><br></pre></td></tr></table></figure><p>引用的代码自动变形了。博文中两个花括号及「site.url」构成的代码块会自动补全为我的个人域名，所以这篇博文代码区中的演示也受到了影响(上一段的引用就受到影响了。后边的文中引用的例子也一样)。如果复制了刚才的代码块，需要将「 azeril.me//」修改成下图中的样子（两个花括号，中间加 site.url ）。即：</p><p><img src="http://dreamofbook.qiniudn.com/onelinecode.png" alt="code"></p><p>使用时复制和修改相应的代码，并替换「/images/xxx.jpg」这样的链接为自己放置图片的路径。</p><p>如果 Github 项目下有 images 文件夹，直接在里面放图，就是如上的代码替换。如果是 images 目录下的文件夹，如 Instagram，则路径为：「images/Instagram/ xxx.jpg」。依此类推。</p><p><img src="http://dreamofbook.qiniudn.com/twolinescode.png" alt=""></p><h3 id="附加浏览窗口的模式"><a href="#附加浏览窗口的模式" class="headerlink" title="附加浏览窗口的模式"></a>附加浏览窗口的模式</h3><p>更复杂一点，点击图片可以跳出一个预览窗口，可以看大图和切换图片。</p><p>效果如下：</p><p><img src="http://dreamofbook.qiniudn.com/Preview_Pic.png" alt="PreviewPic"></p><p>两张并排显示的代码（单张和三张代码和前述的类似）：</p><pre><code>&lt;figure class=&quot;half&quot;&gt;    &lt;a href=&quot;{{ site.url }}/images/xxx.jpg&quot;&gt;&lt;img src=&quot;{{ site.url }}/images/ xxx.jpg&quot;&gt;&lt;/a&gt;    &lt;a href=&quot;{{ site.url }}/images/yyy.jpg&quot;&gt;&lt;img src=&quot;{{ site.url }}/images/ yyy.jpg&quot;&gt;&lt;/a&gt;&lt;/figure&gt;</code></pre><h3 id="添加图片代码分享"><a href="#添加图片代码分享" class="headerlink" title="添加图片代码分享"></a>添加图片代码分享</h3><p>因博客显示时引用的部分 HTML 代码有问题，所以另外发一份 md 版本的文档供参考。</p><p>下载地址：</p><p>百度云 - <a href="http://pan.baidu.com/s/1Bb4qM" target="_blank" rel="noopener">Dl from BaiduYun</a><br>box.com -  <a href="https://app.box.com/s/l8x1jajwv82umq33aa7dkwpl9sr59q55" target="_blank" rel="noopener">Dl from Box.com</a><br>dropbox -  <a href="https://dl.dropboxusercontent.com/u/64524965/AddPic.md" target="_blank" rel="noopener">Dl from Dropbox</a>  </p><p>愉快。</p><h2 id="参考文档及扩展阅读"><a href="#参考文档及扩展阅读" class="headerlink" title="参考文档及扩展阅读"></a>参考文档及扩展阅读</h2><ol><li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的 Markdown 新手指南_简书</a>  </li><li><a href="http://wowubuntu.com/markdown/#editor" target="_blank" rel="noopener">Markdown 语法说明_WowUbuntu</a>  </li><li><a href="http://www.ituring.com.cn/article/504" target="_blank" rel="noopener">Markdown 语法说明（详解版）_图灵社区</a>  </li><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Mastering Markdown · GitHub Guides</a></li><li><a href="https://www.wikiwand.com/zh/Markdown" target="_blank" rel="noopener">Markdown - Wikiwand</a></li><li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="noopener">Markdown 写作浅谈 - 阳志平的网志</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Note</title>
      <link href="/2015/10/21/leetCode-note/"/>
      <url>/2015/10/21/leetCode-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Binary-Tree-Maximum-Path-Sum"><a href="#Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Binary Tree Maximum Path Sum"></a>Binary Tree Maximum Path Sum</h2><p>#Recursively can handle many kinds of question.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct TreeNode *left;</span><br><span class="line"> *     struct TreeNode *right;</span><br><span class="line"> * &#125;;</span><br><span class="line"> *&#x2F;</span><br><span class="line">int maxPathUnit(struct TreeNode* node, int* result) &#123;</span><br><span class="line">    if (!node) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; step 1</span><br><span class="line">    int left &#x3D; maxPathUnit(node-&gt;left, result);</span><br><span class="line">    int right &#x3D; maxPathUnit(node-&gt;right, result);</span><br><span class="line">    &#x2F;&#x2F; step 2</span><br><span class="line">    int current &#x3D; node-&gt;val;</span><br><span class="line">    current &#x3D; node-&gt;val + left &gt; current ? node-&gt;val + left : current;</span><br><span class="line">    current &#x3D; node-&gt;val + right &gt; current ? node-&gt;val + right : current;</span><br><span class="line">    current &#x3D; node-&gt;val + left + right &gt; current ? node-&gt;val + left + right : current;</span><br><span class="line">    &#x2F;&#x2F; step 3</span><br><span class="line">    if (current &gt; *result) </span><br><span class="line">        *result &#x3D; current;</span><br><span class="line">    &#x2F;&#x2F; step 4</span><br><span class="line">    int maxPath &#x3D; node-&gt;val;</span><br><span class="line">    maxPath &#x3D; node-&gt;val + left &gt; maxPath ? node-&gt;val + left : maxPath;</span><br><span class="line">    maxPath &#x3D; node-&gt;val + right &gt; maxPath ? node-&gt;val + right : maxPath;</span><br><span class="line">    return maxPath;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int maxPathSum(struct TreeNode* root) &#123;</span><br><span class="line">    int result &#x3D; INT_MIN;</span><br><span class="line">    maxPathUnit(root, &amp;result);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS Skill</title>
      <link href="/2015/10/05/Mac-OS-X-skills/"/>
      <url>/2015/10/05/Mac-OS-X-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="Automate-Trackpad-amp-Mouse-Natural-Scrolling-in-Mac-OS-X"><a href="#Automate-Trackpad-amp-Mouse-Natural-Scrolling-in-Mac-OS-X" class="headerlink" title="Automate Trackpad &amp; Mouse Natural Scrolling in Mac OS X"></a>Automate Trackpad &amp; Mouse Natural Scrolling in Mac OS X</h1><p><a href="http://kellenmace.com/automate-trackpad-mouse-natural-scrolling-in-mac-os-x/" target="_blank" rel="noopener">http://kellenmace.com/automate-trackpad-mouse-natural-scrolling-in-mac-os-x/</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Production SSL Certification</title>
      <link href="/2015/09/22/Production-SSL-Certification-APN/"/>
      <url>/2015/09/22/Production-SSL-Certification-APN/</url>
      
        <content type="html"><![CDATA[<p>#Things about APN</p><blockquote><p>Follow <a href="http://yonglife.com/2015/09/16/material-for-Apple-Push-Notification/">Material For Apple push notification</a> can test your app with <strong>Development SSL Certificate</strong> easily. But when I move to <strong>Production SSL Certificate</strong> , I spand over 10 hour to figure out some problem. So I write the blog to help people who meetting the same problem like me. </p></blockquote><p>##certification</p><p>###Use Development SSL Certificate</p><ul><li>[x] iPhone developer certification</li><li>[x] apple development IOS Push Services</li></ul><p>###Use Production SSL Certification</p><ul><li>[x] iPhone Distribution certificaion</li><li>[x] Apple Production IOS Push Services</li><li>[x] apple store provisioning profile</li></ul><blockquote><p>Development SSL Certification and Production SSL Certification can exist at same time. But your app just can receive notification from one Certification. </p></blockquote><p>##DeviceToken</p><blockquote><p>deviceToken A token that identifies the device to APS. The token is an opaque data type because that is the form that the provider needs to submit to the APS servers when it sends a notification to a device. The APS servers require a binary format for performance reasons. Note that the device token is different from the uniqueIdentifier property of UIDevice because, for security and privacy reasons, it must change when the device is wiped.</p></blockquote><p>####Important things</p><blockquote><ul><li>DeviceToken might change with time</li><li>DeviceToken might different in different app after iOS7</li><li>DeiceToken is different between Developer certification and Distribution certification</li><li>When you move to production SSL certification, remember change your <strong>code signing identity</strong> and <strong>provisioning</strong> in xcode</li></ul></blockquote><p>##Xcode<br>you need modify <strong>Build Settings-&gt;Code signing</strong></p><p>Debug&amp;Any iOS SDK should be <strong>iOS Developer</strong><br>Release&amp;Any iOS SDK should be <strong>iPhone Distribution XXXXX</strong><br>Provisioning Profile should be <strong>Automatic</strong> or your apple store Provisioning profile</p><p>#final<br>rebuild your app with new Xcode code signing. You will get a new deviceToken different from deviceToken when you use Developer SSL certification.<br>Test your app with <a href="https://github.com/Zambiorix/Cocoa-APNS-Test" target="_blank" rel="noopener">Cocoa-APNS-Test</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL Tutorial</title>
      <link href="/2015/09/19/MYSQL-Tutorial/"/>
      <url>/2015/09/19/MYSQL-Tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="MYSQL-Tutorial-on-Ubuntu"><a href="#MYSQL-Tutorial-on-Ubuntu" class="headerlink" title="MYSQL Tutorial on Ubuntu"></a>MYSQL Tutorial on Ubuntu</h2><p><a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial</a></p><h2 id="ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’-2"><a href="#ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’-2" class="headerlink" title="ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)"></a>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</h2><p><a href="http://stackoverflow.com/questions/19658891/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-var-run" target="_blank" rel="noopener">http://stackoverflow.com/questions/19658891/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-var-run</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2015/09/16/firstPost/"/>
      <url>/2015/09/16/firstPost/</url>
      
        <content type="html"><![CDATA[<p>#Hello World!</p><p>##test</p><p>###test2<br>$x^2=1$</p><p><a href="http://google.com" target="_blank" rel="noopener">Google</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print &#39;hello world&#39;</span><br></pre></td></tr></table></figure><br>test <code>test</code></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Words </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
